--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.1
-- Dumped by pg_dump version 9.6.1

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: aatams_biologging_penguin; Type: SCHEMA; Schema: -; Owner: aatams_biologging_penguin
--

CREATE SCHEMA aatams_biologging_penguin;


ALTER SCHEMA aatams_biologging_penguin OWNER TO aatams_biologging_penguin;

--
-- Name: aatams_biologging_shearwater; Type: SCHEMA; Schema: -; Owner: aatams_biologging_shearwater
--

CREATE SCHEMA aatams_biologging_shearwater;


ALTER SCHEMA aatams_biologging_shearwater OWNER TO aatams_biologging_shearwater;

--
-- Name: aatams_biologging_snowpetrel; Type: SCHEMA; Schema: -; Owner: aatams_biologging_snowpetrel
--

CREATE SCHEMA aatams_biologging_snowpetrel;


ALTER SCHEMA aatams_biologging_snowpetrel OWNER TO aatams_biologging_snowpetrel;

--
-- Name: aatams_sattag_dm; Type: SCHEMA; Schema: -; Owner: aatams_sattag_dm
--

CREATE SCHEMA aatams_sattag_dm;


ALTER SCHEMA aatams_sattag_dm OWNER TO aatams_sattag_dm;

--
-- Name: aatams_sattag_nrt; Type: SCHEMA; Schema: -; Owner: aatams_sattag_nrt
--

CREATE SCHEMA aatams_sattag_nrt;


ALTER SCHEMA aatams_sattag_nrt OWNER TO aatams_sattag_nrt;

--
-- Name: aatams_sattag_qc_ctd; Type: SCHEMA; Schema: -; Owner: aatams_sattag_qc_ctd
--

CREATE SCHEMA aatams_sattag_qc_ctd;


ALTER SCHEMA aatams_sattag_qc_ctd OWNER TO aatams_sattag_qc_ctd;

--
-- Name: abos; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA abos;


ALTER SCHEMA abos OWNER TO postgres;

--
-- Name: abos_currents; Type: SCHEMA; Schema: -; Owner: abos_currents
--

CREATE SCHEMA abos_currents;


ALTER SCHEMA abos_currents OWNER TO abos_currents;

--
-- Name: abos_sofs_fl; Type: SCHEMA; Schema: -; Owner: abos_sofs_fl
--

CREATE SCHEMA abos_sofs_fl;


ALTER SCHEMA abos_sofs_fl OWNER TO abos_sofs_fl;

--
-- Name: abos_sofs_sp; Type: SCHEMA; Schema: -; Owner: abos_sofs_sp
--

CREATE SCHEMA abos_sofs_sp;


ALTER SCHEMA abos_sofs_sp OWNER TO abos_sofs_sp;

--
-- Name: abos_sots; Type: SCHEMA; Schema: -; Owner: abos_sots
--

CREATE SCHEMA abos_sots;


ALTER SCHEMA abos_sots OWNER TO abos_sots;

--
-- Name: abos_ts; Type: SCHEMA; Schema: -; Owner: abos_ts
--

CREATE SCHEMA abos_ts;


ALTER SCHEMA abos_ts OWNER TO abos_ts;

--
-- Name: acorn_hourly_avg_nonqc; Type: SCHEMA; Schema: -; Owner: acorn_hourly_avg_nonqc
--

CREATE SCHEMA acorn_hourly_avg_nonqc;


ALTER SCHEMA acorn_hourly_avg_nonqc OWNER TO acorn_hourly_avg_nonqc;

--
-- Name: acorn_hourly_avg_qc; Type: SCHEMA; Schema: -; Owner: acorn_hourly_avg_qc
--

CREATE SCHEMA acorn_hourly_avg_qc;


ALTER SCHEMA acorn_hourly_avg_qc OWNER TO acorn_hourly_avg_qc;

--
-- Name: acorn_radial_nonqc; Type: SCHEMA; Schema: -; Owner: acorn_radial_nonqc
--

CREATE SCHEMA acorn_radial_nonqc;


ALTER SCHEMA acorn_radial_nonqc OWNER TO acorn_radial_nonqc;

--
-- Name: acorn_radial_qc; Type: SCHEMA; Schema: -; Owner: acorn_radial_qc
--

CREATE SCHEMA acorn_radial_qc;


ALTER SCHEMA acorn_radial_qc OWNER TO acorn_radial_qc;

--
-- Name: anfog_dm; Type: SCHEMA; Schema: -; Owner: anfog_dm
--

CREATE SCHEMA anfog_dm;


ALTER SCHEMA anfog_dm OWNER TO anfog_dm;

--
-- Name: anfog_rt; Type: SCHEMA; Schema: -; Owner: anfog_rt
--

CREATE SCHEMA anfog_rt;


ALTER SCHEMA anfog_rt OWNER TO anfog_rt;

--
-- Name: anmn_acidification_nrt; Type: SCHEMA; Schema: -; Owner: anmn_acidification_nrt
--

CREATE SCHEMA anmn_acidification_nrt;


ALTER SCHEMA anmn_acidification_nrt OWNER TO anmn_acidification_nrt;

--
-- Name: anmn_acoustics; Type: SCHEMA; Schema: -; Owner: anmn_acoustics
--

CREATE SCHEMA anmn_acoustics;


ALTER SCHEMA anmn_acoustics OWNER TO anmn_acoustics;

--
-- Name: anmn_am_dm; Type: SCHEMA; Schema: -; Owner: anmn_am_dm
--

CREATE SCHEMA anmn_am_dm;


ALTER SCHEMA anmn_am_dm OWNER TO anmn_am_dm;

--
-- Name: anmn_burst_avg; Type: SCHEMA; Schema: -; Owner: anmn_burst_avg
--

CREATE SCHEMA anmn_burst_avg;


ALTER SCHEMA anmn_burst_avg OWNER TO anmn_burst_avg;

--
-- Name: anmn_metadata; Type: SCHEMA; Schema: -; Owner: anmn_metadata
--

CREATE SCHEMA anmn_metadata;


ALTER SCHEMA anmn_metadata OWNER TO anmn_metadata;

--
-- Name: anmn_mhlwave; Type: SCHEMA; Schema: -; Owner: anmn_mhlwave
--

CREATE SCHEMA anmn_mhlwave;


ALTER SCHEMA anmn_mhlwave OWNER TO anmn_mhlwave;

--
-- Name: anmn_nrs_bgc; Type: SCHEMA; Schema: -; Owner: anmn_nrs_bgc
--

CREATE SCHEMA anmn_nrs_bgc;


ALTER SCHEMA anmn_nrs_bgc OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_ctd_profiles; Type: SCHEMA; Schema: -; Owner: anmn_nrs_ctd_profiles
--

CREATE SCHEMA anmn_nrs_ctd_profiles;


ALTER SCHEMA anmn_nrs_ctd_profiles OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: anmn_nrs_dar_yon; Type: SCHEMA; Schema: -; Owner: anmn_nrs_dar_yon
--

CREATE SCHEMA anmn_nrs_dar_yon;


ALTER SCHEMA anmn_nrs_dar_yon OWNER TO anmn_nrs_dar_yon;

--
-- Name: anmn_nrs_long_ts; Type: SCHEMA; Schema: -; Owner: anmn_nrs_long_ts
--

CREATE SCHEMA anmn_nrs_long_ts;


ALTER SCHEMA anmn_nrs_long_ts OWNER TO anmn_nrs_long_ts;

--
-- Name: anmn_nrs_rt_bio; Type: SCHEMA; Schema: -; Owner: anmn_nrs_rt_bio
--

CREATE SCHEMA anmn_nrs_rt_bio;


ALTER SCHEMA anmn_nrs_rt_bio OWNER TO anmn_nrs_rt_bio;

--
-- Name: anmn_nrs_rt_meteo; Type: SCHEMA; Schema: -; Owner: anmn_nrs_rt_meteo
--

CREATE SCHEMA anmn_nrs_rt_meteo;


ALTER SCHEMA anmn_nrs_rt_meteo OWNER TO anmn_nrs_rt_meteo;

--
-- Name: anmn_nrs_rt_wave; Type: SCHEMA; Schema: -; Owner: anmn_nrs_rt_wave
--

CREATE SCHEMA anmn_nrs_rt_wave;


ALTER SCHEMA anmn_nrs_rt_wave OWNER TO anmn_nrs_rt_wave;

--
-- Name: anmn_t_regridded; Type: SCHEMA; Schema: -; Owner: anmn_t_regridded
--

CREATE SCHEMA anmn_t_regridded;


ALTER SCHEMA anmn_t_regridded OWNER TO anmn_t_regridded;

--
-- Name: anmn_ts; Type: SCHEMA; Schema: -; Owner: anmn_ts
--

CREATE SCHEMA anmn_ts;


ALTER SCHEMA anmn_ts OWNER TO anmn_ts;

--
-- Name: anmn_velocity; Type: SCHEMA; Schema: -; Owner: anmn_velocity
--

CREATE SCHEMA anmn_velocity;


ALTER SCHEMA anmn_velocity OWNER TO anmn_velocity;

--
-- Name: anmn_wave; Type: SCHEMA; Schema: -; Owner: anmn_wave
--

CREATE SCHEMA anmn_wave;


ALTER SCHEMA anmn_wave OWNER TO anmn_wave;

--
-- Name: aodn_aims_ctd; Type: SCHEMA; Schema: -; Owner: aodn_aims_ctd
--

CREATE SCHEMA aodn_aims_ctd;


ALTER SCHEMA aodn_aims_ctd OWNER TO aodn_aims_ctd;

--
-- Name: aodn_coastal_watch; Type: SCHEMA; Schema: -; Owner: legacy
--

CREATE SCHEMA aodn_coastal_watch;


ALTER SCHEMA aodn_coastal_watch OWNER TO legacy;

--
-- Name: aodn_csiro_cmar; Type: SCHEMA; Schema: -; Owner: aodn_csiro_cmar
--

CREATE SCHEMA aodn_csiro_cmar;


ALTER SCHEMA aodn_csiro_cmar OWNER TO aodn_csiro_cmar;

--
-- Name: aodn_dart; Type: SCHEMA; Schema: -; Owner: aodn_dart
--

CREATE SCHEMA aodn_dart;


ALTER SCHEMA aodn_dart OWNER TO aodn_dart;

--
-- Name: aodn_dsto; Type: SCHEMA; Schema: -; Owner: aodn_dsto
--

CREATE SCHEMA aodn_dsto;


ALTER SCHEMA aodn_dsto OWNER TO aodn_dsto;

--
-- Name: aodn_imas_fluorometry; Type: SCHEMA; Schema: -; Owner: aodn_imas_fluorometry
--

CREATE SCHEMA aodn_imas_fluorometry;


ALTER SCHEMA aodn_imas_fluorometry OWNER TO aodn_imas_fluorometry;

--
-- Name: aodn_mhl_sst; Type: SCHEMA; Schema: -; Owner: aodn_mhl_sst
--

CREATE SCHEMA aodn_mhl_sst;


ALTER SCHEMA aodn_mhl_sst OWNER TO aodn_mhl_sst;

--
-- Name: aodn_nsw_oeh; Type: SCHEMA; Schema: -; Owner: aodn_nsw_oeh
--

CREATE SCHEMA aodn_nsw_oeh;


ALTER SCHEMA aodn_nsw_oeh OWNER TO aodn_nsw_oeh;

--
-- Name: aodn_nt_sattag_hawksbill; Type: SCHEMA; Schema: -; Owner: aodn_nt_sattag_hawksbill
--

CREATE SCHEMA aodn_nt_sattag_hawksbill;


ALTER SCHEMA aodn_nt_sattag_hawksbill OWNER TO aodn_nt_sattag_hawksbill;

--
-- Name: aodn_nt_sattag_oliveridley; Type: SCHEMA; Schema: -; Owner: aodn_nt_sattag_oliveridley
--

CREATE SCHEMA aodn_nt_sattag_oliveridley;


ALTER SCHEMA aodn_nt_sattag_oliveridley OWNER TO aodn_nt_sattag_oliveridley;

--
-- Name: aodn_ran_ctd; Type: SCHEMA; Schema: -; Owner: aodn_ran_ctd
--

CREATE SCHEMA aodn_ran_ctd;


ALTER SCHEMA aodn_ran_ctd OWNER TO aodn_ran_ctd;

--
-- Name: aodn_wamsi_sediment; Type: SCHEMA; Schema: -; Owner: aodn_wamsi_sediment
--

CREATE SCHEMA aodn_wamsi_sediment;


ALTER SCHEMA aodn_wamsi_sediment OWNER TO aodn_wamsi_sediment;

--
-- Name: argo; Type: SCHEMA; Schema: -; Owner: argo
--

CREATE SCHEMA argo;


ALTER SCHEMA argo OWNER TO argo;

--
-- Name: aus_phyto_db; Type: SCHEMA; Schema: -; Owner: aus_phyto_db
--

CREATE SCHEMA aus_phyto_db;


ALTER SCHEMA aus_phyto_db OWNER TO aus_phyto_db;

--
-- Name: aus_phyto_db_ongoing; Type: SCHEMA; Schema: -; Owner: aus_phyto_db_ongoing
--

CREATE SCHEMA aus_phyto_db_ongoing;


ALTER SCHEMA aus_phyto_db_ongoing OWNER TO aus_phyto_db_ongoing;

--
-- Name: auv; Type: SCHEMA; Schema: -; Owner: auv
--

CREATE SCHEMA auv;


ALTER SCHEMA auv OWNER TO auv;

--
-- Name: auv_viewer_track; Type: SCHEMA; Schema: -; Owner: auv_viewer_track
--

CREATE SCHEMA auv_viewer_track;


ALTER SCHEMA auv_viewer_track OWNER TO auv_viewer_track;

--
-- Name: chef; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA chef;


ALTER SCHEMA chef OWNER TO postgres;

--
-- Name: contr_vocab_db; Type: SCHEMA; Schema: -; Owner: contr_vocab_db
--

CREATE SCHEMA contr_vocab_db;


ALTER SCHEMA contr_vocab_db OWNER TO contr_vocab_db;

--
-- Name: dw_aatams_acoustic; Type: SCHEMA; Schema: -; Owner: dw_aatams_acoustic
--

CREATE SCHEMA dw_aatams_acoustic;


ALTER SCHEMA dw_aatams_acoustic OWNER TO dw_aatams_acoustic;

--
-- Name: dw_abos; Type: SCHEMA; Schema: -; Owner: dw_abos
--

CREATE SCHEMA dw_abos;


ALTER SCHEMA dw_abos OWNER TO dw_abos;

--
-- Name: faimms; Type: SCHEMA; Schema: -; Owner: faimms
--

CREATE SCHEMA faimms;


ALTER SCHEMA faimms OWNER TO faimms;

--
-- Name: future_reef_map; Type: SCHEMA; Schema: -; Owner: future_reef_map
--

CREATE SCHEMA future_reef_map;


ALTER SCHEMA future_reef_map OWNER TO future_reef_map;

--
-- Name: generic_timestep; Type: SCHEMA; Schema: -; Owner: generic_timestep
--

CREATE SCHEMA generic_timestep;


ALTER SCHEMA generic_timestep OWNER TO generic_timestep;

--
-- Name: gsla_dm00; Type: SCHEMA; Schema: -; Owner: gsla_dm00
--

CREATE SCHEMA gsla_dm00;


ALTER SCHEMA gsla_dm00 OWNER TO gsla_dm00;

--
-- Name: gsla_nrt00; Type: SCHEMA; Schema: -; Owner: gsla_nrt00
--

CREATE SCHEMA gsla_nrt00;


ALTER SCHEMA gsla_nrt00 OWNER TO gsla_nrt00;

--
-- Name: legacy_baselayer; Type: SCHEMA; Schema: -; Owner: legacy
--

CREATE SCHEMA legacy_baselayer;


ALTER SCHEMA legacy_baselayer OWNER TO legacy;

--
-- Name: legacy_bathy; Type: SCHEMA; Schema: -; Owner: legacy
--

CREATE SCHEMA legacy_bathy;


ALTER SCHEMA legacy_bathy OWNER TO legacy;

--
-- Name: legacy_bluenet_aodn; Type: SCHEMA; Schema: -; Owner: legacy
--

CREATE SCHEMA legacy_bluenet_aodn;


ALTER SCHEMA legacy_bluenet_aodn OWNER TO legacy;

--
-- Name: legacy_cpr; Type: SCHEMA; Schema: -; Owner: legacy_cpr
--

CREATE SCHEMA legacy_cpr;


ALTER SCHEMA legacy_cpr OWNER TO legacy_cpr;

--
-- Name: marvl3; Type: SCHEMA; Schema: -; Owner: marvl3
--

CREATE SCHEMA marvl3;


ALTER SCHEMA marvl3 OWNER TO marvl3;

--
-- Name: noaa_drifters; Type: SCHEMA; Schema: -; Owner: noaa_drifters
--

CREATE SCHEMA noaa_drifters;


ALTER SCHEMA noaa_drifters OWNER TO noaa_drifters;

--
-- Name: parameters_mapping; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA parameters_mapping;


ALTER SCHEMA parameters_mapping OWNER TO postgres;

--
-- Name: report; Type: SCHEMA; Schema: -; Owner: report
--

CREATE SCHEMA report;


ALTER SCHEMA report OWNER TO report;

--
-- Name: report_test; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA report_test;


ALTER SCHEMA report_test OWNER TO postgres;

--
-- Name: soop; Type: SCHEMA; Schema: -; Owner: soop
--

CREATE SCHEMA soop;


ALTER SCHEMA soop OWNER TO soop;

--
-- Name: soop_asf_fmt; Type: SCHEMA; Schema: -; Owner: soop_asf_fmt
--

CREATE SCHEMA soop_asf_fmt;


ALTER SCHEMA soop_asf_fmt OWNER TO soop_asf_fmt;

--
-- Name: soop_asf_mt; Type: SCHEMA; Schema: -; Owner: soop_asf_mt
--

CREATE SCHEMA soop_asf_mt;


ALTER SCHEMA soop_asf_mt OWNER TO soop_asf_mt;

--
-- Name: soop_auscpr; Type: SCHEMA; Schema: -; Owner: soop_auscpr
--

CREATE SCHEMA soop_auscpr;


ALTER SCHEMA soop_auscpr OWNER TO soop_auscpr;

--
-- Name: soop_ba; Type: SCHEMA; Schema: -; Owner: soop_ba
--

CREATE SCHEMA soop_ba;


ALTER SCHEMA soop_ba OWNER TO soop_ba;

--
-- Name: soop_co2; Type: SCHEMA; Schema: -; Owner: soop_co2
--

CREATE SCHEMA soop_co2;


ALTER SCHEMA soop_co2 OWNER TO soop_co2;

--
-- Name: soop_sst; Type: SCHEMA; Schema: -; Owner: soop_sst
--

CREATE SCHEMA soop_sst;


ALTER SCHEMA soop_sst OWNER TO soop_sst;

--
-- Name: soop_tmv; Type: SCHEMA; Schema: -; Owner: soop_tmv
--

CREATE SCHEMA soop_tmv;


ALTER SCHEMA soop_tmv OWNER TO soop_tmv;

--
-- Name: soop_tmv_nrt; Type: SCHEMA; Schema: -; Owner: soop_tmv_nrt
--

CREATE SCHEMA soop_tmv_nrt;


ALTER SCHEMA soop_tmv_nrt OWNER TO soop_tmv_nrt;

--
-- Name: soop_trv; Type: SCHEMA; Schema: -; Owner: soop_trv
--

CREATE SCHEMA soop_trv;


ALTER SCHEMA soop_trv OWNER TO soop_trv;

--
-- Name: soop_xbt_dm; Type: SCHEMA; Schema: -; Owner: soop_xbt_dm
--

CREATE SCHEMA soop_xbt_dm;


ALTER SCHEMA soop_xbt_dm OWNER TO soop_xbt_dm;

--
-- Name: soop_xbt_nrt; Type: SCHEMA; Schema: -; Owner: soop_xbt_nrt
--

CREATE SCHEMA soop_xbt_nrt;


ALTER SCHEMA soop_xbt_nrt OWNER TO soop_xbt_nrt;

--
-- Name: srs_altimetry; Type: SCHEMA; Schema: -; Owner: srs_altimetry
--

CREATE SCHEMA srs_altimetry;


ALTER SCHEMA srs_altimetry OWNER TO srs_altimetry;

--
-- Name: srs_oc; Type: SCHEMA; Schema: -; Owner: srs_oc
--

CREATE SCHEMA srs_oc;


ALTER SCHEMA srs_oc OWNER TO srs_oc;

--
-- Name: srs_oc_bodbaw; Type: SCHEMA; Schema: -; Owner: srs_oc_bodbaw
--

CREATE SCHEMA srs_oc_bodbaw;


ALTER SCHEMA srs_oc_bodbaw OWNER TO srs_oc_bodbaw;

--
-- Name: srs_oc_ljco_aeronet; Type: SCHEMA; Schema: -; Owner: srs_oc_ljco_aeronet
--

CREATE SCHEMA srs_oc_ljco_aeronet;


ALTER SCHEMA srs_oc_ljco_aeronet OWNER TO srs_oc_ljco_aeronet;

--
-- Name: srs_oc_ljco_wws; Type: SCHEMA; Schema: -; Owner: srs_oc_ljco_wws
--

CREATE SCHEMA srs_oc_ljco_wws;


ALTER SCHEMA srs_oc_ljco_wws OWNER TO srs_oc_ljco_wws;

--
-- Name: srs_oc_soop_rad; Type: SCHEMA; Schema: -; Owner: srs_oc_soop_rad
--

CREATE SCHEMA srs_oc_soop_rad;


ALTER SCHEMA srs_oc_soop_rad OWNER TO srs_oc_soop_rad;

--
-- Name: srs_sst; Type: SCHEMA; Schema: -; Owner: srs_sst
--

CREATE SCHEMA srs_sst;


ALTER SCHEMA srs_sst OWNER TO srs_sst;

--
-- Name: wodb; Type: SCHEMA; Schema: -; Owner: wodb
--

CREATE SCHEMA wodb;


ALTER SCHEMA wodb OWNER TO wodb;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


--
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry, geography, and raster spatial types and functions';


--
-- Name: imos; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS imos WITH SCHEMA public;


--
-- Name: EXTENSION imos; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION imos IS 'general IMOS functionality';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


SET search_path = aatams_sattag_qc_ctd, pg_catalog;

--
-- Name: format_name(character); Type: FUNCTION; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE FUNCTION format_name(p_name character) RETURNS character
    LANGUAGE plpgsql
    AS $$DECLARE
                    parts text[];
                     BEGIN
                    select into parts (regexp_matches(initcap(p_name), '(.*)[ ,.]([a-zA-Z-]+)'));
                    return (select parts[2]||', '||parts[1]);
                     END;$$;


ALTER FUNCTION aatams_sattag_qc_ctd.format_name(p_name character) OWNER TO aatams_sattag_qc_ctd;

--
-- Name: getendtoken(character, character, integer); Type: FUNCTION; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE FUNCTION getendtoken(p_string character, p_regexp character, p_n integer) RETURNS character
    LANGUAGE plpgsql
    AS $$DECLARE
                    tokens text[]; 
                     BEGIN
                    select into tokens regexp_split_to_array(p_string, p_regexp); 
                    return (select tokens[array_length(tokens,1)- p_n  + 1]); 
                     END;$$;


ALTER FUNCTION aatams_sattag_qc_ctd.getendtoken(p_string character, p_regexp character, p_n integer) OWNER TO aatams_sattag_qc_ctd;

SET search_path = abos, pg_catalog;

--
-- Name: getglobalattribute(bigint, character); Type: FUNCTION; Schema: abos; Owner: postgres
--

CREATE FUNCTION getglobalattribute(p_id bigint, p_attribute_name character) RETURNS character
    LANGUAGE plpgsql
    AS $$
              BEGIN
                return (select a.value
                  from global_attribute a
                  where a.file_id=p_id
                    and a.name = p_attribute_name);
              END;
            $$;


ALTER FUNCTION abos.getglobalattribute(p_id bigint, p_attribute_name character) OWNER TO postgres;

--
-- Name: getglobalattributeasdouble(bigint, character); Type: FUNCTION; Schema: abos; Owner: postgres
--

CREATE FUNCTION getglobalattributeasdouble(p_id bigint, p_attribute_name character) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
                    BEGIN
                   return (select a.value
                     from global_attribute a
                    where a.file_id = p_id
                      and a.name = p_attribute_name
                      and a.value ~ '^[ +-.0-9E]+$'); -- filter out obvious non-numeric values
                    END;
            $_$;


ALTER FUNCTION abos.getglobalattributeasdouble(p_id bigint, p_attribute_name character) OWNER TO postgres;

--
-- Name: getglobalattributeastimestamp(bigint, character); Type: FUNCTION; Schema: abos; Owner: postgres
--

CREATE FUNCTION getglobalattributeastimestamp(p_id bigint, p_attribute_name character) RETURNS timestamp with time zone
    LANGUAGE plpgsql
    AS $$
              BEGIN
                return (select 
                  case when a.value like '% since %' then
                    cast(split_part(a.value, ' since ', 2) as timestamp with time zone) + cast(split_part(a.value, ' since ', 1) as interval)
                  else 
                    cast(a.value as timestamp with time zone)
                  end
                from global_attribute a
                where a.file_id=p_id
                  and a.name = p_attribute_name);
              EXCEPTION
                WHEN others THEN
                  RETURN null;
                END;
            $$;


ALTER FUNCTION abos.getglobalattributeastimestamp(p_id bigint, p_attribute_name character) OWNER TO postgres;

SET search_path = anmn_metadata, pg_catalog;

--
-- Name: getglobalattribute(bigint, character); Type: FUNCTION; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE FUNCTION getglobalattribute(p_id bigint, p_attribute_name character) RETURNS character
    LANGUAGE plpgsql
    AS $$
        BEGIN
	   return (select a.value
	     from global_attribute a
	    where a.file_id=p_id
	      and a.name = p_attribute_name);
        END;
$$;


ALTER FUNCTION anmn_metadata.getglobalattribute(p_id bigint, p_attribute_name character) OWNER TO anmn_metadata;

--
-- Name: getglobalattributeasdouble(bigint, character); Type: FUNCTION; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE FUNCTION getglobalattributeasdouble(p_id bigint, p_attribute_name character) RETURNS double precision
    LANGUAGE plpgsql
    AS $_$
        BEGIN
	   return (select a.value
	     from global_attribute a
	    where a.file_id = p_id
	      and a.name = p_attribute_name
	      and a.value ~ '^[ +-.0-9E]+$'); -- filter out obvious non-numeric values
	EXCEPTION
	   WHEN others THEN
	       RETURN null;
        END;
$_$;


ALTER FUNCTION anmn_metadata.getglobalattributeasdouble(p_id bigint, p_attribute_name character) OWNER TO anmn_metadata;

--
-- Name: getglobalattributeastimestamp(bigint, character); Type: FUNCTION; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE FUNCTION getglobalattributeastimestamp(p_id bigint, p_attribute_name character) RETURNS timestamp with time zone
    LANGUAGE plpgsql
    AS $$
        BEGIN
	   return (select 
		     case when a.value like '% since %' then
		        cast(split_part(a.value, ' since ', 2) as timestamp with time zone) + cast(split_part(a.value, ' since ', 1) as interval)
		     else 
		        cast(a.value as timestamp with time zone)
		     end
	     from global_attribute a
	    where a.file_id=p_id
	      and a.name = p_attribute_name);
	EXCEPTION
	   WHEN others THEN
	       RETURN null;
        END;
$$;


ALTER FUNCTION anmn_metadata.getglobalattributeastimestamp(p_id bigint, p_attribute_name character) OWNER TO anmn_metadata;

SET search_path = auv_viewer_track, pg_catalog;

--
-- Name: clean_dive_campaign(); Type: FUNCTION; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE FUNCTION clean_dive_campaign() RETURNS void
    LANGUAGE plpgsql
    AS $$  declare

 file_track_id_to_remove int;
    file_image_id_to_remove int;
  BEGIN
   
select distinct (file_id) into file_track_id_to_remove
from auv_tracks tracks
WHERE  NOT EXISTS( 
	select distinct(fk_auv_tracks) 
	from auv_images images
	where images.fk_auv_tracks = tracks.pkid
	);

   delete from  indexed_file  where id = file_track_id_to_remove;
   delete from  auv_tracks  where file_id = file_track_id_to_remove;

select distinct (file_id) into file_image_id_to_remove
from auv_images images
WHERE  NOT EXISTS( 
	select distinct(pkid) 
	from auv_tracks tracks
	where tracks.pkid = images.fk_auv_tracks 
	);

delete from  indexed_file where id = file_image_id_to_remove;
delete from  auv_images where file_id = file_image_id_to_remove;
                  
  END;$$;


ALTER FUNCTION auv_viewer_track.clean_dive_campaign() OWNER TO auv_viewer_track;

--
-- Name: expand_too_small_polygons(); Type: FUNCTION; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE FUNCTION expand_too_small_polygons() RETURNS void
    LANGUAGE plpgsql
    AS $$  declare
    bad_pkid_images RECORD;
  BEGIN
     
     FOR bad_pkid_images IN select pkid from  auv_viewer_track.auv_images where  (NOT ST_IsValid(geom))
        LOOP
            UPDATE auv_viewer_track.auv_images set geom = st_buffer(geom,0.00000001,'endcap=square') where pkid = bad_pkid_images.pkid;
     END LOOP; 
               
  END;$$;


ALTER FUNCTION auv_viewer_track.expand_too_small_polygons() OWNER TO auv_viewer_track;

SET search_path = chef, pg_catalog;

--
-- Name: functions_missing_aclitem(text, aclitem); Type: FUNCTION; Schema: chef; Owner: postgres
--

CREATE FUNCTION functions_missing_aclitem(text, aclitem) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
            declare ret boolean;
            declare schema text := $1 ;
            declare acl aclitem := $2 ;
            begin
              select coalesce(
                (select bool_or(
                  not coalesce( aclcontains( f.proacl, acl), false )
                )
                from pg_proc f
                join pg_namespace n on n.oid=f.pronamespace
                where n.nspname = schema
                ), false)
              into ret;
              return ret;
            end
          $_$;


ALTER FUNCTION chef.functions_missing_aclitem(text, aclitem) OWNER TO postgres;

--
-- Name: objects_missing_acl_aclitem(text, character, aclitem); Type: FUNCTION; Schema: chef; Owner: postgres
--

CREATE FUNCTION objects_missing_acl_aclitem(text, character, aclitem) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
            declare ret boolean;
            declare schema text := $1 ;
            declare kind char := $2 ;
            declare acl aclitem := $3 ;
            begin
              select coalesce(
                (select bool_or(
                  not coalesce( aclcontains( o.relacl, acl), false )
                )
                from pg_class o
                join pg_namespace n on n.oid=o.relnamespace
                where n.nspname = schema
                and o.relkind = kind
                ), false)
              into ret;
              return ret;
            end
          $_$;


ALTER FUNCTION chef.objects_missing_acl_aclitem(text, character, aclitem) OWNER TO postgres;

--
-- Name: objects_missing_acl_default_aclitem(text, text, character, aclitem); Type: FUNCTION; Schema: chef; Owner: postgres
--

CREATE FUNCTION objects_missing_acl_default_aclitem(text, text, character, aclitem) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
              declare ret boolean;
              declare target_role text := $1 ;
              declare schema text := $2 ;
              declare kind char := $3 ;
              declare acl aclitem := $4 ;
              begin
                select coalesce(
                  ( select not coalesce( aclcontains( d.defaclacl, acl), false )
                  from pg_catalog.pg_default_acl d
                  left join pg_catalog.pg_namespace n on n.oid = d.defaclnamespace
                  left join pg_catalog.pg_authid a on a.oid = d.defaclrole
                  where a.rolname = target_role
                  and n.nspname = schema
                  and d.defaclobjtype = kind
                  ), true)
                into ret;
                return ret;
              end
            $_$;


ALTER FUNCTION chef.objects_missing_acl_default_aclitem(text, text, character, aclitem) OWNER TO postgres;

--
-- Name: schema_missing_aclitem(text, aclitem); Type: FUNCTION; Schema: chef; Owner: postgres
--

CREATE FUNCTION schema_missing_aclitem(text, aclitem) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$
            declare ret boolean;
            declare schema text := $1 ;
            declare acl aclitem := $2 ;
            begin
              select coalesce(
                (select bool_or(
                  not coalesce( aclcontains( n.nspacl, acl), false )
                )
                from pg_namespace n
                where n.nspname = schema
                ), false)
              into ret;
              return ret;
            end
          $_$;


ALTER FUNCTION chef.schema_missing_aclitem(text, aclitem) OWNER TO postgres;

--
-- Name: version(); Type: FUNCTION; Schema: chef; Owner: postgres
--

CREATE FUNCTION version() RETURNS double precision
    LANGUAGE plpgsql
    AS $$
          begin
            return ( select 0.2 );
          end;
          $$;


ALTER FUNCTION chef.version() OWNER TO postgres;

SET search_path = soop_trv, pg_catalog;

--
-- Name: clean_data(integer); Type: FUNCTION; Schema: soop_trv; Owner: soop_trv
--

CREATE FUNCTION clean_data(p_file_id integer) RETURNS void
    LANGUAGE plpgsql
    AS $_$  declare
     v_url text;
     v_trip_id int;
  BEGIN
     select url into v_url from indexed_file where id = $1;
     select distinct trip_id into v_trip_id from deployments where 
file_id = $1;

     IF v_url ~ 'IMOS_SOOP-TRV_B' THEN
           delete from  measurements_cphl  where file_id = $1;
           update measurements_merged_data set "CPHL" = NULL where  measurements_merged_data.trip_id = v_trip_id ;
     update  visualisation_wms set "CPHL_b" = false WHERE visualisation_wms.trip_id = v_trip_id ;

     ELSIF v_url ~ 'IMOS_SOOP-TRV_S' THEN
            delete from  measurements_psal  where file_id = $1;
            update measurements_merged_data set "PSAL" = NULL where measurements_merged_data.trip_id = v_trip_id ;
          update  visualisation_wms set "PSAL_b" = false WHERE visualisation_wms.trip_id = v_trip_id ;

     ELSIF v_url ~ 'IMOS_SOOP-TRV_T' THEN
          delete from  measurements_temp  where file_id = $1;
          update measurements_merged_data set "TEMP" = NULL where measurements_merged_data.trip_id = v_trip_id;
          update  visualisation_wms set "TEMP_b" = false WHERE visualisation_wms.trip_id = v_trip_id ;

     ELSIF v_url ~ 'IMOS_SOOP-TRV_U' THEN
          delete from  measurements_turb  where file_id = $1;
          update measurements_merged_data set "TURB" = NULL where measurements_merged_data.trip_id = v_trip_id ;
          update  visualisation_wms set "TURB_b" = false WHERE visualisation_wms.trip_id = v_trip_id ;

     END IF;
    
     DELETE FROM measurements_merged_data where "TURB" IS NULL AND "TEMP" IS NULL AND "CPHL" IS NULL AND "PSAL" IS NULL and trip_id = v_trip_id ;
     DELETE FROM visualisation_wms where "TURB_b" IS False AND "TEMP_b" IS False AND "CPHL_b" IS False AND "PSAL_b" IS False and trip_id = v_trip_id ;
  
  END;$_$;


ALTER FUNCTION soop_trv.clean_data(p_file_id integer) OWNER TO soop_trv;

SET search_path = aatams_sattag_qc_ctd, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: file_metadata; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE file_metadata (
    id integer NOT NULL,
    file_id integer,
    name text,
    value text,
    type text
);


ALTER TABLE file_metadata OWNER TO aatams_sattag_qc_ctd;

--
-- Name: indexed_file; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO aatams_sattag_qc_ctd;

--
-- Name: profile_general; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE profile_general (
    file_id bigint NOT NULL,
    profile_no integer NOT NULL,
    platform_number character varying(8),
    project_name character varying(64),
    pi_name character varying(64),
    cycle_number integer,
    direction character(1),
    data_centre character varying(2),
    dc_reference character varying(32),
    data_state_indicator character varying(4),
    data_mode character(1),
    inst_reference character varying(64),
    wmo_inst_type character varying(4),
    juld timestamp with time zone,
    juld_qc character(1),
    juld_location timestamp with time zone,
    latitude double precision,
    longitude double precision,
    position_qc character(1),
    positioning_system character varying(8),
    profile_pres_qc character(1),
    profile_temp_qc character(1),
    profile_psal_qc character(1),
    "position" public.geometry(Geometry,4326),
    CONSTRAINT profile_general_position_check CHECK (public.st_isvalid("position"))
);


ALTER TABLE profile_general OWNER TO aatams_sattag_qc_ctd;

--
-- Name: profile_measurements; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE profile_measurements (
    file_id bigint NOT NULL,
    profile_no integer NOT NULL,
    level_no integer NOT NULL,
    pres real,
    pres_qc character(1),
    pres_adjusted real,
    pres_adjusted_qc character(1),
    pres_adjusted_error real,
    temp real,
    temp_qc character(1),
    temp_adjusted real,
    temp_adjusted_qc character(1),
    temp_adjusted_error real,
    psal real,
    psal_qc character(1),
    psal_adjusted real,
    psal_adjusted_qc character(1),
    psal_adjusted_error real
);


ALTER TABLE profile_measurements OWNER TO aatams_sattag_qc_ctd;

--
-- Name: profile_summary; Type: VIEW; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE VIEW profile_summary AS
 WITH m AS (
         SELECT file_metadata.file_id,
            max(
                CASE
                    WHEN (file_metadata.name = 'smru_platform_code'::text) THEN file_metadata.value
                    ELSE NULL::text
                END) AS smru_platform_code,
            max(
                CASE
                    WHEN (file_metadata.name = 'wmo_platform_code'::text) THEN file_metadata.value
                    ELSE NULL::text
                END) AS wmo_platform_code,
            max(
                CASE
                    WHEN (file_metadata.name = 'species'::text) THEN file_metadata.value
                    ELSE NULL::text
                END) AS species_name,
            max(
                CASE
                    WHEN (file_metadata.name = 'location'::text) THEN file_metadata.value
                    ELSE NULL::text
                END) AS release_location
           FROM file_metadata
          WHERE (file_metadata.name = ANY (ARRAY['smru_platform_code'::text, 'wmo_platform_code'::text, 'species'::text, 'location'::text]))
          GROUP BY file_metadata.file_id
        )
 SELECT profile_general.file_id,
    profile_general.profile_no,
    profile_general.platform_number,
    profile_general.project_name,
    profile_general.pi_name,
    profile_general.cycle_number,
    profile_general.direction,
    profile_general.data_centre,
    profile_general.dc_reference,
    profile_general.data_state_indicator,
    profile_general.data_mode,
    profile_general.inst_reference,
    profile_general.wmo_inst_type,
    profile_general.juld,
    profile_general.juld_qc,
    profile_general.juld_location,
    profile_general.latitude,
    profile_general.longitude,
    profile_general.position_qc,
    profile_general.positioning_system,
    profile_general.profile_pres_qc,
    profile_general.profile_temp_qc,
    profile_general.profile_psal_qc,
    profile_general."position",
    m.smru_platform_code,
    m.wmo_platform_code,
    m.species_name,
    m.release_location
   FROM (profile_general
     JOIN m ON ((m.file_id = profile_general.file_id)));


ALTER TABLE profile_summary OWNER TO aatams_sattag_qc_ctd;

--
-- Name: aatams_sattag_qc_ctd_profile_data; Type: VIEW; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE VIEW aatams_sattag_qc_ctd_profile_data AS
 SELECT indexed_file.url,
    indexed_file.size,
    profile_summary.data_centre,
    profile_summary.platform_number,
    profile_summary.cycle_number,
    profile_summary.direction,
    profile_summary.data_state_indicator,
    profile_summary.data_mode,
    profile_summary.juld,
    profile_summary.juld_qc,
    profile_summary.juld_location,
    profile_summary.latitude,
    profile_summary.longitude,
    profile_summary.position_qc,
    profile_summary."position",
    profile_summary.project_name,
    profile_summary.smru_platform_code,
    profile_summary.wmo_platform_code,
    profile_summary.species_name,
    profile_summary.release_location,
    profile_measurements.level_no,
    profile_measurements.pres,
    profile_measurements.pres_qc,
    profile_measurements.pres_adjusted,
    profile_measurements.pres_adjusted_qc,
    profile_measurements.pres_adjusted_error,
    profile_measurements.temp,
    profile_measurements.temp_qc,
    profile_measurements.temp_adjusted,
    profile_measurements.temp_adjusted_qc,
    profile_measurements.temp_adjusted_error,
    profile_measurements.psal,
    profile_measurements.psal_qc,
    profile_measurements.psal_adjusted,
    profile_measurements.psal_adjusted_qc,
    profile_measurements.psal_adjusted_error
   FROM profile_summary,
    profile_measurements,
    indexed_file
  WHERE ((profile_summary.file_id = profile_measurements.file_id) AND (profile_summary.profile_no = profile_measurements.profile_no) AND (indexed_file.id = profile_measurements.file_id));


ALTER TABLE aatams_sattag_qc_ctd_profile_data OWNER TO aatams_sattag_qc_ctd;

--
-- Name: aatams_sattag_qc_ctd_profile_map; Type: VIEW; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE VIEW aatams_sattag_qc_ctd_profile_map AS
 SELECT profile_summary.file_id,
    profile_summary.profile_no,
    profile_summary.platform_number,
    profile_summary.project_name,
    profile_summary.pi_name,
    profile_summary.cycle_number,
    profile_summary.direction,
    profile_summary.data_centre,
    profile_summary.dc_reference,
    profile_summary.data_state_indicator,
    profile_summary.data_mode,
    profile_summary.inst_reference,
    profile_summary.wmo_inst_type,
    profile_summary.juld,
    profile_summary.juld_qc,
    profile_summary.juld_location,
    profile_summary.latitude,
    profile_summary.longitude,
    profile_summary.position_qc,
    profile_summary.positioning_system,
    profile_summary.profile_pres_qc,
    profile_summary.profile_temp_qc,
    profile_summary.profile_psal_qc,
    profile_summary."position",
    profile_summary.smru_platform_code,
    profile_summary.wmo_platform_code,
    profile_summary.species_name,
    profile_summary.release_location,
    indexed_file.id,
    indexed_file.job_id,
    indexed_file.url,
    indexed_file.created,
    indexed_file.modified,
    indexed_file.first_indexed,
    indexed_file.last_indexed,
    indexed_file.last_indexed_run,
    indexed_file.size,
    indexed_file.deleted
   FROM (profile_summary
     LEFT JOIN indexed_file ON ((profile_summary.file_id = indexed_file.id)));


ALTER TABLE aatams_sattag_qc_ctd_profile_map OWNER TO aatams_sattag_qc_ctd;

--
-- Name: best_cycle_location; Type: VIEW; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE VIEW best_cycle_location AS
 SELECT DISTINCT ON (profile.data_centre, profile.platform_number, profile.cycle_number) file.url,
    file.modified,
    profile.file_id,
    profile.profile_no,
    profile.platform_number,
    profile.project_name,
    profile.pi_name,
    profile.cycle_number,
    profile.direction,
    profile.data_centre,
    profile.dc_reference,
    profile.data_state_indicator,
    profile.data_mode,
    profile.inst_reference,
    profile.wmo_inst_type,
    profile.juld,
    profile.juld_qc,
    profile.juld_location,
    profile.latitude,
    profile.longitude,
    profile.position_qc,
    profile.positioning_system,
    profile.profile_pres_qc,
    profile.profile_temp_qc,
    profile.profile_psal_qc,
    profile."position",
    lag(profile.latitude, 1) OVER (PARTITION BY profile.data_centre, profile.platform_number ORDER BY profile.cycle_number) AS last_latitude,
    lag(profile.longitude, 1) OVER (PARTITION BY profile.data_centre, profile.platform_number ORDER BY profile.cycle_number) AS last_longitude
   FROM (profile_general profile
     JOIN indexed_file file ON (((file.id = profile.file_id) AND (NOT file.deleted))))
  WHERE (profile.position_qc = '1'::bpchar)
  ORDER BY profile.data_centre, profile.platform_number, profile.cycle_number,
        CASE
            WHEN (profile.data_mode = 'D'::bpchar) THEN 0
            ELSE 1
        END;


ALTER TABLE best_cycle_location OWNER TO aatams_sattag_qc_ctd;

--
-- Name: data_centre; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE data_centre (
    code character varying(2) NOT NULL,
    name character varying(20)
);


ALTER TABLE data_centre OWNER TO aatams_sattag_qc_ctd;

--
-- Name: databasechangelog; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO aatams_sattag_qc_ctd;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO aatams_sattag_qc_ctd;

--
-- Name: file_harvest; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO aatams_sattag_qc_ctd;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO aatams_sattag_qc_ctd;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: file_metadata_id_seq; Type: SEQUENCE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE SEQUENCE file_metadata_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_metadata_id_seq OWNER TO aatams_sattag_qc_ctd;

--
-- Name: file_metadata_id_seq; Type: SEQUENCE OWNED BY; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER SEQUENCE file_metadata_id_seq OWNED BY file_metadata.id;


--
-- Name: index_job; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO aatams_sattag_qc_ctd;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO aatams_sattag_qc_ctd;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO aatams_sattag_qc_ctd;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: platform_metadata; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE platform_metadata (
    id bigint NOT NULL,
    file_id bigint,
    data_type character varying(16),
    format_version character varying(4),
    handbook_version character varying(4),
    date_creation timestamp with time zone,
    date_update timestamp with time zone,
    platform_number character varying(8),
    inst_reference character varying(64),
    wmo_inst_type character varying(4),
    project_name character varying(64),
    data_centre character varying(2),
    pi_name character varying(64)
);


ALTER TABLE platform_metadata OWNER TO aatams_sattag_qc_ctd;

--
-- Name: platform_metadata_current; Type: VIEW; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE VIEW platform_metadata_current AS
 SELECT file.url,
    file.modified,
    platform_metadata.id,
    platform_metadata.file_id,
    platform_metadata.data_type,
    platform_metadata.format_version,
    platform_metadata.handbook_version,
    platform_metadata.date_creation,
    platform_metadata.date_update,
    platform_metadata.platform_number,
    platform_metadata.inst_reference,
    platform_metadata.wmo_inst_type,
    platform_metadata.project_name,
    platform_metadata.data_centre,
    platform_metadata.pi_name
   FROM (platform_metadata
     JOIN indexed_file file ON (((file.id = platform_metadata.file_id) AND (NOT file.deleted))));


ALTER TABLE platform_metadata_current OWNER TO aatams_sattag_qc_ctd;

--
-- Name: platform_metadata_id_seq; Type: SEQUENCE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE SEQUENCE platform_metadata_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE platform_metadata_id_seq OWNER TO aatams_sattag_qc_ctd;

--
-- Name: platform_metadata_id_seq; Type: SEQUENCE OWNED BY; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER SEQUENCE platform_metadata_id_seq OWNED BY platform_metadata.id;


--
-- Name: profile_general_current; Type: VIEW; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE VIEW profile_general_current AS
 SELECT file.url,
    file.modified,
    profile.file_id,
    profile.profile_no,
    profile.platform_number,
    profile.project_name,
    profile.pi_name,
    profile.cycle_number,
    profile.direction,
    profile.data_centre,
    profile.dc_reference,
    profile.data_state_indicator,
    profile.data_mode,
    profile.inst_reference,
    profile.wmo_inst_type,
    profile.juld,
    profile.juld_qc,
    profile.juld_location,
    profile.latitude,
    profile.longitude,
    profile.position_qc,
    profile.positioning_system,
    profile.profile_pres_qc,
    profile.profile_temp_qc,
    profile.profile_psal_qc
   FROM (profile_general profile
     JOIN indexed_file file ON (((file.id = profile.file_id) AND (NOT file.deleted))));


ALTER TABLE profile_general_current OWNER TO aatams_sattag_qc_ctd;

--
-- Name: profile_metadata; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE profile_metadata (
    file_id bigint NOT NULL,
    data_type text,
    format_version character varying(4),
    handbook_version character varying(4),
    reference_date_time timestamp with time zone,
    date_creation timestamp with time zone,
    date_update timestamp with time zone
);


ALTER TABLE profile_metadata OWNER TO aatams_sattag_qc_ctd;

--
-- Name: profile_param_calibration; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE profile_param_calibration (
    file_id bigint NOT NULL,
    profile_no integer NOT NULL,
    calib_no integer NOT NULL,
    param_no integer NOT NULL,
    parameter text,
    scientific_calib_equation character varying(256),
    scientific_calib_coefficient character varying(256)
);


ALTER TABLE profile_param_calibration OWNER TO aatams_sattag_qc_ctd;

--
-- Name: profile_params; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE profile_params (
    file_id bigint NOT NULL,
    profile_no integer NOT NULL,
    param_no integer NOT NULL,
    station_parameters text
);


ALTER TABLE profile_params OWNER TO aatams_sattag_qc_ctd;

--
-- Name: region; Type: TABLE; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE TABLE region (
    name character varying(30) NOT NULL,
    geom public.geometry(Geometry,4326),
    CONSTRAINT region_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE region OWNER TO aatams_sattag_qc_ctd;

--
-- Name: srdl_float; Type: VIEW; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE VIEW srdl_float AS
 SELECT metadata.file_id,
    getendtoken((metadata.url)::bpchar, '/'::bpchar, 3) AS thredds_folder,
    btrim((metadata.platform_number)::text) AS platform_number,
    format_name((regexp_replace((metadata.pi_name)::text, 'jamstec'::text, ''::text, 'i'::text))::bpchar) AS pi_name,
    metadata.data_centre AS data_centre_code,
    ( SELECT data_centre.name
           FROM data_centre
          WHERE ((data_centre.code)::text = (metadata.data_centre)::text)) AS data_centre,
    last_profile.juld AS last_measure_date,
    last_profile_region.name AS region,
    public.st_xmin((platform_summary.extent)::public.box3d) AS min_long,
    public.st_xmax((platform_summary.extent)::public.box3d) AS max_long,
    last_profile.longitude AS last_long,
    public.st_ymin((platform_summary.extent)::public.box3d) AS min_lat,
    public.st_ymax((platform_summary.extent)::public.box3d) AS max_lat,
    last_profile.latitude AS last_lat,
    timezone('UTC'::text, metadata.modified) AS metadata_mod_date,
    getendtoken((last_profile.url)::bpchar, '/'::bpchar, 1) AS last_profile_dataset,
    timezone('UTC'::text, last_profile.modified) AS last_profile_mod_date,
    lpad(to_hex((trunc((random() * (16777215)::double precision)))::integer), 6, '0'::text) AS colour,
    public.st_setsrid(public.st_makepoint(last_profile.longitude, last_profile.latitude), 4326) AS last_location
   FROM (((platform_metadata_current metadata
     LEFT JOIN ( SELECT btrim((profile_general_current.data_centre)::text) AS data_centre,
            btrim((profile_general_current.platform_number)::text) AS platform_number,
            (split_part(min((((((((99999 - profile_general_current.cycle_number) || ','::text) || (profile_general_current.data_mode)::text) || ','::text) || profile_general_current.file_id) || ','::text) || profile_general_current.profile_no)), ','::text, 3))::integer AS last_profile_id,
            (split_part(min((((((((100000 - profile_general_current.cycle_number) || ','::text) || (profile_general_current.data_mode)::text) || ','::text) || profile_general_current.file_id) || ','::text) || profile_general_current.profile_no)), ','::text, 4))::integer AS last_profile_no,
            public.st_extent(public.st_makepoint(profile_general_current.longitude, profile_general_current.latitude)) AS extent
           FROM profile_general_current
          GROUP BY (btrim((profile_general_current.data_centre)::text)), (btrim((profile_general_current.platform_number)::text))) platform_summary ON (((btrim(platform_summary.data_centre) = btrim((metadata.data_centre)::text)) AND (btrim(platform_summary.platform_number) = btrim((metadata.platform_number)::text)))))
     LEFT JOIN profile_general_current last_profile ON (((last_profile.file_id = platform_summary.last_profile_id) AND (last_profile.profile_no = platform_summary.last_profile_no))))
     LEFT JOIN region last_profile_region ON (public.st_contains(last_profile_region.geom, public.st_setsrid(public.st_makepoint(last_profile.longitude, last_profile.latitude), 4326))));


ALTER TABLE srdl_float OWNER TO aatams_sattag_qc_ctd;

--
-- Name: srdl_float_aodn; Type: VIEW; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE VIEW srdl_float_aodn AS
 SELECT srdl_float.file_id AS id,
    srdl_float.thredds_folder,
    srdl_float.platform_number,
    srdl_float.pi_name,
    srdl_float.data_centre_code,
    srdl_float.data_centre,
    srdl_float.last_measure_date,
    srdl_float.region,
    srdl_float.min_long,
    srdl_float.max_long,
    srdl_float.last_long,
    srdl_float.min_lat,
    srdl_float.max_lat,
    srdl_float.last_lat,
    srdl_float.metadata_mod_date,
    NULL::unknown AS trajectory_mod_date,
    srdl_float.last_profile_dataset,
    srdl_float.last_profile_mod_date,
    srdl_float.colour,
    srdl_float.last_location
   FROM srdl_float;


ALTER TABLE srdl_float_aodn OWNER TO aatams_sattag_qc_ctd;

SET search_path = abos, pg_catalog;

--
-- Name: index_job; Type: TABLE; Schema: abos; Owner: postgres
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO postgres;

--
-- Name: indexed_file; Type: TABLE; Schema: abos; Owner: postgres
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer
);


ALTER TABLE indexed_file OWNER TO postgres;

--
-- Name: abos_file_vw; Type: VIEW; Schema: abos; Owner: postgres
--

CREATE VIEW abos_file_vw AS
 SELECT f.url,
    getglobalattribute((f.id)::bigint, 'toolbox_version'::bpchar) AS toolbox_version,
    getglobalattribute((f.id)::bigint, 'file_version'::bpchar) AS file_version,
    getglobalattributeastimestamp((f.id)::bigint, 'date_created'::bpchar) AS date_created,
    getglobalattribute((f.id)::bigint, 'institution'::bpchar) AS institution,
    getglobalattribute((f.id)::bigint, 'site_code'::bpchar) AS site_code,
    getglobalattribute((f.id)::bigint, 'platform_code'::bpchar) AS platform_code,
    getglobalattribute((f.id)::bigint, 'deployment_code'::bpchar) AS deployment_code,
    getglobalattribute((f.id)::bigint, 'deployment_number'::bpchar) AS deployment_number,
    getglobalattribute((f.id)::bigint, 'source'::bpchar) AS source,
    getglobalattribute((f.id)::bigint, 'instrument'::bpchar) AS instrument,
    getglobalattribute((f.id)::bigint, 'instrument_serial_number'::bpchar) AS instrument_serial_number,
    (getglobalattribute((f.id)::bigint, 'instrument_nominal_depth'::bpchar))::double precision AS instrument_nominal_depth,
    (getglobalattribute((f.id)::bigint, 'geospatial_vertical_min'::bpchar))::double precision AS geospatial_vertical_min,
    (getglobalattribute((f.id)::bigint, 'geospatial_vertical_max'::bpchar))::double precision AS geospatial_vertical_max,
    getglobalattributeastimestamp((f.id)::bigint, 'time_coverage_start'::bpchar) AS time_coverage_start,
    getglobalattributeastimestamp((f.id)::bigint, 'time_coverage_end'::bpchar) AS time_coverage_end,
    getglobalattribute((f.id)::bigint, 'author'::bpchar) AS author,
    getglobalattribute((f.id)::bigint, 'principal_investigator'::bpchar) AS principal_investigator,
    f.modified AS last_modified,
    f.first_indexed,
    f.last_indexed,
        CASE
            WHEN (f.last_indexed_run <> j.last_run_no) THEN 'DELETED'::text
            ELSE NULL::text
        END AS status
   FROM indexed_file f,
    index_job j;


ALTER TABLE abos_file_vw OWNER TO postgres;

--
-- Name: databasechangelog; Type: TABLE; Schema: abos; Owner: postgres
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO postgres;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: abos; Owner: postgres
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO postgres;

--
-- Name: file_harvest; Type: TABLE; Schema: abos; Owner: postgres
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone
);


ALTER TABLE file_harvest OWNER TO postgres;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: abos; Owner: postgres
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO postgres;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: abos; Owner: postgres
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: global_attribute; Type: TABLE; Schema: abos; Owner: postgres
--

CREATE TABLE global_attribute (
    id bigint NOT NULL,
    file_id bigint,
    name character varying(128),
    type character varying(50),
    value text
);


ALTER TABLE global_attribute OWNER TO postgres;

--
-- Name: global_attribute_id_seq; Type: SEQUENCE; Schema: abos; Owner: postgres
--

CREATE SEQUENCE global_attribute_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE global_attribute_id_seq OWNER TO postgres;

--
-- Name: global_attribute_id_seq; Type: SEQUENCE OWNED BY; Schema: abos; Owner: postgres
--

ALTER SEQUENCE global_attribute_id_seq OWNED BY global_attribute.id;


--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: abos; Owner: postgres
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO postgres;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: abos; Owner: postgres
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: abos; Owner: postgres
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO postgres;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: abos; Owner: postgres
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


SET search_path = abos_sots, pg_catalog;

--
-- Name: indexed_file; Type: TABLE; Schema: abos_sots; Owner: abos_sots
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO abos_sots;

--
-- Name: timeseries; Type: TABLE; Schema: abos_sots; Owner: abos_sots
--

CREATE TABLE timeseries (
    id bigint NOT NULL,
    file_id bigint NOT NULL,
    site_code text,
    platform_code text NOT NULL,
    deployment_code text,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    geom public.geometry(Geometry,4326),
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    abstract text,
    data_type text,
    CONSTRAINT timeseries_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE timeseries OWNER TO abos_sots;

--
-- Name: abos_sots_map; Type: VIEW; Schema: abos_sots; Owner: abos_sots
--

CREATE VIEW abos_sots_map AS
 SELECT t.id AS timeseries_id,
    t.site_code,
    t.platform_code,
    t.deployment_code,
    t."LATITUDE",
    t."LONGITUDE",
    t.data_type,
    timezone('UTC'::text, t.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, t.time_coverage_end) AS time_coverage_end,
    f.url AS file_url,
    f.size,
    t.geom
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)));


ALTER TABLE abos_sots_map OWNER TO abos_sots;

--
-- Name: databasechangelog; Type: TABLE; Schema: abos_sots; Owner: abos_sots
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO abos_sots;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: abos_sots; Owner: abos_sots
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO abos_sots;

--
-- Name: file_harvest; Type: TABLE; Schema: abos_sots; Owner: abos_sots
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO abos_sots;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: abos_sots; Owner: abos_sots
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO abos_sots;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: abos_sots; Owner: abos_sots
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: abos_sots; Owner: abos_sots
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO abos_sots;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: abos_sots; Owner: abos_sots
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO abos_sots;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: abos_sots; Owner: abos_sots
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: abos_sots; Owner: abos_sots
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO abos_sots;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: abos_sots; Owner: abos_sots
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: timeseries_id_seq; Type: SEQUENCE; Schema: abos_sots; Owner: abos_sots
--

CREATE SEQUENCE timeseries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE timeseries_id_seq OWNER TO abos_sots;

--
-- Name: timeseries_id_seq; Type: SEQUENCE OWNED BY; Schema: abos_sots; Owner: abos_sots
--

ALTER SEQUENCE timeseries_id_seq OWNED BY timeseries.id;


SET search_path = anfog_dm, pg_catalog;

--
-- Name: anfog_dm_trajectory_wms; Type: TABLE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE TABLE anfog_dm_trajectory_wms (
    file_id integer NOT NULL,
    "PRES_b" boolean,
    "DEPTH_b" boolean,
    "PROFILE_b" boolean,
    "PHASE_b" boolean,
    "TEMP_b" boolean,
    "PSAL_b" boolean,
    "DOX1_b" boolean,
    "DOX2_b" boolean,
    "CPHL_b" boolean,
    "CDOM_b" boolean,
    "CNDC_b" boolean,
    "VBSC_b" boolean,
    "NTRA_b" boolean,
    "UCUR_b" boolean,
    "VCUR_b" boolean,
    "HEAD_b" boolean,
    "UCUR_GPS_b" boolean,
    "VCUR_GPS_b" boolean,
    "IRRAD443_b" boolean,
    "IRRAD490_b" boolean,
    "IRRAD555_b" boolean,
    "IRRAD670_b" boolean,
    geom public.geometry(Geometry,4326),
    CONSTRAINT anfog_dm_trajectory_wms_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE anfog_dm_trajectory_wms OWNER TO anfog_dm;

--
-- Name: deployments; Type: TABLE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE TABLE deployments (
    deploy_id integer NOT NULL,
    file_id integer NOT NULL,
    title character varying(500),
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    deployment_start_latitude character varying(20),
    deployment_start_longitude character varying(20),
    deployment_start_technician character varying(50),
    deployment_end_latitude character varying(20),
    deployment_end_longitude character varying(20),
    deployment_end_technician character varying(50),
    deployment_end_status character varying(50),
    deployment_pilot character varying(50),
    platform_code character varying(10),
    platform_type character varying(20),
    deployment_code character varying(50),
    cdm_data_type character varying(20),
    geospatial_lon_max character varying(20),
    geospatial_lon_min character varying(20),
    geospatial_lat_min character varying(20),
    geospatial_lat_max character varying(20),
    geospatial_vertical_min character varying(20),
    geospatial_vertical_max character varying(20),
    colour character varying(50)
);


ALTER TABLE deployments OWNER TO anfog_dm;

--
-- Name: measurements; Type: TABLE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE TABLE measurements (
    measurement bigint NOT NULL,
    file_id integer NOT NULL,
    "TIME" timestamp with time zone,
    "TIME_quality_control" character varying(1),
    "LATITUDE" double precision,
    "LATITUDE_quality_control" character varying(1),
    "LONGITUDE" double precision,
    "LONGITUDE_quality_control" character varying(1),
    "PRES" real,
    "PRES_quality_control" character varying(1),
    "DEPTH" real,
    "DEPTH_quality_control" character varying(1),
    "PROFILE" integer,
    "PROFILE_quality_control" character varying(1),
    "PHASE" character varying(1),
    "PHASE_quality_control" character varying(1),
    "TEMP" real,
    "TEMP_quality_control" character varying(1),
    "PSAL" real,
    "PSAL_quality_control" character varying(1),
    "DOX1" real,
    "DOX1_quality_control" character varying(1),
    "DOX2" real,
    "DOX2_quality_control" character varying(1),
    "CPHL" real,
    "CPHL_quality_control" character varying(1),
    "CDOM" real,
    "CDOM_quality_control" character varying(1),
    "CNDC" real,
    "CNDC_quality_control" character varying(1),
    "VBSC" real,
    "VBSC_quality_control" character varying(1),
    "NTRA" real,
    "NTRA_quality_control" character varying(1),
    "UCUR" real,
    "UCUR_quality_control" character varying(1),
    "VCUR" real,
    "VCUR_quality_control" character varying(1),
    "HEAD" real,
    "HEAD_quality_control" character varying(1),
    "UCUR_GPS" real,
    "UCUR_GPS_quality_control" character varying(1),
    "VCUR_GPS" real,
    "VCUR_GPS_quality_control" character varying(1),
    "IRRAD443" real,
    "IRRAD443_quality_control" character varying(1),
    "IRRAD490" real,
    "IRRAD490_quality_control" character varying(1),
    "IRRAD555" real,
    "IRRAD555_quality_control" character varying(1),
    "IRRAD670" real,
    "IRRAD670_quality_control" character varying(1),
    geom public.geometry,
    CONSTRAINT latitude_check CHECK ((("LATITUDE" >= ('-90'::integer)::double precision) AND ("LATITUDE" <= (90)::double precision))),
    CONSTRAINT longitude_check CHECK ((("LONGITUDE" >= ('-180'::integer)::double precision) AND ("LONGITUDE" <= (180)::double precision)))
);


ALTER TABLE measurements OWNER TO anfog_dm;

--
-- Name: anfog_dm_trajectory_data; Type: VIEW; Schema: anfog_dm; Owner: anfog_dm
--

CREATE VIEW anfog_dm_trajectory_data AS
 SELECT d.file_id,
    d.deployment_code AS deployment_name,
    d.platform_type,
    d.platform_code,
    timezone('UTC'::text, d.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, d.time_coverage_end) AS time_coverage_end,
    timezone('UTC'::text, m."TIME") AS "TIME",
    m."TIME_quality_control",
    m."LATITUDE",
    m."LATITUDE_quality_control",
    m."LONGITUDE",
    m."LONGITUDE_quality_control",
    m."PRES",
    m."PRES_quality_control",
    m."DEPTH",
    m."DEPTH_quality_control",
    m."PROFILE",
    m."PROFILE_quality_control",
    m."PHASE",
    m."PHASE_quality_control",
    m."TEMP",
    m."TEMP_quality_control",
    m."PSAL",
    m."PSAL_quality_control",
    m."DOX1",
    m."DOX1_quality_control",
    m."DOX2",
    m."DOX2_quality_control",
    m."CPHL",
    m."CPHL_quality_control",
    m."CDOM",
    m."CDOM_quality_control",
    m."CNDC",
    m."CNDC_quality_control",
    m."VBSC",
    m."VBSC_quality_control",
    m."NTRA",
    m."NTRA_quality_control",
    m."UCUR",
    m."UCUR_quality_control",
    m."VCUR",
    m."VCUR_quality_control",
    m."HEAD",
    m."HEAD_quality_control",
    m."UCUR_GPS",
    m."UCUR_GPS_quality_control",
    m."VCUR_GPS",
    m."VCUR_GPS_quality_control",
    m."IRRAD443",
    m."IRRAD443_quality_control",
    m."IRRAD490",
    m."IRRAD490_quality_control",
    m."IRRAD555",
    m."IRRAD555_quality_control",
    m."IRRAD670",
    m."IRRAD670_quality_control",
    a.geom
   FROM ((deployments d
     LEFT JOIN anfog_dm_trajectory_wms a ON ((d.file_id = a.file_id)))
     LEFT JOIN measurements m ON ((d.file_id = m.file_id)));


ALTER TABLE anfog_dm_trajectory_data OWNER TO anfog_dm;

--
-- Name: indexed_file; Type: TABLE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO anfog_dm;

--
-- Name: anfog_dm_trajectory_map; Type: VIEW; Schema: anfog_dm; Owner: anfog_dm
--

CREATE VIEW anfog_dm_trajectory_map AS
 SELECT a.file_id,
    f.url,
    f.size,
    d.deployment_code AS deployment_name,
    d.platform_type,
    d.platform_code,
    timezone('UTC'::text, d.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, d.time_coverage_end) AS time_coverage_end,
    d.colour,
    a."PRES_b",
    a."DEPTH_b",
    a."PROFILE_b",
    a."PHASE_b",
    a."TEMP_b",
    a."PSAL_b",
    a."DOX1_b",
    a."DOX2_b",
    a."CPHL_b",
    a."CDOM_b",
    a."CNDC_b",
    a."VBSC_b",
    a."NTRA_b",
    a."UCUR_b",
    a."VCUR_b",
    a."HEAD_b",
    a."UCUR_GPS_b",
    a."VCUR_GPS_b",
    a."IRRAD443_b",
    a."IRRAD490_b",
    a."IRRAD555_b",
    a."IRRAD670_b",
    a.geom
   FROM ((anfog_dm_trajectory_wms a
     JOIN indexed_file f ON ((a.file_id = f.id)))
     JOIN deployments d ON ((a.file_id = d.file_id)));


ALTER TABLE anfog_dm_trajectory_map OWNER TO anfog_dm;

--
-- Name: attribute; Type: TABLE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO anfog_dm;

--
-- Name: databasechangelog; Type: TABLE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO anfog_dm;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO anfog_dm;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE SEQUENCE deployments_deploy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deployments_deploy_id_seq OWNER TO anfog_dm;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE OWNED BY; Schema: anfog_dm; Owner: anfog_dm
--

ALTER SEQUENCE deployments_deploy_id_seq OWNED BY deployments.deploy_id;


--
-- Name: file; Type: TABLE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO anfog_dm;

--
-- Name: file_harvest; Type: TABLE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO anfog_dm;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO anfog_dm;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: anfog_dm; Owner: anfog_dm
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO anfog_dm;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO anfog_dm;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: anfog_dm; Owner: anfog_dm
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO anfog_dm;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: anfog_dm; Owner: anfog_dm
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements_measurement_seq; Type: SEQUENCE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE SEQUENCE measurements_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_seq OWNER TO anfog_dm;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE OWNED BY; Schema: anfog_dm; Owner: anfog_dm
--

ALTER SEQUENCE measurements_measurement_seq OWNED BY measurements.measurement;


--
-- Name: platform_metadata; Type: TABLE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE TABLE platform_metadata (
    file_id integer NOT NULL,
    trans_system_id character varying(50),
    positioning_system character varying(50),
    platform_type character varying(50),
    platform_maker character varying(100),
    firmware_version_navigation character varying(10),
    firmware_version_science character varying(10),
    glider_serial_no character varying(10),
    battery_type character varying(50),
    glider_owner character varying(100),
    operating_institution character varying(100)
);


ALTER TABLE platform_metadata OWNER TO anfog_dm;

--
-- Name: sensors_metadata; Type: TABLE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE TABLE sensors_metadata (
    sensor_id integer NOT NULL,
    file_id integer NOT NULL,
    sensor_type character varying(50),
    sensor_maker character varying(100),
    sensor_model character varying(50),
    sensor_serial_no character varying(50),
    sensor_calibration_date character varying(10),
    sensor_parameters character varying(100)
);


ALTER TABLE sensors_metadata OWNER TO anfog_dm;

--
-- Name: sensors_metadata_sensor_id_seq; Type: SEQUENCE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE SEQUENCE sensors_metadata_sensor_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE sensors_metadata_sensor_id_seq OWNER TO anfog_dm;

--
-- Name: sensors_metadata_sensor_id_seq; Type: SEQUENCE OWNED BY; Schema: anfog_dm; Owner: anfog_dm
--

ALTER SEQUENCE sensors_metadata_sensor_id_seq OWNED BY sensors_metadata.sensor_id;


--
-- Name: variable; Type: TABLE; Schema: anfog_dm; Owner: anfog_dm
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO anfog_dm;

SET search_path = anmn_acidification_nrt, pg_catalog;

--
-- Name: measurement; Type: TABLE; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

CREATE TABLE measurement (
    file_id bigint NOT NULL,
    index bigint NOT NULL,
    "TIME" timestamp with time zone NOT NULL,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "XCO2_WATER" real,
    "XCO2_WATER_standard_deviation" real,
    "XCO2_AIR" real,
    "XCO2_AIR_standard_deviation" real,
    "SSTI" real,
    "SSS" real
);


ALTER TABLE measurement OWNER TO anmn_acidification_nrt;

--
-- Name: COLUMN measurement.index; Type: COMMENT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

COMMENT ON COLUMN measurement.index IS 'index of measurement in netCDF file';


--
-- Name: timeseries; Type: TABLE; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

CREATE TABLE timeseries (
    file_id bigint NOT NULL,
    site_code text NOT NULL,
    platform_code text NOT NULL,
    deployment_code text NOT NULL,
    mean_latitude double precision,
    mean_longitude double precision,
    geom public.geometry(Geometry,4326),
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    date_created timestamp with time zone,
    sea_surface_temperature_b boolean,
    sea_surface_salinity_b boolean,
    CONSTRAINT timeseries_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE timeseries OWNER TO anmn_acidification_nrt;

--
-- Name: anmn_am_nrt_data; Type: VIEW; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

CREATE VIEW anmn_am_nrt_data AS
 SELECT t.site_code,
    t.deployment_code,
    m.file_id,
    m.index,
    timezone('UTC'::text, m."TIME") AS "TIME",
    m."LATITUDE",
    m."LONGITUDE",
    m."XCO2_WATER",
    m."XCO2_WATER_standard_deviation",
    m."XCO2_AIR",
    m."XCO2_AIR_standard_deviation",
    m."SSTI",
    m."SSS",
    t.sea_surface_temperature_b,
    t.sea_surface_salinity_b,
    t.geom
   FROM (timeseries t
     JOIN measurement m USING (file_id))
  ORDER BY m.file_id, m.index;


ALTER TABLE anmn_am_nrt_data OWNER TO anmn_acidification_nrt;

--
-- Name: indexed_file; Type: TABLE; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO anmn_acidification_nrt;

--
-- Name: anmn_am_nrt_map; Type: VIEW; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

CREATE VIEW anmn_am_nrt_map AS
 SELECT t.file_id,
    t.site_code,
    t.platform_code,
    t.deployment_code,
    t.mean_latitude,
    t.mean_longitude,
    t.geom,
    timezone('UTC'::text, t.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, t.time_coverage_end) AS time_coverage_end,
    t.date_created,
    t.sea_surface_temperature_b,
    t.sea_surface_salinity_b,
    f.url,
    f.size
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  ORDER BY t.deployment_code;


ALTER TABLE anmn_am_nrt_map OWNER TO anmn_acidification_nrt;

--
-- Name: databasechangelog; Type: TABLE; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO anmn_acidification_nrt;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO anmn_acidification_nrt;

--
-- Name: file_harvest; Type: TABLE; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO anmn_acidification_nrt;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO anmn_acidification_nrt;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO anmn_acidification_nrt;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO anmn_acidification_nrt;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO anmn_acidification_nrt;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


SET search_path = anmn_am_dm, pg_catalog;

--
-- Name: measurements; Type: TABLE; Schema: anmn_am_dm; Owner: anmn_am_dm
--

CREATE TABLE measurements (
    file_id bigint NOT NULL,
    measurement_id bigint NOT NULL,
    "TIME" timestamp with time zone NOT NULL,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "TEMP" real,
    "PSAL" real,
    "Press_ATM" real,
    "xCO2EQ_PPM" real,
    "xCO2ATM_PPM" real,
    "fCO2SW_UATM" real,
    "DfCO2" real,
    "DOX1" real,
    "SUBFLAG" real,
    "TIME_quality_control" character(1),
    "TEMP_quality_control" character(1),
    "PSAL_quality_control" character(1),
    "Press_ATM_quality_control" character(1),
    "xCO2EQ_PPM_quality_control" character(1),
    "xCO2ATM_PPM_quality_control" character(1),
    "fCO2SW_UATM_quality_control" character(1),
    "DfCO2_quality_control" character(1),
    "DOX1_quality_control" character(1)
);


ALTER TABLE measurements OWNER TO anmn_am_dm;

--
-- Name: timeseries; Type: TABLE; Schema: anmn_am_dm; Owner: anmn_am_dm
--

CREATE TABLE timeseries (
    file_id bigint NOT NULL,
    site_code text NOT NULL,
    platform_code text NOT NULL,
    deployment_code text NOT NULL,
    latitude double precision,
    longitude double precision,
    geom public.geometry(Geometry,4326),
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    "TEMP_b" boolean,
    "PSAL_b" boolean,
    "Press_ATM_b" boolean,
    "xCO2EQ_PPM_b" boolean,
    "xCO2ATM_PPM_b" boolean,
    "fCO2SW_UATM_b" boolean,
    "DfCO2_b" boolean,
    "DOX1_b" boolean,
    CONSTRAINT timeseries_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE timeseries OWNER TO anmn_am_dm;

--
-- Name: anmn_am_dm_data; Type: VIEW; Schema: anmn_am_dm; Owner: anmn_am_dm
--

CREATE VIEW anmn_am_dm_data AS
 SELECT t.site_code,
    t.deployment_code,
    m.file_id,
    m.measurement_id,
    timezone('UTC'::text, m."TIME") AS "TIME",
    m."LATITUDE",
    m."LONGITUDE",
    m."TEMP",
    m."PSAL",
    m."Press_ATM",
    m."xCO2EQ_PPM",
    m."xCO2ATM_PPM",
    m."fCO2SW_UATM",
    m."DfCO2",
    m."DOX1",
    m."SUBFLAG",
    m."TIME_quality_control",
    m."TEMP_quality_control",
    m."PSAL_quality_control",
    m."Press_ATM_quality_control",
    m."xCO2EQ_PPM_quality_control",
    m."xCO2ATM_PPM_quality_control",
    m."fCO2SW_UATM_quality_control",
    m."DfCO2_quality_control",
    m."DOX1_quality_control",
    t.geom
   FROM (measurements m
     JOIN timeseries t ON ((m.file_id = t.file_id)))
  ORDER BY ROW(m.file_id, m."TIME");


ALTER TABLE anmn_am_dm_data OWNER TO anmn_am_dm;

--
-- Name: indexed_file; Type: TABLE; Schema: anmn_am_dm; Owner: anmn_am_dm
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO anmn_am_dm;

--
-- Name: anmn_am_dm_map; Type: VIEW; Schema: anmn_am_dm; Owner: anmn_am_dm
--

CREATE VIEW anmn_am_dm_map AS
 SELECT t.file_id,
    t.site_code,
    t.platform_code,
    t.deployment_code,
    t.latitude,
    t.longitude,
    t.geom,
    timezone('UTC'::text, t.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, t.time_coverage_end) AS time_coverage_end,
    t."TEMP_b",
    t."PSAL_b",
    t."Press_ATM_b",
    t."xCO2EQ_PPM_b",
    t."xCO2ATM_PPM_b",
    t."fCO2SW_UATM_b",
    t."DfCO2_b",
    t."DOX1_b",
    f.url,
    f.size
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  ORDER BY t.deployment_code;


ALTER TABLE anmn_am_dm_map OWNER TO anmn_am_dm;

--
-- Name: databasechangelog; Type: TABLE; Schema: anmn_am_dm; Owner: anmn_am_dm
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO anmn_am_dm;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: anmn_am_dm; Owner: anmn_am_dm
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO anmn_am_dm;

--
-- Name: file_harvest; Type: TABLE; Schema: anmn_am_dm; Owner: anmn_am_dm
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO anmn_am_dm;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: anmn_am_dm; Owner: anmn_am_dm
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO anmn_am_dm;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: anmn_am_dm; Owner: anmn_am_dm
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO anmn_am_dm;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: anmn_am_dm; Owner: anmn_am_dm
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO anmn_am_dm;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: anmn_am_dm; Owner: anmn_am_dm
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO anmn_am_dm;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


SET search_path = anmn_burst_avg, pg_catalog;

--
-- Name: measurement; Type: TABLE; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE TABLE measurement (
    ts_id bigint NOT NULL,
    index bigint NOT NULL,
    "TIME" timestamp with time zone NOT NULL,
    "DEPTH" real,
    "DEPTH_burst_sd" real,
    "DEPTH_burst_min" real,
    "DEPTH_burst_max" real,
    "DEPTH_num_obs" integer,
    "TEMP" real,
    "TEMP_burst_sd" real,
    "TEMP_burst_min" real,
    "TEMP_burst_max" real,
    "TEMP_num_obs" integer,
    "PRES_REL" real,
    "PRES_REL_burst_sd" real,
    "PRES_REL_burst_min" real,
    "PRES_REL_burst_max" real,
    "PRES_REL_num_obs" integer,
    "PSAL" real,
    "PSAL_burst_sd" real,
    "PSAL_burst_min" real,
    "PSAL_burst_max" real,
    "PSAL_num_obs" integer,
    "DOX1_1" real,
    "DOX1_1_burst_sd" real,
    "DOX1_1_burst_min" real,
    "DOX1_1_burst_max" real,
    "DOX1_1_num_obs" integer,
    "DOX1_2" real,
    "DOX1_2_burst_sd" real,
    "DOX1_2_burst_min" real,
    "DOX1_2_burst_max" real,
    "DOX1_2_num_obs" integer,
    "DOX1_3" real,
    "DOX1_3_burst_sd" real,
    "DOX1_3_burst_min" real,
    "DOX1_3_burst_max" real,
    "DOX1_3_num_obs" integer,
    "DOX2" real,
    "DOX2_burst_sd" real,
    "DOX2_burst_min" real,
    "DOX2_burst_max" real,
    "DOX2_num_obs" integer,
    "TURB" real,
    "TURB_burst_sd" real,
    "TURB_burst_min" real,
    "TURB_burst_max" real,
    "TURB_num_obs" integer,
    "CPHL" real,
    "CPHL_burst_sd" real,
    "CPHL_burst_min" real,
    "CPHL_burst_max" real,
    "CPHL_num_obs" integer,
    "CHLU" real,
    "CHLU_burst_sd" real,
    "CHLU_burst_min" real,
    "CHLU_burst_max" real,
    "CHLU_num_obs" integer,
    "CHLF" real,
    "CHLF_burst_sd" real,
    "CHLF_burst_min" real,
    "CHLF_burst_max" real,
    "CHLF_num_obs" integer
);


ALTER TABLE measurement OWNER TO anmn_burst_avg;

--
-- Name: timeseries; Type: TABLE; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE TABLE timeseries (
    id bigint NOT NULL,
    file_id bigint NOT NULL,
    site_code text NOT NULL,
    platform_code text NOT NULL,
    deployment_code text NOT NULL,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    geom public.geometry(Geometry,4326),
    instrument_nominal_depth real,
    site_nominal_depth real,
    site_depth_at_deployment real,
    instrument text,
    instrument_serial_number text,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    time_deployment_start timestamp with time zone,
    time_deployment_end timestamp with time zone,
    comment text,
    history text,
    toolbox_version text,
    depth_b boolean,
    sea_water_temperature_b boolean,
    sea_water_pressure_due_to_sea_water_b boolean,
    sea_water_salinity_b boolean,
    mole_concentration_of_dissolved_molecular_oxygen_in_sea_water_b boolean,
    moles_of_oxygen_per_unit_mass_in_sea_water_b boolean,
    turbidity_b boolean,
    mass_concentration_of_chlorophyll_in_sea_water_b boolean,
    CONSTRAINT timeseries_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE timeseries OWNER TO anmn_burst_avg;

--
-- Name: COLUMN timeseries."LATITUDE"; Type: COMMENT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

COMMENT ON COLUMN timeseries."LATITUDE" IS 'actual latitude of deployment';


--
-- Name: COLUMN timeseries."LONGITUDE"; Type: COMMENT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

COMMENT ON COLUMN timeseries."LONGITUDE" IS 'actual longitude of deployment';


--
-- Name: anmn_burst_avg_timeseries_data; Type: VIEW; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE VIEW anmn_burst_avg_timeseries_data AS
 SELECT m.ts_id AS timeseries_id,
    m.index,
    t.site_code,
    t.platform_code,
    t.deployment_code,
    t.instrument_nominal_depth,
    timezone('UTC'::text, m."TIME") AS "TIME",
    t."LATITUDE",
    t."LONGITUDE",
    m."DEPTH",
    m."DEPTH_burst_sd",
    m."DEPTH_burst_min",
    m."DEPTH_burst_max",
    m."DEPTH_num_obs",
    m."TEMP",
    m."TEMP_burst_sd",
    m."TEMP_burst_min",
    m."TEMP_burst_max",
    m."TEMP_num_obs",
    m."PRES_REL",
    m."PRES_REL_burst_sd",
    m."PRES_REL_burst_min",
    m."PRES_REL_burst_max",
    m."PRES_REL_num_obs",
    m."PSAL",
    m."PSAL_burst_sd",
    m."PSAL_burst_min",
    m."PSAL_burst_max",
    m."PSAL_num_obs",
    m."DOX1_1",
    m."DOX1_1_burst_sd",
    m."DOX1_1_burst_min",
    m."DOX1_1_burst_max",
    m."DOX1_1_num_obs",
    m."DOX1_2",
    m."DOX1_2_burst_sd",
    m."DOX1_2_burst_min",
    m."DOX1_2_burst_max",
    m."DOX1_2_num_obs",
    m."DOX1_3",
    m."DOX1_3_burst_sd",
    m."DOX1_3_burst_min",
    m."DOX1_3_burst_max",
    m."DOX1_3_num_obs",
    m."DOX2",
    m."DOX2_burst_sd",
    m."DOX2_burst_min",
    m."DOX2_burst_max",
    m."DOX2_num_obs",
    m."TURB",
    m."TURB_burst_sd",
    m."TURB_burst_min",
    m."TURB_burst_max",
    m."TURB_num_obs",
    m."CPHL",
    m."CPHL_burst_sd",
    m."CPHL_burst_min",
    m."CPHL_burst_max",
    m."CPHL_num_obs",
    m."CHLU",
    m."CHLU_burst_sd",
    m."CHLU_burst_min",
    m."CHLU_burst_max",
    m."CHLU_num_obs",
    m."CHLF",
    m."CHLF_burst_sd",
    m."CHLF_burst_min",
    m."CHLF_burst_max",
    m."CHLF_num_obs",
    t.geom,
    t.depth_b,
    t.sea_water_temperature_b,
    t.sea_water_pressure_due_to_sea_water_b,
    t.sea_water_salinity_b,
    t.mole_concentration_of_dissolved_molecular_oxygen_in_sea_water_b,
    t.moles_of_oxygen_per_unit_mass_in_sea_water_b,
    t.turbidity_b,
    t.mass_concentration_of_chlorophyll_in_sea_water_b
   FROM (measurement m
     JOIN timeseries t ON ((t.id = m.ts_id)));


ALTER TABLE anmn_burst_avg_timeseries_data OWNER TO anmn_burst_avg;

--
-- Name: indexed_file; Type: TABLE; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO anmn_burst_avg;

--
-- Name: anmn_burst_avg_timeseries_map; Type: VIEW; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE VIEW anmn_burst_avg_timeseries_map AS
 SELECT t.id AS t_id,
    f.url AS file_url,
    f.size,
    t.site_code,
    t.platform_code,
    t.deployment_code,
    t."LATITUDE",
    t."LONGITUDE",
    t.geom,
    t.instrument_nominal_depth,
    t.instrument,
    t.instrument_serial_number,
    timezone('UTC'::text, t.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, t.time_coverage_end) AS time_coverage_end,
    timezone('UTC'::text, t.time_deployment_start) AS time_deployment_start,
    timezone('UTC'::text, t.time_deployment_end) AS time_deployment_end,
    t.depth_b,
    t.sea_water_temperature_b,
    t.sea_water_pressure_due_to_sea_water_b,
    t.sea_water_salinity_b,
    t.mole_concentration_of_dissolved_molecular_oxygen_in_sea_water_b,
    t.moles_of_oxygen_per_unit_mass_in_sea_water_b,
    t.turbidity_b,
    t.mass_concentration_of_chlorophyll_in_sea_water_b
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)));


ALTER TABLE anmn_burst_avg_timeseries_map OWNER TO anmn_burst_avg;

--
-- Name: databasechangelog; Type: TABLE; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO anmn_burst_avg;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO anmn_burst_avg;

--
-- Name: file_harvest; Type: TABLE; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO anmn_burst_avg;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO anmn_burst_avg;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO anmn_burst_avg;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO anmn_burst_avg;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO anmn_burst_avg;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: timeseries_id_seq; Type: SEQUENCE; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE SEQUENCE timeseries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE timeseries_id_seq OWNER TO anmn_burst_avg;

--
-- Name: timeseries_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER SEQUENCE timeseries_id_seq OWNED BY timeseries.id;


SET search_path = anmn_metadata, pg_catalog;

--
-- Name: file_metadata; Type: TABLE; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE TABLE file_metadata (
    id bigint NOT NULL,
    file_id bigint NOT NULL,
    feature_type text,
    file_version text,
    toolbox_version text,
    compliance_checker_version text,
    compliance_checks_passed text,
    site_code text,
    platform_code text,
    deployment_code text,
    instrument text,
    instrument_serial_number text,
    instrument_nominal_depth text,
    geospatial_vertical_min double precision,
    geospatial_vertical_max double precision,
    date_created timestamp with time zone,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    time_deployment_start timestamp with time zone,
    time_deployment_end timestamp with time zone,
    latitude double precision,
    longitude double precision,
    geom public.geometry(Geometry,4326),
    data_category text,
    variables text,
    standard_names text,
    realtime boolean,
    deleted boolean,
    toolbox_input_file text,
    deployment_number text,
    compliance_checker_imos_version text,
    CONSTRAINT file_metadata_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE file_metadata OWNER TO anmn_metadata;

--
-- Name: indexed_file; Type: TABLE; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO anmn_metadata;

--
-- Name: moorings_all_map; Type: VIEW; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE VIEW moorings_all_map AS
 SELECT m.file_id,
    i.url,
    m.date_created,
    i.first_indexed AS date_published,
    i.last_indexed AS date_updated,
    i.size,
    m.feature_type,
    m.file_version,
    m.toolbox_version,
    m.toolbox_input_file,
    m.compliance_checker_version,
    m.compliance_checker_imos_version,
    m.compliance_checks_passed,
    m.realtime,
    m.site_code,
    m.platform_code,
    m.deployment_code,
    m.data_category,
    m.instrument,
    m.instrument_serial_number,
    m.instrument_nominal_depth,
    m.time_deployment_start,
    m.time_deployment_end,
    m.time_coverage_start,
    m.time_coverage_end,
    m.latitude,
    m.longitude,
    (m.standard_names ~ 'sea_[a-z_]*_temperature'::text) AS water_temperature_b,
    (m.standard_names ~ 'air_temperature'::text) AS air_temperature_b,
    (m.standard_names ~ 'sea_[a-z_]*_salinity'::text) AS salinity_b,
    (m.standard_names ~ 'sea_[a-z_]*_pressure'::text) AS water_pressure_b,
    (m.standard_names ~ 'air_pressure'::text) AS air_pressure_b,
    (m.standard_names ~ 'sea_water_velocity'::text) AS sea_water_velocity_b,
    (m.standard_names ~ 'oxygen'::text) AS oxygen_b,
    (m.standard_names ~ 'chlorophyll'::text) AS chlorophyll_b,
    (m.standard_names ~ 'fluorescence'::text) AS fluorescence_b,
    (m.standard_names ~ 'sea_surface_wave'::text) AS wave_parameters_b,
    m.geom
   FROM (indexed_file i
     JOIN file_metadata m ON ((m.file_id = i.id)))
  WHERE (NOT m.deleted);


ALTER TABLE moorings_all_map OWNER TO anmn_metadata;

--
-- Name: abos_all_map; Type: VIEW; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE VIEW abos_all_map AS
 SELECT moorings_all_map.file_id,
    moorings_all_map.url,
    moorings_all_map.date_created,
    moorings_all_map.date_published,
    moorings_all_map.date_updated,
    moorings_all_map.size,
    moorings_all_map.feature_type,
    moorings_all_map.file_version,
    moorings_all_map.toolbox_version,
    moorings_all_map.toolbox_input_file,
    moorings_all_map.compliance_checker_version,
    moorings_all_map.compliance_checker_imos_version,
    moorings_all_map.compliance_checks_passed,
    moorings_all_map.realtime,
    moorings_all_map.site_code,
    moorings_all_map.platform_code,
    moorings_all_map.deployment_code,
    moorings_all_map.data_category,
    moorings_all_map.instrument,
    moorings_all_map.instrument_serial_number,
    moorings_all_map.instrument_nominal_depth,
    moorings_all_map.time_deployment_start,
    moorings_all_map.time_deployment_end,
    moorings_all_map.time_coverage_start,
    moorings_all_map.time_coverage_end,
    moorings_all_map.latitude,
    moorings_all_map.longitude,
    moorings_all_map.water_temperature_b,
    moorings_all_map.air_temperature_b,
    moorings_all_map.salinity_b,
    moorings_all_map.water_pressure_b,
    moorings_all_map.air_pressure_b,
    moorings_all_map.sea_water_velocity_b,
    moorings_all_map.oxygen_b,
    moorings_all_map.chlorophyll_b,
    moorings_all_map.fluorescence_b,
    moorings_all_map.wave_parameters_b,
    moorings_all_map.geom
   FROM moorings_all_map
  WHERE ((moorings_all_map.url)::text ~ 'ABOS'::text);


ALTER TABLE abos_all_map OWNER TO anmn_metadata;

--
-- Name: anmn_all_map; Type: VIEW; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE VIEW anmn_all_map AS
 SELECT moorings_all_map.file_id,
    moorings_all_map.url,
    moorings_all_map.date_created,
    moorings_all_map.date_published,
    moorings_all_map.date_updated,
    moorings_all_map.size,
    moorings_all_map.feature_type,
    moorings_all_map.file_version,
    moorings_all_map.toolbox_version,
    moorings_all_map.toolbox_input_file,
    moorings_all_map.compliance_checker_version,
    moorings_all_map.compliance_checker_imos_version,
    moorings_all_map.compliance_checks_passed,
    moorings_all_map.realtime,
    moorings_all_map.site_code,
    moorings_all_map.platform_code,
    moorings_all_map.deployment_code,
    moorings_all_map.data_category,
    moorings_all_map.instrument,
    moorings_all_map.instrument_serial_number,
    moorings_all_map.instrument_nominal_depth,
    moorings_all_map.time_deployment_start,
    moorings_all_map.time_deployment_end,
    moorings_all_map.time_coverage_start,
    moorings_all_map.time_coverage_end,
    moorings_all_map.latitude,
    moorings_all_map.longitude,
    moorings_all_map.water_temperature_b,
    moorings_all_map.air_temperature_b,
    moorings_all_map.salinity_b,
    moorings_all_map.water_pressure_b,
    moorings_all_map.air_pressure_b,
    moorings_all_map.sea_water_velocity_b,
    moorings_all_map.oxygen_b,
    moorings_all_map.chlorophyll_b,
    moorings_all_map.fluorescence_b,
    moorings_all_map.wave_parameters_b,
    moorings_all_map.geom
   FROM moorings_all_map
  WHERE ((moorings_all_map.url)::text ~ 'ANMN'::text);


ALTER TABLE anmn_all_map OWNER TO anmn_metadata;

--
-- Name: databasechangelog; Type: TABLE; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO anmn_metadata;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO anmn_metadata;

--
-- Name: file_harvest; Type: TABLE; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO anmn_metadata;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO anmn_metadata;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: file_metadata_id_seq; Type: SEQUENCE; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE SEQUENCE file_metadata_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_metadata_id_seq OWNER TO anmn_metadata;

--
-- Name: file_metadata_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER SEQUENCE file_metadata_id_seq OWNED BY file_metadata.id;


--
-- Name: global_attribute; Type: TABLE; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE TABLE global_attribute (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE global_attribute OWNER TO anmn_metadata;

--
-- Name: index_job; Type: TABLE; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO anmn_metadata;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO anmn_metadata;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO anmn_metadata;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: variable; Type: TABLE; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO anmn_metadata;

--
-- Name: variable_attribute; Type: TABLE; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE TABLE variable_attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE variable_attribute OWNER TO anmn_metadata;

SET search_path = anmn_mhlwave, pg_catalog;

--
-- Name: databasechangelog; Type: TABLE; Schema: anmn_mhlwave; Owner: anmn_mhlwave
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO anmn_mhlwave;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: anmn_mhlwave; Owner: anmn_mhlwave
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO anmn_mhlwave;

--
-- Name: harvest_mhlwave; Type: TABLE; Schema: anmn_mhlwave; Owner: anmn_mhlwave
--

CREATE TABLE harvest_mhlwave (
    pkid integer NOT NULL,
    site_code character varying(20),
    platform_code character varying(20),
    site_name character varying(50),
    latitude double precision,
    longitude double precision,
    depth integer,
    metadata character varying(650),
    abstract_ftl text,
    geom public.geometry,
    CONSTRAINT harvest_mhlwave_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE harvest_mhlwave OWNER TO anmn_mhlwave;

--
-- Name: harvest_mhlwave_pkid_seq; Type: SEQUENCE; Schema: anmn_mhlwave; Owner: anmn_mhlwave
--

CREATE SEQUENCE harvest_mhlwave_pkid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE harvest_mhlwave_pkid_seq OWNER TO anmn_mhlwave;

--
-- Name: harvest_mhlwave_pkid_seq; Type: SEQUENCE OWNED BY; Schema: anmn_mhlwave; Owner: anmn_mhlwave
--

ALTER SEQUENCE harvest_mhlwave_pkid_seq OWNED BY harvest_mhlwave.pkid;


SET search_path = anmn_nrs_bgc, pg_catalog;

--
-- Name: anmn_nrs_bgc_chemistry; Type: TABLE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE TABLE anmn_nrs_bgc_chemistry (
    measurement bigint NOT NULL,
    "UTC_TRIP_START_TIME" timestamp with time zone NOT NULL,
    "NRS_TRIP_CODE" text,
    "NRS_SAMPLE_CODE" text,
    "STATION_NAME" text,
    "IMOS_SITE_CODE" text,
    "LOCAL_TRIP_START_TIME" text NOT NULL,
    "SAMPLE_DEPTH_M" double precision,
    "SALINITY" double precision,
    "SALINITY_FLAG" text,
    "SALINITY_COMMENTS" text,
    "SILICATE_UMOL_PER_L" double precision,
    "SILICATE_FLAG" text,
    "NITRATE_UMOL_PER_L" double precision,
    "NITRATE_FLAG" text,
    "PHOSPHATE_UMOL_PER_L" double precision,
    "PHOSPHATE_FLAG" text,
    "AMMONIUM_UMOL_PER_L" double precision,
    "AMMONIUM_FLAG" text,
    "NUTRIENT_COMMENTS" text,
    "TCO2_UMOL_PER_KG" double precision,
    "CARBON_FLAG" text,
    "CARBON_COMMENTS" text,
    "TALKALINITY_UMOL_PER_KG" double precision,
    "ALKALINITY_FLAG" text,
    "ALKALINITY_COMMENTS" text,
    "OXYGEN_UMOL_PER_L" double precision,
    "OXYGEN_FLAG" text,
    "OXYGEN_COMMENTS" text
);


ALTER TABLE anmn_nrs_bgc_chemistry OWNER TO anmn_nrs_bgc;

--
-- Name: station_name; Type: TABLE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE TABLE station_name (
    station_id bigint NOT NULL,
    "IMOS_SITE_CODE" text,
    "STATION_NAME" text,
    "NODE" text,
    "STATE" text,
    "STATION_DEPTH_M" double precision,
    "LONGITUDE" double precision,
    "LATITUDE" double precision,
    "START_DATE" date,
    geom public.geometry(Geometry,4326) NOT NULL,
    CONSTRAINT station_name_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE station_name OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_chemistry_data; Type: VIEW; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE VIEW anmn_nrs_bgc_chemistry_data AS
 SELECT c."STATION_NAME",
    c."LOCAL_TRIP_START_TIME",
    c."IMOS_SITE_CODE",
    c."NRS_TRIP_CODE",
    c."NRS_SAMPLE_CODE",
    timezone('UTC'::text, c."UTC_TRIP_START_TIME") AS "UTC_TRIP_START_TIME",
    s."LATITUDE",
    s."LONGITUDE",
    c."SAMPLE_DEPTH_M",
    c."SALINITY",
    c."SALINITY_FLAG",
    c."SALINITY_COMMENTS",
    c."SILICATE_UMOL_PER_L",
    c."SILICATE_FLAG",
    c."NITRATE_UMOL_PER_L",
    c."NITRATE_FLAG",
    c."PHOSPHATE_UMOL_PER_L",
    c."PHOSPHATE_FLAG",
    c."AMMONIUM_UMOL_PER_L",
    c."AMMONIUM_FLAG",
    c."NUTRIENT_COMMENTS",
    c."TCO2_UMOL_PER_KG",
    c."CARBON_FLAG",
    c."CARBON_COMMENTS",
    c."TALKALINITY_UMOL_PER_KG",
    c."ALKALINITY_FLAG",
    c."ALKALINITY_COMMENTS",
    c."OXYGEN_UMOL_PER_L",
    c."OXYGEN_FLAG",
    c."OXYGEN_COMMENTS",
    s.geom
   FROM (anmn_nrs_bgc_chemistry c
     LEFT JOIN station_name s USING ("IMOS_SITE_CODE"))
  ORDER BY c."NRS_SAMPLE_CODE";


ALTER TABLE anmn_nrs_bgc_chemistry_data OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_chemistry_measurement_seq; Type: SEQUENCE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE SEQUENCE anmn_nrs_bgc_chemistry_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE anmn_nrs_bgc_chemistry_measurement_seq OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_chemistry_measurement_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER SEQUENCE anmn_nrs_bgc_chemistry_measurement_seq OWNED BY anmn_nrs_bgc_chemistry.measurement;


--
-- Name: anmn_nrs_bgc_phypig; Type: TABLE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE TABLE anmn_nrs_bgc_phypig (
    measurement bigint NOT NULL,
    "UTC_TRIP_START_TIME" timestamp with time zone NOT NULL,
    "NRS_TRIP_CODE" text,
    "NRS_SAMPLE_CODE" text,
    "STATION_NAME" text,
    "IMOS_SITE_CODE" text,
    "LOCAL_TRIP_START_TIME" text NOT NULL,
    "SAMPLE_DEPTH_M" double precision,
    "CPHL_C3" double precision,
    "MG_DVP" double precision,
    "CPHL_C2" double precision,
    "CPHL_C1" double precision,
    "CPHL_C1C2" double precision,
    "CPHLIDE_A" double precision,
    "PHIDE_A" double precision,
    "PERID" double precision,
    "PYROPHIDE_A" double precision,
    "BUT_FUCO" double precision,
    "FUCO" double precision,
    "NEO" double precision,
    "KETO_HEX_FUCO" double precision,
    "PRAS" double precision,
    "VIOLA" double precision,
    "HEX_FUCO" double precision,
    "ASTA" double precision,
    "DIADCHR" double precision,
    "DIADINO" double precision,
    "DINO" double precision,
    "ANTH" double precision,
    "ALLO" double precision,
    "DIATO" double precision,
    "ZEA" double precision,
    "LUT" double precision,
    "CANTHA" double precision,
    "GYRO" double precision,
    "DV_CPHL_B" double precision,
    "CPHL_B" double precision,
    "DV_CPHL_B_AND_CPHL_B" double precision,
    "DV_CPHL_A" double precision,
    "CPHL_A" double precision,
    "DV_CPHL_A_AND_CPHL_A" double precision,
    "ECHIN" double precision,
    "PHYTIN_B" double precision,
    "PHYTIN_A" double precision,
    "LYCO" double precision,
    "BETA_EPI_CAR" double precision,
    "BETA_BETA_CAR" double precision,
    "ALPHA_BETA_CAR" double precision,
    "PYROPHYTIN_A" double precision,
    "QC_FLAG" text,
    "SAMPLE_COMMENTS" text
);


ALTER TABLE anmn_nrs_bgc_phypig OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_phypig_data; Type: VIEW; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE VIEW anmn_nrs_bgc_phypig_data AS
 SELECT s."STATION_NAME",
    p."LOCAL_TRIP_START_TIME",
    p."IMOS_SITE_CODE",
    p."NRS_TRIP_CODE",
    p."NRS_SAMPLE_CODE",
    timezone('UTC'::text, p."UTC_TRIP_START_TIME") AS "UTC_TRIP_START_TIME",
    s."LATITUDE",
    s."LONGITUDE",
    p."SAMPLE_DEPTH_M",
    p."CPHL_C3",
    p."MG_DVP",
    p."CPHL_C2",
    p."CPHL_C1",
    p."CPHL_C1C2",
    p."CPHLIDE_A",
    p."PHIDE_A",
    p."PERID",
    p."PYROPHIDE_A",
    p."BUT_FUCO",
    p."FUCO",
    p."NEO",
    p."KETO_HEX_FUCO",
    p."PRAS",
    p."VIOLA",
    p."HEX_FUCO",
    p."ASTA",
    p."DIADCHR",
    p."DIADINO",
    p."DINO",
    p."ANTH",
    p."ALLO",
    p."DIATO",
    p."ZEA",
    p."LUT",
    p."CANTHA",
    p."GYRO",
    p."DV_CPHL_B",
    p."CPHL_B",
    p."DV_CPHL_B_AND_CPHL_B",
    p."DV_CPHL_A",
    p."CPHL_A",
    p."DV_CPHL_A_AND_CPHL_A",
    p."ECHIN",
    p."PHYTIN_B",
    p."PHYTIN_A",
    p."LYCO",
    p."BETA_EPI_CAR",
    p."BETA_BETA_CAR",
    p."ALPHA_BETA_CAR",
    p."PYROPHYTIN_A",
    p."QC_FLAG",
    p."SAMPLE_COMMENTS",
    s.geom
   FROM (anmn_nrs_bgc_phypig p
     LEFT JOIN station_name s USING ("IMOS_SITE_CODE"))
  ORDER BY p."NRS_SAMPLE_CODE";


ALTER TABLE anmn_nrs_bgc_phypig_data OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_phypig_measurement_seq; Type: SEQUENCE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE SEQUENCE anmn_nrs_bgc_phypig_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE anmn_nrs_bgc_phypig_measurement_seq OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_phypig_measurement_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER SEQUENCE anmn_nrs_bgc_phypig_measurement_seq OWNED BY anmn_nrs_bgc_phypig.measurement;


--
-- Name: anmn_nrs_bgc_picoplankton; Type: TABLE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE TABLE anmn_nrs_bgc_picoplankton (
    measurement bigint NOT NULL,
    "UTC_TRIP_START_TIME" timestamp with time zone NOT NULL,
    "NRS_TRIP_CODE" text,
    "NRS_SAMPLE_CODE" text,
    "STATION_NAME" text,
    "IMOS_SITE_CODE" text,
    "LOCAL_TRIP_START_TIME" text NOT NULL,
    "REPLICATE" text,
    "PROCHLOROCOCCUS_CELLSPERML" double precision,
    "SYNECOCHOCCUS_CELLSPERML" double precision,
    "PICOEUKARYOTES_CELLSPERML" double precision,
    "PROCHLOROCOCCUS_FLAG" text,
    "SYNECOCHOCCUS_FLAG" text,
    "PICOEUKARYOTES_FLAG" text,
    "SAMPLE_COMMENTS" text
);


ALTER TABLE anmn_nrs_bgc_picoplankton OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_picoplankton_data; Type: VIEW; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE VIEW anmn_nrs_bgc_picoplankton_data AS
 SELECT s."STATION_NAME",
    p."LOCAL_TRIP_START_TIME",
    p."IMOS_SITE_CODE",
    p."NRS_TRIP_CODE",
    p."NRS_SAMPLE_CODE",
    timezone('UTC'::text, p."UTC_TRIP_START_TIME") AS "UTC_TRIP_START_TIME",
    s."LATITUDE",
    s."LONGITUDE",
    p."REPLICATE",
    p."PROCHLOROCOCCUS_CELLSPERML",
    p."SYNECOCHOCCUS_CELLSPERML",
    p."PICOEUKARYOTES_CELLSPERML",
    p."PROCHLOROCOCCUS_FLAG",
    p."SYNECOCHOCCUS_FLAG",
    p."PICOEUKARYOTES_FLAG",
    p."SAMPLE_COMMENTS",
    s.geom
   FROM (anmn_nrs_bgc_picoplankton p
     LEFT JOIN station_name s USING ("IMOS_SITE_CODE"))
  ORDER BY p."NRS_SAMPLE_CODE";


ALTER TABLE anmn_nrs_bgc_picoplankton_data OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_picoplankton_measurement_seq; Type: SEQUENCE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE SEQUENCE anmn_nrs_bgc_picoplankton_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE anmn_nrs_bgc_picoplankton_measurement_seq OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_picoplankton_measurement_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER SEQUENCE anmn_nrs_bgc_picoplankton_measurement_seq OWNED BY anmn_nrs_bgc_picoplankton.measurement;


--
-- Name: anmn_nrs_bgc_plankton_biomass; Type: TABLE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE TABLE anmn_nrs_bgc_plankton_biomass (
    measurement bigint NOT NULL,
    "UTC_TRIP_START_TIME" timestamp with time zone NOT NULL,
    "NRS_TRIP_CODE" text,
    "NRS_SAMPLE_CODE" text,
    "STATION_NAME" text,
    "IMOS_SITE_CODE" text,
    "LOCAL_TRIP_START_TIME" text,
    "LONGITUDE" double precision,
    "LATITUDE" double precision,
    "MG_PER_M3" double precision
);


ALTER TABLE anmn_nrs_bgc_plankton_biomass OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_plankton_biomass_data; Type: VIEW; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE VIEW anmn_nrs_bgc_plankton_biomass_data AS
 SELECT s."STATION_NAME",
    b."LOCAL_TRIP_START_TIME",
    b."IMOS_SITE_CODE",
    b."NRS_TRIP_CODE",
    b."NRS_SAMPLE_CODE",
    timezone('UTC'::text, b."UTC_TRIP_START_TIME") AS "UTC_TRIP_START_TIME",
    s."LATITUDE",
    s."LONGITUDE",
    b."MG_PER_M3",
    s.geom
   FROM (anmn_nrs_bgc_plankton_biomass b
     LEFT JOIN station_name s USING ("IMOS_SITE_CODE"))
  ORDER BY b."NRS_SAMPLE_CODE";


ALTER TABLE anmn_nrs_bgc_plankton_biomass_data OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_plankton_biomass_measurement_seq; Type: SEQUENCE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE SEQUENCE anmn_nrs_bgc_plankton_biomass_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE anmn_nrs_bgc_plankton_biomass_measurement_seq OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_plankton_biomass_measurement_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER SEQUENCE anmn_nrs_bgc_plankton_biomass_measurement_seq OWNED BY anmn_nrs_bgc_plankton_biomass.measurement;


--
-- Name: anmn_nrs_bgc_plankton_phytoplankton; Type: TABLE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE TABLE anmn_nrs_bgc_plankton_phytoplankton (
    measurement bigint NOT NULL,
    "UTC_TRIP_START_TIME" timestamp with time zone NOT NULL,
    "NRS_TRIP_CODE" text,
    "NRS_SAMPLE_CODE" text,
    "STATION_NAME" text,
    "IMOS_SITE_CODE" text,
    "LOCAL_TRIP_START_TIME" text,
    "LONGITUDE" double precision,
    "LATITUDE" double precision,
    "TAXON_NAME" text,
    "FAMILY" text,
    "GENUS" text,
    "SPECIES" text,
    "TAXON_ECO_GROUP" text,
    "CAAB_CODE" double precision,
    "TAXON_START_DATE" text,
    "CELL_PER_LITRE" double precision,
    "BIOVOLUME_UM3_PER_L" double precision,
    "SAMPLE_COMMENTS" text
);


ALTER TABLE anmn_nrs_bgc_plankton_phytoplankton OWNER TO anmn_nrs_bgc;

--
-- Name: nrs_phyto_taxon_changelog; Type: TABLE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE TABLE nrs_phyto_taxon_changelog (
    "TAXON_NAME" text NOT NULL,
    "TAXON_START_DATE" date,
    "FIRST_OCCURRENCE" date,
    "PARENT_TAXON_NAME" text NOT NULL,
    "TRAINING" text,
    "COMMENTS" text
);


ALTER TABLE nrs_phyto_taxon_changelog OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_plankton_phytoplankton_data; Type: VIEW; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE VIEW anmn_nrs_bgc_plankton_phytoplankton_data AS
 SELECT s."STATION_NAME",
    p."LOCAL_TRIP_START_TIME",
    p."IMOS_SITE_CODE",
    p."NRS_TRIP_CODE",
    p."NRS_SAMPLE_CODE",
    timezone('UTC'::text, p."UTC_TRIP_START_TIME") AS "UTC_TRIP_START_TIME",
    s."LATITUDE",
    s."LONGITUDE",
    p."TAXON_NAME",
    p."FAMILY",
    p."GENUS",
    p."SPECIES",
    p."TAXON_ECO_GROUP",
    p."CAAB_CODE",
    p."TAXON_START_DATE",
    p."CELL_PER_LITRE",
    p."BIOVOLUME_UM3_PER_L",
    p."SAMPLE_COMMENTS",
    c."FIRST_OCCURRENCE" AS "TAXON_FIRST_OCCURRENCE",
    c."PARENT_TAXON_NAME",
    c."TRAINING" AS "TAXON_TRAINING",
    c."COMMENTS" AS "TAXON_COMMENTS",
    s.geom
   FROM ((anmn_nrs_bgc_plankton_phytoplankton p
     LEFT JOIN station_name s USING ("IMOS_SITE_CODE"))
     LEFT JOIN nrs_phyto_taxon_changelog c USING ("TAXON_NAME"))
  ORDER BY p."NRS_SAMPLE_CODE";


ALTER TABLE anmn_nrs_bgc_plankton_phytoplankton_data OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_plankton_phytoplankton_measurement_seq; Type: SEQUENCE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE SEQUENCE anmn_nrs_bgc_plankton_phytoplankton_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE anmn_nrs_bgc_plankton_phytoplankton_measurement_seq OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_plankton_phytoplankton_measurement_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER SEQUENCE anmn_nrs_bgc_plankton_phytoplankton_measurement_seq OWNED BY anmn_nrs_bgc_plankton_phytoplankton.measurement;


--
-- Name: anmn_nrs_bgc_plankton_zooplankton; Type: TABLE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE TABLE anmn_nrs_bgc_plankton_zooplankton (
    measurement bigint NOT NULL,
    "UTC_TRIP_START_TIME" timestamp with time zone NOT NULL,
    "NRS_TRIP_CODE" text,
    "NRS_SAMPLE_CODE" text,
    "STATION_NAME" text,
    "IMOS_SITE_CODE" text,
    "LOCAL_TRIP_START_TIME" text,
    "LONGITUDE" double precision,
    "LATITUDE" double precision,
    "TAXON_NAME" text,
    "FAMILY" text,
    "GENUS" text,
    "SPECIES" text,
    "SEX" text,
    "LIFE_STAGE" text,
    "TAXON_GROUP" text,
    "TAXON_ECO_GROUP" text,
    "CAAB_CODE" double precision,
    "TAXON_START_DATE" text,
    "TAXON_PER_M3" double precision,
    "SAMPLE_COMMENTS" text
);


ALTER TABLE anmn_nrs_bgc_plankton_zooplankton OWNER TO anmn_nrs_bgc;

--
-- Name: nrs_zoop_taxon_changelog; Type: TABLE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE TABLE nrs_zoop_taxon_changelog (
    "TAXON_NAME" text NOT NULL,
    "TAXON_START_DATE" date,
    "FIRST_OCCURRENCE" date,
    "PARENT_TAXON_NAME" text NOT NULL,
    "TRAINING" text,
    "COMMENTS" text
);


ALTER TABLE nrs_zoop_taxon_changelog OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_plankton_zooplankton_data; Type: VIEW; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE VIEW anmn_nrs_bgc_plankton_zooplankton_data AS
 SELECT s."STATION_NAME",
    z."LOCAL_TRIP_START_TIME",
    z."IMOS_SITE_CODE",
    z."NRS_TRIP_CODE",
    z."NRS_SAMPLE_CODE",
    timezone('UTC'::text, z."UTC_TRIP_START_TIME") AS "UTC_TRIP_START_TIME",
    s."LATITUDE",
    s."LONGITUDE",
    z."TAXON_NAME",
    z."FAMILY",
    z."GENUS",
    z."SPECIES",
    ((z."GENUS" || ' '::text) || z."SPECIES") AS genus_and_species,
    z."SEX",
    z."LIFE_STAGE",
    z."TAXON_GROUP",
    z."TAXON_ECO_GROUP",
    z."CAAB_CODE",
    z."TAXON_START_DATE",
    z."TAXON_PER_M3",
    z."SAMPLE_COMMENTS",
    c."FIRST_OCCURRENCE" AS "TAXON_FIRST_OCCURRENCE",
    c."PARENT_TAXON_NAME",
    c."TRAINING" AS "TAXON_TRAINING",
    c."COMMENTS" AS "TAXON_COMMENTS",
    s.geom
   FROM ((anmn_nrs_bgc_plankton_zooplankton z
     LEFT JOIN station_name s USING ("IMOS_SITE_CODE"))
     LEFT JOIN nrs_zoop_taxon_changelog c USING ("TAXON_NAME"))
  ORDER BY z."NRS_SAMPLE_CODE";


ALTER TABLE anmn_nrs_bgc_plankton_zooplankton_data OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_plankton_zooplankton_measurement_seq; Type: SEQUENCE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE SEQUENCE anmn_nrs_bgc_plankton_zooplankton_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE anmn_nrs_bgc_plankton_zooplankton_measurement_seq OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_plankton_zooplankton_measurement_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER SEQUENCE anmn_nrs_bgc_plankton_zooplankton_measurement_seq OWNED BY anmn_nrs_bgc_plankton_zooplankton.measurement;


--
-- Name: anmn_nrs_bgc_tss_secchi; Type: TABLE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE TABLE anmn_nrs_bgc_tss_secchi (
    measurement bigint NOT NULL,
    "UTC_TRIP_START_TIME" timestamp with time zone NOT NULL,
    "NRS_TRIP_CODE" text,
    "NRS_SAMPLE_CODE" text,
    "STATION_NAME" text,
    "IMOS_SITE_CODE" text,
    "LOCAL_TRIP_START_TIME" text NOT NULL,
    "REPLICATE" text,
    "TSS_MG_PER_L" double precision,
    "INORGANIC_FRACTION_MG_PER_L" double precision,
    "ORGANIC_FRACTION_MG_PER_L" double precision,
    "TSS_FLAG" text,
    "TSS_COMMENTS" text,
    "SECCHI_DEPTH_M" double precision,
    "SECCHI_FLAG" text,
    "SECCHI_COMMENTS" text
);


ALTER TABLE anmn_nrs_bgc_tss_secchi OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_tss_secchi_data; Type: VIEW; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE VIEW anmn_nrs_bgc_tss_secchi_data AS
 SELECT s."STATION_NAME",
    t."LOCAL_TRIP_START_TIME",
    t."IMOS_SITE_CODE",
    t."NRS_TRIP_CODE",
    t."NRS_SAMPLE_CODE",
    timezone('UTC'::text, t."UTC_TRIP_START_TIME") AS "UTC_TRIP_START_TIME",
    s."LATITUDE",
    s."LONGITUDE",
    t."REPLICATE",
    t."TSS_MG_PER_L",
    t."INORGANIC_FRACTION_MG_PER_L",
    t."ORGANIC_FRACTION_MG_PER_L",
    t."TSS_FLAG",
    t."TSS_COMMENTS",
    t."SECCHI_DEPTH_M",
    t."SECCHI_FLAG",
    t."SECCHI_COMMENTS",
    s.geom
   FROM (anmn_nrs_bgc_tss_secchi t
     LEFT JOIN station_name s USING ("IMOS_SITE_CODE"))
  ORDER BY t."NRS_SAMPLE_CODE";


ALTER TABLE anmn_nrs_bgc_tss_secchi_data OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_tss_secchi_measurement_seq; Type: SEQUENCE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE SEQUENCE anmn_nrs_bgc_tss_secchi_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE anmn_nrs_bgc_tss_secchi_measurement_seq OWNER TO anmn_nrs_bgc;

--
-- Name: anmn_nrs_bgc_tss_secchi_measurement_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER SEQUENCE anmn_nrs_bgc_tss_secchi_measurement_seq OWNED BY anmn_nrs_bgc_tss_secchi.measurement;


--
-- Name: databasechangelog; Type: TABLE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO anmn_nrs_bgc;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO anmn_nrs_bgc;

--
-- Name: qc_flags; Type: TABLE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE TABLE qc_flags (
    "QC_FLAG" text NOT NULL,
    "FLAG_DESCRIPTION" text
);


ALTER TABLE qc_flags OWNER TO anmn_nrs_bgc;

--
-- Name: station_name_station_id_seq; Type: SEQUENCE; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

CREATE SEQUENCE station_name_station_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE station_name_station_id_seq OWNER TO anmn_nrs_bgc;

--
-- Name: station_name_station_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER SEQUENCE station_name_station_id_seq OWNED BY station_name.station_id;


SET search_path = anmn_nrs_ctd_profiles, pg_catalog;

--
-- Name: deployments; Type: TABLE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE TABLE deployments (
    file_id integer NOT NULL,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    site_code character varying,
    cruise_id character varying,
    station character varying,
    longitude character varying(50),
    latitude character varying(50),
    quality_control_set character varying(50),
    geospatial_vertical_min character varying(50),
    geospatial_vertical_max character varying(50),
    geospatial_lat_max double precision,
    geospatial_lon_max double precision,
    geom public.geometry(Geometry,4326),
    CONSTRAINT deployments_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE deployments OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: measurements; Type: TABLE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE TABLE measurements (
    measurement bigint NOT NULL,
    file_id integer NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "DEPTH" real,
    "PSAL" real,
    "TEMP" real,
    "DOX2" real,
    "CHLF" real,
    "TURB" real,
    "BOT_DEPTH" real,
    "DIRECTION" character varying(1),
    "PRES_REL" real,
    "CNDC" real,
    "INSTANCE" integer,
    "DESC" real,
    "DENS" real,
    "TIME_quality_control" character varying(1),
    "LATITUDE_quality_control" character varying(1),
    "LONGITUDE_quality_control" character varying(1),
    "DEPTH_quality_control" character varying(1),
    "PRES_REL_quality_control" character varying(1),
    "PSAL_quality_control" character varying(1),
    "TEMP_quality_control" character varying(1),
    "DOX2_quality_control" character varying(1),
    "CHLF_quality_control" character varying(1),
    "TURB_quality_control" character varying(1),
    "BOT_DEPTH_quality_control" character varying(1),
    "DIRECTION_quality_control" character varying(1),
    "DESC_quality_control" character varying(1),
    "CNDC_quality_control" character varying(1),
    "DENS_quality_control" character varying(1)
);


ALTER TABLE measurements OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: anmn_nrs_ctd_profiles_data; Type: VIEW; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE VIEW anmn_nrs_ctd_profiles_data AS
 SELECT measurements.file_id,
    a.site_code,
    a.cruise_id,
    timezone('UTC'::text, a.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, a.time_coverage_end) AS time_coverage_end,
    timezone('UTC'::text, measurements."TIME") AS "TIME",
    measurements."INSTANCE",
    measurements."DIRECTION",
    measurements."TIME_quality_control",
    measurements."LATITUDE",
    measurements."LATITUDE_quality_control",
    measurements."LONGITUDE",
    measurements."LONGITUDE_quality_control",
    measurements."DEPTH",
    measurements."DEPTH_quality_control",
    measurements."BOT_DEPTH",
    measurements."BOT_DEPTH_quality_control",
    measurements."PRES_REL",
    measurements."PRES_REL_quality_control",
    measurements."TEMP",
    measurements."TEMP_quality_control",
    measurements."PSAL",
    measurements."PSAL_quality_control",
    measurements."DOX2",
    measurements."DOX2_quality_control",
    measurements."TURB",
    measurements."TURB_quality_control",
    measurements."CHLF",
    measurements."CHLF_quality_control",
    measurements."CNDC",
    measurements."CNDC_quality_control",
    measurements."DESC",
    measurements."DESC_quality_control",
    measurements."DENS",
    measurements."DENS_quality_control",
    a.geom
   FROM (measurements
     JOIN deployments a ON ((measurements.file_id = a.file_id)))
  ORDER BY measurements.file_id, measurements."TIME", measurements."DEPTH";


ALTER TABLE anmn_nrs_ctd_profiles_data OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: indexed_file; Type: TABLE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: anmn_nrs_ctd_profiles_map; Type: VIEW; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE VIEW anmn_nrs_ctd_profiles_map AS
 SELECT d.file_id,
    f.url,
    f.size,
    d.site_code,
    d.cruise_id,
    d.station,
    timezone('UTC'::text, d.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, d.time_coverage_end) AS time_coverage_end,
    d.geospatial_lon_max,
    d.geospatial_lat_max,
    d.geospatial_vertical_min,
    d.geospatial_vertical_max,
    d.geom
   FROM (deployments d
     JOIN indexed_file f ON ((d.file_id = f.id)));


ALTER TABLE anmn_nrs_ctd_profiles_map OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: attribute; Type: TABLE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: databasechangelog; Type: TABLE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: file; Type: TABLE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: file_harvest; Type: TABLE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements_measurement_seq; Type: SEQUENCE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE SEQUENCE measurements_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_seq OWNER TO anmn_nrs_ctd_profiles;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER SEQUENCE measurements_measurement_seq OWNED BY measurements.measurement;


--
-- Name: variable; Type: TABLE; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO anmn_nrs_ctd_profiles;

SET search_path = anmn_nrs_dar_yon, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO anmn_nrs_dar_yon;

--
-- Name: indexed_file; Type: TABLE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO anmn_nrs_dar_yon;

--
-- Name: measurements_noqaqc; Type: TABLE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE TABLE measurements_noqaqc (
    file_id integer NOT NULL,
    measurement bigint NOT NULL,
    channel_id integer NOT NULL,
    "TIME" timestamp without time zone,
    "VALUES" real,
    "VALUES_quality_control" character varying(1)
);


ALTER TABLE measurements_noqaqc OWNER TO anmn_nrs_dar_yon;

--
-- Name: measurements_qaqc; Type: TABLE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE TABLE measurements_qaqc (
    file_id integer NOT NULL,
    measurement bigint NOT NULL,
    channel_id integer NOT NULL,
    "TIME" timestamp without time zone,
    "VALUES" real,
    "VALUES_quality_control" character varying(1)
);


ALTER TABLE measurements_qaqc OWNER TO anmn_nrs_dar_yon;

--
-- Name: timeseries_feature_deployments_varname; Type: TABLE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE TABLE timeseries_feature_deployments_varname (
    channel_id integer,
    "VARNAME" text,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "NOMINAL_DEPTH" real,
    geom public.geometry(Geometry,4326),
    site_code character varying(40),
    time_coverage_start timestamp without time zone,
    time_coverage_end timestamp without time zone
);


ALTER TABLE timeseries_feature_deployments_varname OWNER TO anmn_nrs_dar_yon;

--
-- Name: variables_info; Type: MATERIALIZED VIEW; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE MATERIALIZED VIEW variables_info AS
 SELECT DISTINCT var."LONGNAME",
    var."VARNAME"
   FROM ( SELECT DISTINCT attribute.container AS "VARNAME",
            attribute.value AS "LONGNAME"
           FROM attribute
          WHERE ((attribute.container !~ 'LATITUDE'::text) AND (attribute.container !~ 'LONGITUDE'::text) AND (attribute.container !~ 'TIME'::text) AND (attribute.container !~ 'NOMINAL_DEPTH'::text) AND (attribute.container !~ '_quality_control'::text) AND (attribute.name = 'long_name'::text))) var
  WITH NO DATA;


ALTER TABLE variables_info OWNER TO anmn_nrs_dar_yon;

--
-- Name: anmn_nrs_dar_yon_timeseries_data; Type: VIEW; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE VIEW anmn_nrs_dar_yon_timeseries_data AS
 SELECT measurements_noqaqc.channel_id,
    measurements_noqaqc."TIME",
    measurements_noqaqc."VALUES",
    COALESCE(measurements_qaqc."VALUES_quality_control", measurements_noqaqc."VALUES_quality_control") AS "VALUES_quality_control",
    table_a.url,
        CASE
            WHEN ((table_b.site_code)::text ~ 'NRSDAR'::text) THEN 'Darwin'::character varying
            WHEN ((table_b.site_code)::text ~ 'NRSYON'::text) THEN 'Yongala'::character varying
            WHEN ((table_b.site_code)::text ~ 'DARBGF'::text) THEN 'Beagle'::character varying
            ELSE table_b.site_code
        END AS platform_code,
    table_b.site_code,
    table_b."LATITUDE",
    table_b."LONGITUDE",
    table_b."NOMINAL_DEPTH",
    table_b."VARNAME",
    variables_info."LONGNAME",
    table_b.geom
   FROM ((((measurements_noqaqc
     LEFT JOIN measurements_qaqc ON (((measurements_qaqc."TIME" = measurements_noqaqc."TIME") AND (measurements_qaqc."VALUES" = measurements_noqaqc."VALUES") AND (measurements_qaqc.channel_id = measurements_noqaqc.channel_id))))
     JOIN indexed_file table_a ON ((table_a.id = measurements_noqaqc.file_id)))
     JOIN timeseries_feature_deployments_varname table_b ON ((table_b.channel_id = measurements_noqaqc.channel_id)))
     JOIN variables_info ON ((variables_info."VARNAME" = table_b."VARNAME")))
  ORDER BY measurements_noqaqc.channel_id, measurements_noqaqc."TIME";


ALTER TABLE anmn_nrs_dar_yon_timeseries_data OWNER TO anmn_nrs_dar_yon;

--
-- Name: anmn_nrs_dar_yon_timeseries_map; Type: VIEW; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE VIEW anmn_nrs_dar_yon_timeseries_map AS
 WITH table_b AS (
         SELECT ts_depl.channel_id,
                CASE
                    WHEN ((ts_depl.site_code)::text ~ 'NRSDAR'::text) THEN 'Darwin'::character varying
                    WHEN ((ts_depl.site_code)::text ~ 'NRSYON'::text) THEN 'Yongala'::character varying
                    WHEN ((ts_depl.site_code)::text ~ 'DARBGF'::text) THEN 'Beagle'::character varying
                    ELSE ts_depl.site_code
                END AS platform_code,
            ts_depl.time_coverage_start,
            ts_depl.time_coverage_end
           FROM timeseries_feature_deployments_varname ts_depl
        )
 SELECT timeseries_feature_deployments_varname.channel_id,
    table_b.time_coverage_start,
    table_b.time_coverage_end,
    table_b.platform_code,
    timeseries_feature_deployments_varname.site_code,
    timeseries_feature_deployments_varname."VARNAME",
    variables_info."LONGNAME",
    timeseries_feature_deployments_varname."NOMINAL_DEPTH",
    timeseries_feature_deployments_varname.geom
   FROM ((timeseries_feature_deployments_varname
     JOIN variables_info ON ((variables_info."VARNAME" = timeseries_feature_deployments_varname."VARNAME")))
     JOIN table_b ON ((table_b.channel_id = timeseries_feature_deployments_varname.channel_id)));


ALTER TABLE anmn_nrs_dar_yon_timeseries_map OWNER TO anmn_nrs_dar_yon;

--
-- Name: databasechangelog; Type: TABLE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO anmn_nrs_dar_yon;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO anmn_nrs_dar_yon;

--
-- Name: file; Type: TABLE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO anmn_nrs_dar_yon;

--
-- Name: file_harvest; Type: TABLE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO anmn_nrs_dar_yon;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO anmn_nrs_dar_yon;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: global_attributes_file; Type: TABLE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE TABLE global_attributes_file (
    id bigint NOT NULL,
    file_id integer NOT NULL,
    author_email character varying,
    aims_channel_id integer,
    quality_control_set character varying,
    keywords character varying,
    source character varying,
    citation character varying,
    author character varying,
    "references" character varying,
    platform_code character varying,
    geospatial_vertical_reference_datum character varying,
    file_version character varying,
    geospatial_vertical_positive character varying,
    institution character varying,
    distribution_statement character varying,
    principal_investigator_email character varying,
    institution_references character varying,
    geospatial_vertical_min real,
    local_time_zone character varying,
    geospatial_vertical_max character varying,
    geospatial_vertical_units character varying,
    data_centre_email character varying,
    file_version_quality_control character varying,
    netcdf_version character varying,
    data_centre character varying,
    instrument character varying,
    date_created character varying,
    title character varying,
    acknowledgement character varying,
    principal_investigator character varying,
    metadata_uuid character varying,
    conventions character varying,
    site_code character varying,
    instrument_serial_number character varying,
    project character varying,
    naming_authority character varying
);


ALTER TABLE global_attributes_file OWNER TO anmn_nrs_dar_yon;

--
-- Name: global_attributes_file_id_seq; Type: SEQUENCE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE SEQUENCE global_attributes_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE global_attributes_file_id_seq OWNER TO anmn_nrs_dar_yon;

--
-- Name: global_attributes_file_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER SEQUENCE global_attributes_file_id_seq OWNED BY global_attributes_file.id;


--
-- Name: index_job; Type: TABLE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO anmn_nrs_dar_yon;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO anmn_nrs_dar_yon;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO anmn_nrs_dar_yon;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements_noqaqc_measurement_seq; Type: SEQUENCE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE SEQUENCE measurements_noqaqc_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_noqaqc_measurement_seq OWNER TO anmn_nrs_dar_yon;

--
-- Name: measurements_noqaqc_measurement_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER SEQUENCE measurements_noqaqc_measurement_seq OWNED BY measurements_noqaqc.measurement;


--
-- Name: measurements_qaqc_measurement_seq; Type: SEQUENCE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE SEQUENCE measurements_qaqc_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_qaqc_measurement_seq OWNER TO anmn_nrs_dar_yon;

--
-- Name: measurements_qaqc_measurement_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER SEQUENCE measurements_qaqc_measurement_seq OWNED BY measurements_qaqc.measurement;


--
-- Name: timeseries_feature_deployments; Type: TABLE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE TABLE timeseries_feature_deployments (
    channel_id integer NOT NULL,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "NOMINAL_DEPTH" real,
    geom public.geometry(Geometry,4326) NOT NULL,
    site_code character varying(40)
);


ALTER TABLE timeseries_feature_deployments OWNER TO anmn_nrs_dar_yon;

--
-- Name: variable; Type: TABLE; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO anmn_nrs_dar_yon;

SET search_path = anmn_nrs_rt_bio, pg_catalog;

--
-- Name: measurement; Type: TABLE; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE TABLE measurement (
    ts_id bigint NOT NULL,
    index bigint NOT NULL,
    "TIME" timestamp with time zone NOT NULL,
    "TIME_quality_control" character(1),
    "TEMP" real,
    "TEMP_quality_control" character(1),
    "PSAL" real,
    "PSAL_quality_control" character(1),
    "PRES_REL" real,
    "PRES_REL_quality_control" character(1),
    "TURB" real,
    "TURB_quality_control" character(1),
    "CPHL" real,
    "CPHL_quality_control" character(1),
    "DOX1" real,
    "DOX1_quality_control" character(1),
    "SERIAL_NO" real
);


ALTER TABLE measurement OWNER TO anmn_nrs_rt_bio;

--
-- Name: timeseries; Type: TABLE; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE TABLE timeseries (
    id bigint NOT NULL,
    file_id bigint NOT NULL,
    site_code text NOT NULL,
    platform_code text NOT NULL,
    deployment_code text NOT NULL,
    "LATITUDE" double precision,
    "LATITUDE_quality_control" character(1),
    "LONGITUDE" double precision,
    "LONGITUDE_quality_control" character(1),
    geom public.geometry(Geometry,4326),
    instrument_nominal_depth real,
    site_nominal_depth real,
    site_depth_at_deployment real,
    instrument text,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    sea_water_temperature_b boolean,
    sea_water_salinity_b boolean,
    sea_water_pressure_due_to_sea_water_b boolean,
    turbidity_b boolean,
    mass_concentration_of_chlorophyll_in_sea_water_b boolean,
    mole_concentration_of_dissolved_molecular_oxygen_in_sea_water_b boolean,
    CONSTRAINT timeseries_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE timeseries OWNER TO anmn_nrs_rt_bio;

--
-- Name: anmn_nrs_rt_bio_timeseries_data; Type: VIEW; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE VIEW anmn_nrs_rt_bio_timeseries_data AS
 SELECT m.ts_id AS timeseries_id,
    m.index,
    t.site_code,
    t.platform_code,
    t.deployment_code,
    t.instrument_nominal_depth,
    m."SERIAL_NO",
    timezone('UTC'::text, m."TIME") AS "TIME",
    m."TIME_quality_control",
    t."LATITUDE",
    t."LATITUDE_quality_control",
    t."LONGITUDE",
    t."LONGITUDE_quality_control",
    m."TEMP",
    m."TEMP_quality_control",
    m."PSAL",
    m."PSAL_quality_control",
    m."PRES_REL",
    m."PRES_REL_quality_control",
    m."TURB",
    m."TURB_quality_control",
    m."CPHL",
    m."CPHL_quality_control",
    m."DOX1",
    m."DOX1_quality_control",
    t.geom,
    t.sea_water_temperature_b,
    t.sea_water_salinity_b,
    t.sea_water_pressure_due_to_sea_water_b,
    t.turbidity_b,
    t.mass_concentration_of_chlorophyll_in_sea_water_b,
    t.mole_concentration_of_dissolved_molecular_oxygen_in_sea_water_b
   FROM (timeseries t
     JOIN measurement m ON ((t.id = m.ts_id)));


ALTER TABLE anmn_nrs_rt_bio_timeseries_data OWNER TO anmn_nrs_rt_bio;

--
-- Name: indexed_file; Type: TABLE; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO anmn_nrs_rt_bio;

--
-- Name: anmn_nrs_rt_bio_timeseries_map; Type: VIEW; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE VIEW anmn_nrs_rt_bio_timeseries_map AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.site_code,
    t.platform_code,
    t.deployment_code,
    t.geom,
    t."LATITUDE",
    t."LONGITUDE",
    t.instrument_nominal_depth,
    t.instrument,
    t.sea_water_temperature_b,
    t.sea_water_salinity_b,
    t.sea_water_pressure_due_to_sea_water_b,
    timezone('UTC'::text, t.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, t.time_coverage_end) AS time_coverage_end,
    t.turbidity_b,
    t.mass_concentration_of_chlorophyll_in_sea_water_b,
    t.mole_concentration_of_dissolved_molecular_oxygen_in_sea_water_b
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)));


ALTER TABLE anmn_nrs_rt_bio_timeseries_map OWNER TO anmn_nrs_rt_bio;

--
-- Name: databasechangelog; Type: TABLE; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO anmn_nrs_rt_bio;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO anmn_nrs_rt_bio;

--
-- Name: file_harvest; Type: TABLE; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO anmn_nrs_rt_bio;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO anmn_nrs_rt_bio;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO anmn_nrs_rt_bio;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO anmn_nrs_rt_bio;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO anmn_nrs_rt_bio;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: timeseries_id_seq; Type: SEQUENCE; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE SEQUENCE timeseries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE timeseries_id_seq OWNER TO anmn_nrs_rt_bio;

--
-- Name: timeseries_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER SEQUENCE timeseries_id_seq OWNED BY timeseries.id;


SET search_path = anmn_nrs_rt_meteo, pg_catalog;

--
-- Name: measurement; Type: TABLE; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE TABLE measurement (
    ts_id bigint NOT NULL,
    index bigint NOT NULL,
    "TIME" timestamp with time zone NOT NULL,
    "TIME_quality_control" character(1),
    "AIRT" real,
    "AIRT_quality_control" character(1),
    "ATMS" real,
    "ATMS_quality_control" character(1),
    "RAIN_AMOUNT" real,
    "RAIN_AMOUNT_quality_control" character(1),
    "RELH" real,
    "RELH_quality_control" character(1),
    "SSTI" real,
    "SSTI_quality_control" character(1),
    "WDIRF_AVG" real,
    "WDIRF_AVG_quality_control" character(1),
    "WSPD_AVG" real,
    "WSPD_AVG_quality_control" character(1),
    "WSPD_MIN" real,
    "WSPD_MIN_quality_control" character(1),
    "WSPD_MAX" real,
    "WSPD_MAX_quality_control" character(1)
);


ALTER TABLE measurement OWNER TO anmn_nrs_rt_meteo;

--
-- Name: COLUMN measurement.index; Type: COMMENT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

COMMENT ON COLUMN measurement.index IS 'index of measurement in netCDF file';


--
-- Name: timeseries; Type: TABLE; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE TABLE timeseries (
    id bigint NOT NULL,
    file_id bigint NOT NULL,
    site_code text NOT NULL,
    platform_code text NOT NULL,
    deployment_code text NOT NULL,
    "LATITUDE" double precision,
    "LATITUDE_quality_control" character(1),
    "LONGITUDE" double precision,
    "LONGITUDE_quality_control" character(1),
    geom public.geometry(Geometry,4326),
    instrument_nominal_depth real,
    site_nominal_depth real,
    instrument text,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    air_temperature_b boolean,
    air_pressure_at_sea_level_b boolean,
    thickness_of_rainfall_amount_b boolean,
    relative_humidity_b boolean,
    sea_surface_temperature_b boolean,
    wind_from_direction_average_b boolean,
    wind_speed_average_b boolean,
    wind_speed_minimum_b boolean,
    wind_speed_maximum_b boolean,
    CONSTRAINT timeseries_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE timeseries OWNER TO anmn_nrs_rt_meteo;

--
-- Name: anmn_nrs_rt_meteo_timeseries_data; Type: VIEW; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE VIEW anmn_nrs_rt_meteo_timeseries_data AS
 SELECT m.ts_id AS timeseries_id,
    m.index,
    t.site_code,
    t.platform_code,
    t.deployment_code,
    t.instrument_nominal_depth,
    timezone('UTC'::text, m."TIME") AS "TIME",
    m."TIME_quality_control",
    t."LATITUDE",
    t."LATITUDE_quality_control",
    t."LONGITUDE",
    t."LONGITUDE_quality_control",
    m."AIRT",
    m."AIRT_quality_control",
    m."ATMS",
    m."ATMS_quality_control",
    m."RAIN_AMOUNT",
    m."RAIN_AMOUNT_quality_control",
    m."RELH",
    m."RELH_quality_control",
    m."SSTI",
    m."SSTI_quality_control",
    m."WDIRF_AVG",
    m."WDIRF_AVG_quality_control",
    m."WSPD_AVG",
    m."WSPD_AVG_quality_control",
    m."WSPD_MIN",
    m."WSPD_MIN_quality_control",
    m."WSPD_MAX",
    m."WSPD_MAX_quality_control",
    t.geom,
    t.air_temperature_b,
    t.air_pressure_at_sea_level_b,
    t.thickness_of_rainfall_amount_b,
    t.relative_humidity_b,
    t.sea_surface_temperature_b,
    t.wind_from_direction_average_b,
    t.wind_speed_average_b,
    t.wind_speed_minimum_b,
    t.wind_speed_maximum_b
   FROM (timeseries t
     JOIN measurement m ON ((t.id = m.ts_id)));


ALTER TABLE anmn_nrs_rt_meteo_timeseries_data OWNER TO anmn_nrs_rt_meteo;

--
-- Name: indexed_file; Type: TABLE; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO anmn_nrs_rt_meteo;

--
-- Name: anmn_nrs_rt_meteo_timeseries_map; Type: VIEW; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE VIEW anmn_nrs_rt_meteo_timeseries_map AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.site_code,
    t.platform_code,
    t.deployment_code,
    t.geom,
    t."LATITUDE",
    t."LONGITUDE",
    timezone('UTC'::text, t.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, t.time_coverage_end) AS time_coverage_end,
    t.instrument_nominal_depth,
    t.instrument,
    t.air_temperature_b,
    t.air_pressure_at_sea_level_b,
    t.thickness_of_rainfall_amount_b,
    t.relative_humidity_b,
    t.sea_surface_temperature_b,
    t.wind_from_direction_average_b,
    t.wind_speed_average_b,
    t.wind_speed_minimum_b,
    t.wind_speed_maximum_b
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)));


ALTER TABLE anmn_nrs_rt_meteo_timeseries_map OWNER TO anmn_nrs_rt_meteo;

--
-- Name: databasechangelog; Type: TABLE; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO anmn_nrs_rt_meteo;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO anmn_nrs_rt_meteo;

--
-- Name: file_harvest; Type: TABLE; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO anmn_nrs_rt_meteo;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO anmn_nrs_rt_meteo;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO anmn_nrs_rt_meteo;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO anmn_nrs_rt_meteo;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO anmn_nrs_rt_meteo;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: timeseries_id_seq; Type: SEQUENCE; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE SEQUENCE timeseries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE timeseries_id_seq OWNER TO anmn_nrs_rt_meteo;

--
-- Name: timeseries_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER SEQUENCE timeseries_id_seq OWNED BY timeseries.id;


SET search_path = anmn_nrs_rt_wave, pg_catalog;

--
-- Name: measurement; Type: TABLE; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE TABLE measurement (
    ts_id bigint NOT NULL,
    index bigint NOT NULL,
    "TIME" timestamp with time zone NOT NULL,
    "TIME_quality_control" character(1),
    "VAVH" real,
    "VAVH_quality_control" character(1)
);


ALTER TABLE measurement OWNER TO anmn_nrs_rt_wave;

--
-- Name: COLUMN measurement.index; Type: COMMENT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

COMMENT ON COLUMN measurement.index IS 'index of measurement in netCDF file';


--
-- Name: timeseries; Type: TABLE; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE TABLE timeseries (
    id bigint NOT NULL,
    file_id bigint NOT NULL,
    site_code text NOT NULL,
    platform_code text NOT NULL,
    deployment_code text NOT NULL,
    "LATITUDE" double precision,
    "LATITUDE_quality_control" character(1),
    "LONGITUDE" double precision,
    "LONGITUDE_quality_control" character(1),
    geom public.geometry(Geometry,4326),
    instrument_nominal_depth real,
    site_nominal_depth real,
    instrument text,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    sea_surface_wave_significant_height_b boolean,
    CONSTRAINT timeseries_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE timeseries OWNER TO anmn_nrs_rt_wave;

--
-- Name: anmn_nrs_rt_wave_timeseries_data; Type: VIEW; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE VIEW anmn_nrs_rt_wave_timeseries_data AS
 SELECT m.ts_id AS timeseries_id,
    m.index,
    t.site_code,
    t.platform_code,
    t.deployment_code,
    t.instrument_nominal_depth,
    timezone('UTC'::text, m."TIME") AS "TIME",
    m."TIME_quality_control",
    t."LATITUDE",
    t."LATITUDE_quality_control",
    t."LONGITUDE",
    t."LONGITUDE_quality_control",
    m."VAVH",
    m."VAVH_quality_control",
    t.geom,
    t.sea_surface_wave_significant_height_b
   FROM (timeseries t
     JOIN measurement m ON ((t.id = m.ts_id)));


ALTER TABLE anmn_nrs_rt_wave_timeseries_data OWNER TO anmn_nrs_rt_wave;

--
-- Name: indexed_file; Type: TABLE; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO anmn_nrs_rt_wave;

--
-- Name: anmn_nrs_rt_wave_timeseries_map; Type: VIEW; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE VIEW anmn_nrs_rt_wave_timeseries_map AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.site_code,
    t.platform_code,
    t.deployment_code,
    t.geom,
    t."LATITUDE",
    t."LONGITUDE",
    timezone('UTC'::text, t.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, t.time_coverage_end) AS time_coverage_end,
    t.instrument_nominal_depth,
    t.instrument,
    t.sea_surface_wave_significant_height_b
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)));


ALTER TABLE anmn_nrs_rt_wave_timeseries_map OWNER TO anmn_nrs_rt_wave;

--
-- Name: databasechangelog; Type: TABLE; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO anmn_nrs_rt_wave;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO anmn_nrs_rt_wave;

--
-- Name: file_harvest; Type: TABLE; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO anmn_nrs_rt_wave;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO anmn_nrs_rt_wave;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO anmn_nrs_rt_wave;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO anmn_nrs_rt_wave;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO anmn_nrs_rt_wave;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: timeseries_id_seq; Type: SEQUENCE; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE SEQUENCE timeseries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE timeseries_id_seq OWNER TO anmn_nrs_rt_wave;

--
-- Name: timeseries_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER SEQUENCE timeseries_id_seq OWNED BY timeseries.id;


SET search_path = anmn_ts, pg_catalog;

--
-- Name: measurement; Type: TABLE; Schema: anmn_ts; Owner: anmn_ts
--

CREATE TABLE measurement (
    ts_id bigint NOT NULL,
    index bigint NOT NULL,
    "TIME" timestamp with time zone NOT NULL,
    "TIME_quality_control" character(1),
    "DEPTH" real,
    "DEPTH_quality_control" character(1),
    "TEMP" real,
    "TEMP_quality_control" character(1),
    "CNDC" real,
    "CNDC_quality_control" character(1),
    "PSAL" real,
    "PSAL_quality_control" character(1),
    "PRES" real,
    "PRES_quality_control" character(1),
    "PRES_REL" real,
    "PRES_REL_quality_control" character(1)
);


ALTER TABLE measurement OWNER TO anmn_ts;

--
-- Name: COLUMN measurement.index; Type: COMMENT; Schema: anmn_ts; Owner: anmn_ts
--

COMMENT ON COLUMN measurement.index IS 'index of measurement in netCDF file';


--
-- Name: timeseries; Type: TABLE; Schema: anmn_ts; Owner: anmn_ts
--

CREATE TABLE timeseries (
    id bigint NOT NULL,
    file_id bigint NOT NULL,
    site_code text NOT NULL,
    platform_code text NOT NULL,
    deployment_code text NOT NULL,
    "LATITUDE" double precision,
    "LATITUDE_quality_control" character(1),
    "LONGITUDE" double precision,
    "LONGITUDE_quality_control" character(1),
    geom public.geometry(Geometry,4326),
    instrument_nominal_depth real,
    site_nominal_depth real,
    site_depth_at_deployment real,
    instrument text,
    instrument_serial_number text,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    time_deployment_start timestamp with time zone,
    time_deployment_end timestamp with time zone,
    comment text,
    history text,
    toolbox_version text,
    depth_b boolean,
    sea_water_temperature_b boolean,
    sea_water_electrical_conductivity_b boolean,
    sea_water_salinity_b boolean,
    sea_water_pressure_b boolean,
    sea_water_pressure_due_to_sea_water_b boolean,
    CONSTRAINT timeseries_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE timeseries OWNER TO anmn_ts;

--
-- Name: anmn_ts_timeseries_data; Type: VIEW; Schema: anmn_ts; Owner: anmn_ts
--

CREATE VIEW anmn_ts_timeseries_data AS
 SELECT m.ts_id AS timeseries_id,
    m.index,
    t.site_code,
    t.platform_code,
    t.deployment_code,
    t.instrument_nominal_depth,
    timezone('UTC'::text, m."TIME") AS "TIME",
    m."TIME_quality_control",
    t."LATITUDE",
    t."LATITUDE_quality_control",
    t."LONGITUDE",
    t."LONGITUDE_quality_control",
    m."DEPTH",
    m."DEPTH_quality_control",
    m."TEMP",
    m."TEMP_quality_control",
    m."CNDC",
    m."CNDC_quality_control",
    m."PSAL",
    m."PSAL_quality_control",
    m."PRES",
    m."PRES_quality_control",
    m."PRES_REL",
    m."PRES_REL_quality_control",
    t.geom,
    t.depth_b,
    t.sea_water_temperature_b,
    t.sea_water_electrical_conductivity_b,
    t.sea_water_salinity_b,
    t.sea_water_pressure_b,
    t.sea_water_pressure_due_to_sea_water_b
   FROM (timeseries t
     JOIN measurement m ON ((t.id = m.ts_id)));


ALTER TABLE anmn_ts_timeseries_data OWNER TO anmn_ts;

--
-- Name: indexed_file; Type: TABLE; Schema: anmn_ts; Owner: anmn_ts
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO anmn_ts;

--
-- Name: anmn_ts_timeseries_map; Type: VIEW; Schema: anmn_ts; Owner: anmn_ts
--

CREATE VIEW anmn_ts_timeseries_map AS
 SELECT t.id AS timeseries_id,
    t.site_code,
    t.platform_code,
    t.deployment_code,
    t.geom,
    t."LATITUDE",
    t."LONGITUDE",
    t.instrument_nominal_depth,
    timezone('UTC'::text, t.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, t.time_coverage_end) AS time_coverage_end,
    t.instrument,
    t.instrument_serial_number,
    f.url AS file_url,
    f.size,
    t.depth_b,
    t.sea_water_temperature_b,
    t.sea_water_electrical_conductivity_b,
    t.sea_water_salinity_b,
    t.sea_water_pressure_b,
    t.sea_water_pressure_due_to_sea_water_b
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)));


ALTER TABLE anmn_ts_timeseries_map OWNER TO anmn_ts;

--
-- Name: databasechangelog; Type: TABLE; Schema: anmn_ts; Owner: anmn_ts
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO anmn_ts;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: anmn_ts; Owner: anmn_ts
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO anmn_ts;

--
-- Name: file_harvest; Type: TABLE; Schema: anmn_ts; Owner: anmn_ts
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO anmn_ts;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: anmn_ts; Owner: anmn_ts
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO anmn_ts;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_ts; Owner: anmn_ts
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: anmn_ts; Owner: anmn_ts
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO anmn_ts;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: anmn_ts; Owner: anmn_ts
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO anmn_ts;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_ts; Owner: anmn_ts
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: anmn_ts; Owner: anmn_ts
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO anmn_ts;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_ts; Owner: anmn_ts
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: timeseries_id_seq; Type: SEQUENCE; Schema: anmn_ts; Owner: anmn_ts
--

CREATE SEQUENCE timeseries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE timeseries_id_seq OWNER TO anmn_ts;

--
-- Name: timeseries_id_seq; Type: SEQUENCE OWNED BY; Schema: anmn_ts; Owner: anmn_ts
--

ALTER SEQUENCE timeseries_id_seq OWNED BY timeseries.id;


SET search_path = aodn_dart, pg_catalog;

--
-- Name: dart_records; Type: TABLE; Schema: aodn_dart; Owner: aodn_dart
--

CREATE TABLE dart_records (
    station_id integer NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    type integer NOT NULL,
    height real NOT NULL,
    pkid integer NOT NULL,
    location public.geometry(Point,4326)
);


ALTER TABLE dart_records OWNER TO aodn_dart;

--
-- Name: dart_stations; Type: TABLE; Schema: aodn_dart; Owner: aodn_dart
--

CREATE TABLE dart_stations (
    station_id integer NOT NULL,
    uuid character(36) NOT NULL,
    latitude double precision NOT NULL,
    longitude double precision NOT NULL,
    location public.geometry(Point,4326)
);


ALTER TABLE dart_stations OWNER TO aodn_dart;

--
-- Name: COLUMN dart_stations.uuid; Type: COMMENT; Schema: aodn_dart; Owner: aodn_dart
--

COMMENT ON COLUMN dart_stations.uuid IS 'This is the uuid to the MEST record.';


--
-- Name: dart_latest; Type: VIEW; Schema: aodn_dart; Owner: aodn_dart
--

CREATE VIEW dart_latest AS
 SELECT stations.location,
    records.station_id,
    records."timestamp",
    records.type,
    records.height
   FROM dart_records records,
    dart_stations stations,
    ( SELECT records_1.station_id,
            records_1."timestamp",
            max(records_1.type) AS type
           FROM dart_records records_1
          WHERE ((records_1."timestamp" > '2010-07-27 00:00:00'::timestamp without time zone) AND (date_part('minute'::text, records_1."timestamp") = ANY (ARRAY[(0)::double precision, (30)::double precision])) AND (date_part('second'::text, records_1."timestamp") = (0)::double precision))
          GROUP BY records_1.station_id, records_1."timestamp"
          ORDER BY records_1.station_id, records_1."timestamp") q
  WHERE ((q.station_id = records.station_id) AND (q."timestamp" = records."timestamp") AND (q.type = records.type) AND (records.station_id = stations.station_id));


ALTER TABLE dart_latest OWNER TO aodn_dart;

--
-- Name: dart_records_pkid_seq; Type: SEQUENCE; Schema: aodn_dart; Owner: aodn_dart
--

CREATE SEQUENCE dart_records_pkid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dart_records_pkid_seq OWNER TO aodn_dart;

--
-- Name: dart_records_pkid_seq; Type: SEQUENCE OWNED BY; Schema: aodn_dart; Owner: aodn_dart
--

ALTER SEQUENCE dart_records_pkid_seq OWNED BY dart_records.pkid;


--
-- Name: databasechangelog; Type: TABLE; Schema: aodn_dart; Owner: aodn_dart
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO aodn_dart;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: aodn_dart; Owner: aodn_dart
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO aodn_dart;

--
-- Name: maxtype; Type: VIEW; Schema: aodn_dart; Owner: aodn_dart
--

CREATE VIEW maxtype AS
 SELECT stations.location,
    stations.station_id,
    records."timestamp",
    max(records.type) AS type
   FROM dart_records records,
    dart_stations stations
  WHERE ((records."timestamp" < '2010-07-29 00:00:00'::timestamp without time zone) AND (records."timestamp" > '2010-07-27 00:00:00'::timestamp without time zone) AND (date_part('minute'::text, records."timestamp") = ANY (ARRAY[(0)::double precision, (30)::double precision])) AND (date_part('second'::text, records."timestamp") = (0)::double precision))
  GROUP BY stations.station_id, records."timestamp", stations.location
  ORDER BY stations.station_id, records."timestamp";


ALTER TABLE maxtype OWNER TO aodn_dart;

SET search_path = aodn_imas_fluorometry, pg_catalog;

--
-- Name: deployments; Type: TABLE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE TABLE deployments (
    file_id integer NOT NULL,
    time_coverage_start character varying(35),
    time_coverage_end character varying(35),
    platform_code character varying(20),
    vessel_name text,
    institution text,
    title text
);


ALTER TABLE deployments OWNER TO aodn_imas_fluorometry;

--
-- Name: measurements; Type: TABLE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE TABLE measurements (
    measurement_id bigint NOT NULL,
    file_id integer NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "TEMP" double precision,
    "PSAL" double precision,
    "PAR" double precision,
    "FoL" double precision,
    "FmL" double precision,
    "FvL" double precision,
    "Fv_Fm_ratio" double precision,
    "SigL" double precision,
    "pL" double precision,
    "TauL" double precision,
    "GAIN" double precision,
    "LATITUDE_quality_control" integer,
    "LONGITUDE_quality_control" integer,
    "TEMP_quality_control" integer,
    "PSAL_quality_control" integer,
    "PAR_quality_control" integer,
    "FoL_quality_control" integer,
    "FmL_quality_control" integer,
    "FvL_quality_control" integer,
    "Fv_Fm_ratio_quality_control" integer,
    "SigL_quality_control" integer,
    "pL_quality_control" integer,
    "TauL_quality_control" integer,
    "GAIN_quality_control" integer,
    geom public.geometry(Geometry,4326),
    CONSTRAINT measurements_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements OWNER TO aodn_imas_fluorometry;

--
-- Name: aodn_imas_fluorometry_data; Type: VIEW; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE VIEW aodn_imas_fluorometry_data AS
 SELECT m.measurement_id,
    m.file_id,
    timezone('UTC'::text, m."TIME") AS "TIME",
    d.vessel_name,
    m."LATITUDE",
    m."LONGITUDE",
    m."TEMP",
    m."PSAL",
    m."PAR",
    m."FoL",
    m."FmL",
    m."FvL",
    m."Fv_Fm_ratio",
    m."SigL",
    m."pL",
    m."TauL",
    m."GAIN",
    m."LATITUDE_quality_control",
    m."LONGITUDE_quality_control",
    m."TEMP_quality_control",
    m."PSAL_quality_control",
    m."PAR_quality_control",
    m."FoL_quality_control",
    m."FmL_quality_control",
    m."FvL_quality_control",
    m."Fv_Fm_ratio_quality_control",
    m."SigL_quality_control",
    m."pL_quality_control",
    m."TauL_quality_control",
    m."GAIN_quality_control",
    m.geom
   FROM (measurements m
     JOIN deployments d ON ((m.file_id = d.file_id)))
  ORDER BY m.file_id, m."TIME";


ALTER TABLE aodn_imas_fluorometry_data OWNER TO aodn_imas_fluorometry;

--
-- Name: aodn_imas_fluorometry_map; Type: TABLE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE TABLE aodn_imas_fluorometry_map (
    file_id integer NOT NULL,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    vessel_name character varying(255),
    geom public.geometry(Geometry,4326),
    colour character varying(7),
    url text,
    size double precision,
    CONSTRAINT aodn_imas_fluorometry_map_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE aodn_imas_fluorometry_map OWNER TO aodn_imas_fluorometry;

--
-- Name: attribute; Type: TABLE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO aodn_imas_fluorometry;

--
-- Name: databasechangelog; Type: TABLE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO aodn_imas_fluorometry;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO aodn_imas_fluorometry;

--
-- Name: file_harvest; Type: TABLE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8),
    last_change_run integer
);


ALTER TABLE file_harvest OWNER TO aodn_imas_fluorometry;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO aodn_imas_fluorometry;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO aodn_imas_fluorometry;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO aodn_imas_fluorometry;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision
);


ALTER TABLE indexed_file OWNER TO aodn_imas_fluorometry;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO aodn_imas_fluorometry;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements_measurement_id_seq; Type: SEQUENCE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE SEQUENCE measurements_measurement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_id_seq OWNER TO aodn_imas_fluorometry;

--
-- Name: measurements_measurement_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

ALTER SEQUENCE measurements_measurement_id_seq OWNED BY measurements.measurement_id;


--
-- Name: variable; Type: TABLE; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO aodn_imas_fluorometry;

SET search_path = aodn_mhl_sst, pg_catalog;

--
-- Name: deployments; Type: TABLE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE TABLE deployments (
    file_id integer NOT NULL,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    title character varying(500),
    platform_code character varying(20),
    institution character varying(20),
    latitude character varying(20),
    longitude character varying(20)
);


ALTER TABLE deployments OWNER TO aodn_mhl_sst;

--
-- Name: measurements; Type: TABLE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE TABLE measurements (
    measurement_id bigint NOT NULL,
    file_id integer NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "SST" real,
    geom public.geometry(Geometry,4326),
    CONSTRAINT measurements_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements OWNER TO aodn_mhl_sst;

--
-- Name: aodn_mhl_sst_data; Type: VIEW; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE VIEW aodn_mhl_sst_data AS
 SELECT measurements.file_id,
    d.platform_code,
    measurements.geom,
    timezone('UTC'::text, measurements."TIME") AS "TIME",
    measurements."LATITUDE",
    measurements."LONGITUDE",
    measurements."SST"
   FROM (measurements
     JOIN deployments d ON ((d.file_id = measurements.file_id)))
  ORDER BY measurements.file_id, (timezone('UTC'::text, measurements."TIME"));


ALTER TABLE aodn_mhl_sst_data OWNER TO aodn_mhl_sst;

--
-- Name: indexed_file; Type: TABLE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision
);


ALTER TABLE indexed_file OWNER TO aodn_mhl_sst;

--
-- Name: aodn_mhl_sst_map; Type: VIEW; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE VIEW aodn_mhl_sst_map AS
 WITH a AS (
         SELECT DISTINCT m.file_id,
            m."LATITUDE",
            m."LONGITUDE",
            m.geom
           FROM measurements m
        ), b AS (
         SELECT d.file_id,
            replace((f.url)::text, 'dodsC'::text, 'fileServer'::text) AS url,
            f.size,
            timezone('UTC'::text, d.time_coverage_start) AS time_coverage_start,
            timezone('UTC'::text, d.time_coverage_end) AS time_coverage_end,
            d.platform_code,
            d.latitude,
            d.longitude
           FROM (deployments d
             JOIN indexed_file f ON ((d.file_id = f.id)))
        )
 SELECT b.file_id,
    b.url,
    b.size,
    b.time_coverage_start,
    b.time_coverage_end,
    b.platform_code,
    a."LATITUDE",
    a."LONGITUDE",
    a.geom
   FROM (b
     JOIN a ON ((a.file_id = b.file_id)))
  ORDER BY b.platform_code, (timezone('UTC'::text, b.time_coverage_start));


ALTER TABLE aodn_mhl_sst_map OWNER TO aodn_mhl_sst;

--
-- Name: attribute; Type: TABLE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO aodn_mhl_sst;

--
-- Name: databasechangelog; Type: TABLE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO aodn_mhl_sst;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO aodn_mhl_sst;

--
-- Name: file; Type: TABLE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO aodn_mhl_sst;

--
-- Name: file_harvest; Type: TABLE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8),
    last_change_run integer
);


ALTER TABLE file_harvest OWNER TO aodn_mhl_sst;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO aodn_mhl_sst;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO aodn_mhl_sst;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO aodn_mhl_sst;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO aodn_mhl_sst;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements_measurement_id_seq; Type: SEQUENCE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE SEQUENCE measurements_measurement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_id_seq OWNER TO aodn_mhl_sst;

--
-- Name: measurements_measurement_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

ALTER SEQUENCE measurements_measurement_id_seq OWNED BY measurements.measurement_id;


--
-- Name: variable; Type: TABLE; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO aodn_mhl_sst;

SET search_path = aodn_nsw_oeh, pg_catalog;

--
-- Name: indexed_file; Type: TABLE; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO aodn_nsw_oeh;

--
-- Name: survey_metadata; Type: TABLE; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE TABLE survey_metadata (
    id bigint NOT NULL,
    file_id bigint NOT NULL,
    location text NOT NULL,
    survey_date date NOT NULL,
    source text,
    name text,
    coll_name text,
    authority text,
    habitat text,
    comments text,
    coll_date text,
    status text,
    xyz_file text,
    vessel text,
    z_datum text,
    z_app text,
    z_tech text,
    geom public.geometry(Geometry,4326),
    CONSTRAINT survey_metadata_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE survey_metadata OWNER TO aodn_nsw_oeh;

--
-- Name: aodn_nsw_oeh_bathy_map; Type: VIEW; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE VIEW aodn_nsw_oeh_bathy_map AS
 WITH files AS (
         SELECT indexed_file.id,
            indexed_file.job_id,
            indexed_file.url,
            indexed_file.created,
            indexed_file.modified,
            indexed_file.first_indexed,
            indexed_file.last_indexed,
            indexed_file.last_indexed_run,
            indexed_file.size,
            indexed_file.deleted,
            "substring"((indexed_file.url)::text, '/NSWOEH_[[:digit:]]+_([[:alnum:]]+)_[^/]+$'::text) AS location,
            ("substring"((indexed_file.url)::text, '/NSWOEH_([[:digit:]]+)_[^/]+$'::text))::date AS survey_date,
            "substring"((indexed_file.url)::text, '_(MB)_'::text) AS survey_methods,
            "substring"((indexed_file.url)::text, '_(ScientificRigour|SHP|BTY|BKS)'::text) AS file_type,
            "substring"((indexed_file.url)::text, '\.([^.]+)$'::text) AS extension
           FROM indexed_file
          WHERE (NOT indexed_file.deleted)
        )
 SELECT f.url,
    f.location,
    f.survey_date,
    f.survey_methods,
        CASE f.file_type
            WHEN 'BTY'::text THEN 'bathymetry'::text
            WHEN 'BKS'::text THEN 'backscatter'::text
            WHEN 'SHP'::text THEN 'coverage shapefile'::text
            ELSE f.file_type
        END AS file_type,
    f.extension,
    m.name AS survey_name,
    m.authority,
    m.geom
   FROM (files f
     JOIN survey_metadata m USING (location, survey_date))
  WHERE (f.survey_methods ~~ '%MB%'::text)
  ORDER BY f.url;


ALTER TABLE aodn_nsw_oeh_bathy_map OWNER TO aodn_nsw_oeh;

--
-- Name: databasechangelog; Type: TABLE; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO aodn_nsw_oeh;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO aodn_nsw_oeh;

--
-- Name: file_harvest; Type: TABLE; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO aodn_nsw_oeh;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO aodn_nsw_oeh;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO aodn_nsw_oeh;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO aodn_nsw_oeh;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO aodn_nsw_oeh;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: survey_metadata_id_seq; Type: SEQUENCE; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE SEQUENCE survey_metadata_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE survey_metadata_id_seq OWNER TO aodn_nsw_oeh;

--
-- Name: survey_metadata_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER SEQUENCE survey_metadata_id_seq OWNED BY survey_metadata.id;


SET search_path = aodn_ran_ctd, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO aodn_ran_ctd;

--
-- Name: databasechangelog; Type: TABLE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO aodn_ran_ctd;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO aodn_ran_ctd;

--
-- Name: deployments; Type: TABLE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE TABLE deployments (
    file_id integer NOT NULL,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    geospatial_vertical_min character varying(20),
    geospatial_vertical_max character varying(20),
    cruise_id character varying(20)
);


ALTER TABLE deployments OWNER TO aodn_ran_ctd;

--
-- Name: file; Type: TABLE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO aodn_ran_ctd;

--
-- Name: file_harvest; Type: TABLE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8),
    last_change_run integer
);


ALTER TABLE file_harvest OWNER TO aodn_ran_ctd;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO aodn_ran_ctd;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO aodn_ran_ctd;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO aodn_ran_ctd;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision
);


ALTER TABLE indexed_file OWNER TO aodn_ran_ctd;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO aodn_ran_ctd;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements; Type: TABLE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE TABLE measurements (
    measurement_id bigint NOT NULL,
    file_id integer NOT NULL,
    "time" timestamp with time zone,
    time_qc_flag character varying(1),
    latitude double precision,
    longitude double precision,
    position_qc_flag character varying(1),
    pressure double precision,
    profile integer,
    salinity double precision,
    salinity_qc_flag character varying(1),
    salinity_sd_test character varying(1),
    salinity_whole_profile_flag character varying(1),
    temperature double precision,
    temperature_qc_flag character varying(1),
    temperature_sd_test character varying(1),
    temperature_whole_profile_flag character varying(1),
    geom public.geometry(Geometry,4326),
    CONSTRAINT measurements_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements OWNER TO aodn_ran_ctd;

--
-- Name: measurements_measurement_id_seq; Type: SEQUENCE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE SEQUENCE measurements_measurement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_id_seq OWNER TO aodn_ran_ctd;

--
-- Name: measurements_measurement_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

ALTER SEQUENCE measurements_measurement_id_seq OWNED BY measurements.measurement_id;


--
-- Name: variable; Type: TABLE; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO aodn_ran_ctd;

SET search_path = aodn_wamsi_sediment, pg_catalog;

--
-- Name: aodn_wamsi_sediment_data; Type: TABLE; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

CREATE TABLE aodn_wamsi_sediment_data (
    measurement_id bigint NOT NULL,
    file_id integer NOT NULL,
    grab_id character varying(254),
    lab_id character varying(254),
    sampling character varying(254),
    lat numeric,
    lon numeric,
    depth numeric,
    textural_c character varying(254),
    sediment_n character varying(254),
    mode character varying(254),
    mean character varying(254),
    sorting character varying(254),
    skewness character varying(254),
    kurtosis character varying(254),
    mean_1 numeric,
    sorting_1 numeric,
    skewness_1 numeric,
    kurtosis_1 numeric,
    mean_2 numeric,
    sorting_2 numeric,
    skewness_2 numeric,
    kurtosis_2 numeric,
    gravel numeric,
    sand numeric,
    mud numeric,
    v_coarse_s numeric,
    coarse_sand numeric,
    medium_sand numeric,
    fine_sand numeric,
    v_fine_sand numeric,
    geom public.geometry(Geometry,4326),
    CONSTRAINT aodn_wamsi_sediment_data_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE aodn_wamsi_sediment_data OWNER TO aodn_wamsi_sediment;

--
-- Name: aodn_wamsi_sediment_data_measurement_id_seq; Type: SEQUENCE; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

CREATE SEQUENCE aodn_wamsi_sediment_data_measurement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE aodn_wamsi_sediment_data_measurement_id_seq OWNER TO aodn_wamsi_sediment;

--
-- Name: aodn_wamsi_sediment_data_measurement_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER SEQUENCE aodn_wamsi_sediment_data_measurement_id_seq OWNED BY aodn_wamsi_sediment_data.measurement_id;


--
-- Name: databasechangelog; Type: TABLE; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO aodn_wamsi_sediment;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO aodn_wamsi_sediment;

--
-- Name: file_harvest; Type: TABLE; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8),
    last_change_run integer
);


ALTER TABLE file_harvest OWNER TO aodn_wamsi_sediment;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO aodn_wamsi_sediment;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO aodn_wamsi_sediment;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO aodn_wamsi_sediment;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision
);


ALTER TABLE indexed_file OWNER TO aodn_wamsi_sediment;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO aodn_wamsi_sediment;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


SET search_path = aus_phyto_db_ongoing, pg_catalog;

--
-- Name: apd_data; Type: TABLE; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

CREATE TABLE apd_data (
    "ID" double precision,
    "RECORD_ID" text,
    "PROJECT_ID" text,
    "SAMPLE_ID" text,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "LOCATION" text,
    "SAMPLE_TIME_UTC" timestamp with time zone,
    "SAMPLE_YEAR" text,
    "SAMPLE_MONTH" text,
    "SAMPLE_DAY" text,
    "DATE_RESOLUTION" text,
    "SAMPLE_DEPTH" double precision,
    "FUNCTIONAL_GROUP" text,
    "TAXON_NAME" text,
    "FAMILY" text,
    "GENUS" text,
    "SPECIES" text,
    "CELLS_L" double precision,
    "PRESENCE_ABSENCE" double precision,
    "BIOVOLUME_SHAPE" text,
    "BIOVOLUME_UM3_L" double precision,
    geom public.geometry(Geometry,4326),
    CONSTRAINT apd_data_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE apd_data OWNER TO aus_phyto_db_ongoing;

--
-- Name: apd_metadata; Type: TABLE; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

CREATE TABLE apd_metadata (
    "PROJECT_ID" text NOT NULL,
    "PROJECT_DESCRIPTION" text,
    "CUSTODIAN_DETAILS" text,
    "LOCATION" text,
    "DATE_RESOLUTION" text,
    "START_DATE" text,
    "END_DATE" text,
    "NO_SAMPLES" integer,
    "NO_RECORDS" integer,
    "RESOLUTION" text,
    "SAMPLE_METHOD" text,
    "IDENTIFICATION_METHOD" text,
    "MAGNIFICATION" text,
    "PRESERVATIVE" text,
    "ACKNOWLEDGEMENT" text,
    "CITATION" text
);


ALTER TABLE apd_metadata OWNER TO aus_phyto_db_ongoing;

--
-- Name: aus_phyto_db_data; Type: VIEW; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

CREATE VIEW aus_phyto_db_data AS
 SELECT data."ID",
    data."RECORD_ID",
    data."PROJECT_ID",
    data."SAMPLE_ID",
    data."LATITUDE",
    data."LONGITUDE",
    data."LOCATION",
    timezone('UTC'::text, data."SAMPLE_TIME_UTC") AS "SAMPLE_TIME_UTC",
    data."SAMPLE_YEAR",
    data."SAMPLE_MONTH",
    data."SAMPLE_DAY",
    data."DATE_RESOLUTION",
    data."SAMPLE_DEPTH",
    data."FUNCTIONAL_GROUP",
    data."TAXON_NAME",
    data."FAMILY",
    data."GENUS",
    data."SPECIES",
    data."CELLS_L",
        CASE
            WHEN (data."PRESENCE_ABSENCE" = (1)::double precision) THEN true
            ELSE false
        END AS "PRESENCE_ABSENCE",
    data."BIOVOLUME_SHAPE",
    data."BIOVOLUME_UM3_L",
    data.geom,
    meta."PROJECT_DESCRIPTION",
    meta."CUSTODIAN_DETAILS",
    meta."START_DATE",
    meta."END_DATE",
    meta."NO_SAMPLES",
    meta."NO_RECORDS",
    meta."RESOLUTION",
    meta."SAMPLE_METHOD",
    meta."IDENTIFICATION_METHOD",
    meta."MAGNIFICATION",
    meta."PRESERVATIVE",
    meta."CITATION"
   FROM (apd_data data
     FULL JOIN apd_metadata meta ON ((data."PROJECT_ID" = meta."PROJECT_ID")));


ALTER TABLE aus_phyto_db_data OWNER TO aus_phyto_db_ongoing;

--
-- Name: aus_phyto_db_map; Type: TABLE; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

CREATE TABLE aus_phyto_db_map (
    "LOCATION" text,
    "SAMPLE_TIME_UTC" timestamp with time zone,
    "FUNCTIONAL_GROUP" text,
    geom public.geometry(Geometry,4326),
    no_unique_species_found bigint,
    "PROJECT_DESCRIPTION" text,
    CONSTRAINT aus_phyto_db_map_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE aus_phyto_db_map OWNER TO aus_phyto_db_ongoing;

--
-- Name: databasechangelog; Type: TABLE; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO aus_phyto_db_ongoing;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO aus_phyto_db_ongoing;

SET search_path = auv, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO auv;

--
-- Name: measurements_b; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE measurements_b (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "DEPTH" real,
    "CDOM" real,
    "CPHL" real,
    "OPBS" real,
    campaign_id character varying(50),
    dive_name character varying(150),
    geom public.geometry(Geometry,4326)
);


ALTER TABLE measurements_b OWNER TO auv;

--
-- Name: auv_trajectory_b_data; Type: VIEW; Schema: auv; Owner: auv
--

CREATE VIEW auv_trajectory_b_data AS
 SELECT measurements_b.file_id,
    measurements_b.campaign_id AS campaign_name,
    measurements_b.dive_name,
    measurements_b."TIME",
    measurements_b."LATITUDE",
    measurements_b."LONGITUDE",
    measurements_b."DEPTH",
    measurements_b."CDOM",
    measurements_b."CPHL",
    measurements_b."OPBS",
    (measurements_b."CDOM" IS NOT NULL) AS "CDOM_b",
    (measurements_b."CPHL" IS NOT NULL) AS "CPHL_b",
    (measurements_b."OPBS" IS NOT NULL) AS "OPBS_b",
    measurements_b.geom
   FROM measurements_b
  ORDER BY measurements_b."TIME";


ALTER TABLE auv_trajectory_b_data OWNER TO auv;

--
-- Name: matchup_dive_url; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE matchup_dive_url (
    file_id integer,
    url character varying(512),
    dive_name character varying(150),
    size double precision
);


ALTER TABLE matchup_dive_url OWNER TO auv;

--
-- Name: visualisation_wms; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE visualisation_wms (
    dive_name character varying(150) NOT NULL,
    time_coverage_start timestamp without time zone,
    time_coverage_end timestamp without time zone,
    campaign_name character varying(50),
    colour text,
    "CDOM_b" boolean,
    "CPHL_b" boolean,
    "OPBS_b" boolean,
    "PSAL_b" boolean,
    "TEMP_b" boolean,
    geom public.geometry(Geometry,4326)
);


ALTER TABLE visualisation_wms OWNER TO auv;

--
-- Name: auv_trajectory_map; Type: VIEW; Schema: auv; Owner: auv
--

CREATE VIEW auv_trajectory_map AS
 SELECT b.file_id,
    b.url,
    b.size,
    a.campaign_name,
    a.dive_name,
    a.time_coverage_start,
    a.time_coverage_end,
    a.colour,
    a."CDOM_b",
    a."CPHL_b",
    a."OPBS_b",
    a."PSAL_b",
    a."TEMP_b",
    public.st_simplify(a.geom, (1000)::double precision) AS geom
   FROM (visualisation_wms a
     JOIN matchup_dive_url b ON (((a.dive_name)::text = (b.dive_name)::text)))
  ORDER BY a.time_coverage_start;


ALTER TABLE auv_trajectory_map OWNER TO auv;

--
-- Name: measurements_st; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE measurements_st (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "DEPTH" real,
    "PSAL" real,
    "TEMP" real,
    campaign_id character varying(50),
    dive_name character varying(150),
    geom public.geometry(Geometry,4326)
);


ALTER TABLE measurements_st OWNER TO auv;

--
-- Name: auv_trajectory_st_data; Type: VIEW; Schema: auv; Owner: auv
--

CREATE VIEW auv_trajectory_st_data AS
 SELECT measurements_st.file_id,
    measurements_st.campaign_id AS campaign_name,
    measurements_st.dive_name,
    measurements_st."TIME",
    measurements_st."LATITUDE",
    measurements_st."LONGITUDE",
    measurements_st."DEPTH",
    measurements_st."PSAL",
    measurements_st."TEMP",
    (measurements_st."PSAL" IS NOT NULL) AS "PSAL_b",
    (measurements_st."TEMP" IS NOT NULL) AS "TEMP_b",
    measurements_st.geom
   FROM measurements_st
  ORDER BY measurements_st."TIME";


ALTER TABLE auv_trajectory_st_data OWNER TO auv;

--
-- Name: campaign_names; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE campaign_names (
    campaign_name character varying(50) NOT NULL,
    colour text
);


ALTER TABLE campaign_names OWNER TO auv;

--
-- Name: databasechangelog; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO auv;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO auv;

--
-- Name: deployments; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE deployments (
    deploy_id bigint NOT NULL,
    file_id integer NOT NULL,
    dive_name character varying(150),
    campaign_name character varying(50),
    author_email character varying(50),
    cdm_data_type character varying(50),
    local_time_zone character varying(50),
    geospatial_lat_min character varying(50),
    time_coverage_end character varying(50),
    keywords character varying(150),
    source character varying(50),
    time_coverage_start character varying(50),
    geospatial_lat_max character varying(50),
    netcdf_version character varying(50),
    data_centre character varying(50),
    citation character varying(150),
    date_created character varying(50),
    author character varying(50),
    title character varying(50),
    "references" character varying(50),
    principal_investigator character varying(50),
    acknowledgement character varying(400),
    quality_control_indicator character varying(50),
    platform_code character varying(50),
    history character varying(100),
    quality_control_set character varying(50),
    institution character varying(50),
    geospatial_lon_max character varying(50),
    distribution_statement character varying(400),
    conventions character varying(50),
    site_code character varying(50),
    project character varying(50),
    geospatial_vertical_min character varying(50),
    institution_references character varying(50),
    geospatial_lon_min character varying(50),
    geospatial_vertical_max character varying(50),
    naming_authority character varying(50)
);


ALTER TABLE deployments OWNER TO auv;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE; Schema: auv; Owner: auv
--

CREATE SEQUENCE deployments_deploy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deployments_deploy_id_seq OWNER TO auv;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE OWNED BY; Schema: auv; Owner: auv
--

ALTER SEQUENCE deployments_deploy_id_seq OWNED BY deployments.deploy_id;


--
-- Name: file; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO auv;

--
-- Name: file_harvest; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO auv;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: auv; Owner: auv
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO auv;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: auv; Owner: auv
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO auv;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: auv; Owner: auv
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO auv;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: auv; Owner: auv
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO auv;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: auv; Owner: auv
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO auv;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: auv; Owner: auv
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements_b_measurement_seq; Type: SEQUENCE; Schema: auv; Owner: auv
--

CREATE SEQUENCE measurements_b_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_b_measurement_seq OWNER TO auv;

--
-- Name: measurements_b_measurement_seq; Type: SEQUENCE OWNED BY; Schema: auv; Owner: auv
--

ALTER SEQUENCE measurements_b_measurement_seq OWNED BY measurements_b.measurement;


--
-- Name: measurements_merged_data; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE measurements_merged_data (
    dive_name character varying(150),
    "TIME" timestamp without time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "DEPTH" real,
    "CDOM" real,
    "CPHL" real,
    "OPBS" real,
    "PSAL" real,
    "TEMP" real,
    geom public.geometry(Geometry,4326)
);


ALTER TABLE measurements_merged_data OWNER TO auv;

--
-- Name: measurements_st_measurement_seq; Type: SEQUENCE; Schema: auv; Owner: auv
--

CREATE SEQUENCE measurements_st_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_st_measurement_seq OWNER TO auv;

--
-- Name: measurements_st_measurement_seq; Type: SEQUENCE OWNED BY; Schema: auv; Owner: auv
--

ALTER SEQUENCE measurements_st_measurement_seq OWNED BY measurements_st.measurement;


--
-- Name: table_master; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE table_master (
    dive_name character varying(150),
    "TIME" timestamp without time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "DEPTH" real,
    geom public.geometry(Geometry,4326)
);


ALTER TABLE table_master OWNER TO auv;

--
-- Name: variable; Type: TABLE; Schema: auv; Owner: auv
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO auv;

SET search_path = auv_viewer_track, pg_catalog;

--
-- Name: auv_images; Type: TABLE; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE TABLE auv_images (
    pkid bigint NOT NULL,
    file_id integer,
    fk_auv_tracks integer,
    campaign_code text,
    dive_code text,
    image_filename text,
    longitude double precision,
    latitude double precision,
    image_width double precision,
    depth_sensor double precision,
    altitude_sensor double precision,
    depth double precision,
    sea_water_temperature double precision,
    sea_water_salinity double precision,
    chlorophyll_concentration_in_sea_water double precision,
    backscattering_ratio double precision,
    colored_dissolved_organic_matter double precision,
    "time" timestamp with time zone,
    cluster_tag integer,
    up_left_lon double precision,
    up_left_lat double precision,
    up_right_lon double precision,
    up_right_lat double precision,
    low_right_lon double precision,
    low_right_lat double precision,
    low_left_lon double precision,
    low_left_lat double precision,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.st_ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'POLYGON'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.st_srid(geom) = 4326))
);


ALTER TABLE auv_images OWNER TO auv_viewer_track;

--
-- Name: auv_images_pkid_seq; Type: SEQUENCE; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE SEQUENCE auv_images_pkid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auv_images_pkid_seq OWNER TO auv_viewer_track;

--
-- Name: auv_images_pkid_seq; Type: SEQUENCE OWNED BY; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER SEQUENCE auv_images_pkid_seq OWNED BY auv_images.pkid;


--
-- Name: auv_tracks; Type: TABLE; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE TABLE auv_tracks (
    pkid bigint NOT NULL,
    file_id integer,
    dive_number integer,
    dive_name text,
    dive_metadata_uuid text,
    facility_code text,
    campaign_code text,
    dive_code text,
    distance_covered_in_m real,
    number_of_images integer,
    image_path text,
    abstract text,
    platform_code text,
    pattern text,
    dive_report_path text,
    kml_path text,
    geospatial_lat_min real,
    geospatial_lon_min real,
    geospatial_lat_max real,
    geospatial_lon_max real,
    geospatial_vertical_min real,
    geospatial_vertical_max real,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.st_ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'LINESTRING'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.st_srid(geom) = 4326))
);


ALTER TABLE auv_tracks OWNER TO auv_viewer_track;

--
-- Name: auv_images_vw; Type: VIEW; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE VIEW auv_images_vw AS
 SELECT auv_images.fk_auv_tracks,
    auv_tracks.dive_code AS site_code,
    auv_tracks.image_path AS image_folder,
    auv_tracks.dive_name AS dive_code_name,
    auv_tracks.campaign_code,
    auv_images.image_filename,
    auv_images.cluster_tag,
    auv_images.longitude,
    auv_images.latitude,
    auv_images.image_width,
    auv_images.depth_sensor,
    auv_images.altitude_sensor,
    auv_images.depth,
    auv_images.sea_water_temperature,
    auv_images.sea_water_salinity,
    auv_images.chlorophyll_concentration_in_sea_water,
    auv_images.backscattering_ratio,
    auv_images.colored_dissolved_organic_matter,
    timezone('UTC'::text, auv_images."time") AS "time",
    auv_images.geom
   FROM auv_images,
    auv_tracks
  WHERE (auv_images.fk_auv_tracks = auv_tracks.pkid)
  ORDER BY auv_images."time";


ALTER TABLE auv_images_vw OWNER TO auv_viewer_track;

--
-- Name: auv_reporting; Type: TABLE; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE TABLE auv_reporting (
    campaign_code text,
    campaign_metadata_uuid text,
    dive_code text,
    dive_code_metadata_uuid text,
    data_on_portal text,
    data_on_auv_viewer text,
    data_folder text,
    geotiff text,
    mesh text,
    multibeam text,
    cdom text,
    cphl text,
    opbs text,
    psal text,
    temp text,
    csv_track_file text,
    dive_report text
);


ALTER TABLE auv_reporting OWNER TO auv_viewer_track;

--
-- Name: auv_tracks_pkid_seq; Type: SEQUENCE; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE SEQUENCE auv_tracks_pkid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auv_tracks_pkid_seq OWNER TO auv_viewer_track;

--
-- Name: auv_tracks_pkid_seq; Type: SEQUENCE OWNED BY; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER SEQUENCE auv_tracks_pkid_seq OWNED BY auv_tracks.pkid;


--
-- Name: auv_tracks_vw; Type: VIEW; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE VIEW auv_tracks_vw AS
 SELECT auv_tracks.pkid,
    auv_tracks.facility_code,
    auv_tracks.campaign_code,
    auv_tracks.dive_code AS site_code,
    auv_tracks.image_path AS image_folder,
    auv_tracks.abstract,
    auv_tracks.platform_code,
    auv_tracks.dive_number,
    auv_tracks.dive_name AS dive_code_name,
    auv_tracks.pattern,
    auv_tracks.number_of_images,
    auv_tracks.distance_covered_in_m AS distance,
    NULL::text AS dive_notes,
    auv_tracks.dive_report_path AS dive_report,
    auv_tracks.kml_path AS kml,
    auv_tracks.dive_metadata_uuid AS metadata_uuid,
    auv_tracks.geospatial_lat_min,
    auv_tracks.geospatial_lon_min,
    auv_tracks.geospatial_lat_max,
    auv_tracks.geospatial_lon_max,
    auv_tracks.geospatial_vertical_min,
    auv_tracks.geospatial_vertical_max,
    timezone('UTC'::text, auv_tracks.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, auv_tracks.time_coverage_end) AS time_coverage_end,
    (public.st_dump(auv_tracks.geom)).geom AS geom
   FROM auv_tracks;


ALTER TABLE auv_tracks_vw OWNER TO auv_viewer_track;

--
-- Name: databasechangelog; Type: TABLE; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO auv_viewer_track;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO auv_viewer_track;

--
-- Name: file_harvest; Type: TABLE; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO auv_viewer_track;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO auv_viewer_track;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO auv_viewer_track;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO auv_viewer_track;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO auv_viewer_track;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO auv_viewer_track;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


SET search_path = dw_aatams_acoustic, pg_catalog;

--
-- Name: aatams_acoustic_detections_data; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE aatams_acoustic_detections_data (
    pkid bigint NOT NULL,
    detection_id bigint NOT NULL,
    installation_name character varying(255),
    station_name character varying(255),
    station_longitude double precision,
    station_latitude double precision,
    receiver_name character varying(255),
    detection_date timestamp with time zone,
    transmitter_id character varying(255),
    transmitter_project_name character varying(255),
    common_name character varying(255),
    scientific_name character varying(255),
    release_date timestamp with time zone,
    release_locality character varying(255),
    release_longitude double precision,
    release_latitude double precision,
    sex character varying(255),
    measurements text,
    geom public.geometry(Geometry,4326),
    CONSTRAINT aatams_acoustic_detections_data_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE aatams_acoustic_detections_data OWNER TO dw_aatams_acoustic;

--
-- Name: aatams_acoustic_detections_data_pkid_seq; Type: SEQUENCE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE SEQUENCE aatams_acoustic_detections_data_pkid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE aatams_acoustic_detections_data_pkid_seq OWNER TO dw_aatams_acoustic;

--
-- Name: aatams_acoustic_detections_data_pkid_seq; Type: SEQUENCE OWNED BY; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER SEQUENCE aatams_acoustic_detections_data_pkid_seq OWNED BY aatams_acoustic_detections_data.pkid;


--
-- Name: aatams_acoustic_detections_map; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE aatams_acoustic_detections_map (
    id bigint NOT NULL,
    installation_name character varying(255),
    station_name character varying(255),
    transmitter_id character varying(255),
    no_detections_at_station bigint,
    transmitter_project_name character varying(255),
    common_name character varying(255),
    scientific_name character varying(255),
    release_locality character varying(255),
    sex character varying(255),
    first_detection_date date,
    last_detection_date date,
    colour text,
    geom public.geometry(Geometry,4326),
    CONSTRAINT aatams_acoustic_detections_map_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE aatams_acoustic_detections_map OWNER TO dw_aatams_acoustic;

--
-- Name: aatams_acoustic_detections_map_id_seq; Type: SEQUENCE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE SEQUENCE aatams_acoustic_detections_map_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE aatams_acoustic_detections_map_id_seq OWNER TO dw_aatams_acoustic;

--
-- Name: aatams_acoustic_detections_map_id_seq; Type: SEQUENCE OWNED BY; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER SEQUENCE aatams_acoustic_detections_map_id_seq OWNED BY aatams_acoustic_detections_map.id;


--
-- Name: aatams_acoustic_embargo_totals_view; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE aatams_acoustic_embargo_totals_view (
    type text,
    total numeric,
    total_public numeric,
    total_embargo numeric,
    embargo_1 numeric,
    embargo_2 numeric,
    embargo_3 numeric,
    embargo_3_more numeric
);


ALTER TABLE aatams_acoustic_embargo_totals_view OWNER TO dw_aatams_acoustic;

--
-- Name: aatams_acoustic_project_all_deployments_view; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE aatams_acoustic_project_all_deployments_view (
    funding_type text,
    project_id bigint,
    project_name character varying(255),
    installation_name character varying(255),
    station_name character varying(255),
    no_deployments bigint,
    no_detections bigint,
    first_deployment_date timestamp with time zone,
    last_deployment_date timestamp with time zone,
    start_date timestamp with time zone,
    end_date timestamp with time zone,
    coverage_duration numeric,
    station_lat numeric,
    station_lon numeric,
    min_depth numeric,
    max_depth numeric,
    is_protected boolean,
    no_unreg_transmitters numeric,
    no_unreg_detections numeric,
    no_transmitters numeric
);


ALTER TABLE aatams_acoustic_project_all_deployments_view OWNER TO dw_aatams_acoustic;

--
-- Name: aatams_acoustic_project_data_summary_view; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE aatams_acoustic_project_data_summary_view (
    funding_type text,
    project_name character varying(255),
    no_installations numeric,
    no_stations numeric,
    no_deployments numeric,
    no_releases bigint,
    no_detections numeric,
    earliest_deployment_date timestamp with time zone,
    latest_deployment_date timestamp with time zone,
    start_date timestamp with time zone,
    end_date timestamp with time zone,
    coverage_duration numeric,
    min_lat numeric,
    max_lat numeric,
    min_lon numeric,
    max_lon numeric,
    min_depth numeric,
    max_depth numeric,
    is_protected boolean,
    no_transmitters numeric,
    no_unreg_transmitters numeric,
    prop_unreg_transmitters double precision,
    no_unreg_detections numeric,
    prop_unreg_detections double precision,
    no_tag_detections numeric
);


ALTER TABLE aatams_acoustic_project_data_summary_view OWNER TO dw_aatams_acoustic;

--
-- Name: aatams_acoustic_project_totals_view; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE aatams_acoustic_project_totals_view (
    funding_type text,
    no_projects bigint,
    no_installations numeric,
    no_stations numeric,
    no_deployments numeric,
    no_releases numeric,
    no_detections numeric
);


ALTER TABLE aatams_acoustic_project_totals_view OWNER TO dw_aatams_acoustic;

--
-- Name: aatams_acoustic_registered_totals_view; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE aatams_acoustic_registered_totals_view (
    registered text,
    no_times_detected text,
    no_transmitters bigint,
    no_detections numeric
);


ALTER TABLE aatams_acoustic_registered_totals_view OWNER TO dw_aatams_acoustic;

--
-- Name: aatams_acoustic_species_all_deployments_view; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE aatams_acoustic_species_all_deployments_view (
    transmitter_id character varying(255),
    tag_id bigint,
    release_id bigint,
    project_name character varying(255),
    common_name character varying(255),
    registered boolean,
    is_protected boolean,
    releaselocation_info boolean,
    embargo_date date,
    no_detections bigint,
    first_detection date,
    last_detection date,
    coverage_duration numeric,
    transmitter_type character varying(255)
);


ALTER TABLE aatams_acoustic_species_all_deployments_view OWNER TO dw_aatams_acoustic;

--
-- Name: aatams_acoustic_species_data_summary_view; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE aatams_acoustic_species_data_summary_view (
    registered text,
    common_name character varying,
    no_transmitters bigint,
    no_releases bigint,
    no_releases_with_location bigint,
    no_embargo bigint,
    no_protected bigint,
    latest_embargo_date date,
    total_no_detections numeric,
    no_detections_public numeric,
    earliest_detection date,
    latest_detection date,
    no_data_days text
);


ALTER TABLE aatams_acoustic_species_data_summary_view OWNER TO dw_aatams_acoustic;

--
-- Name: aatams_acoustic_stats_view; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE aatams_acoustic_stats_view (
    type text,
    t numeric,
    statistics_type text
);


ALTER TABLE aatams_acoustic_stats_view OWNER TO dw_aatams_acoustic;

--
-- Name: animal; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE animal (
    id bigint NOT NULL,
    sex_id bigint,
    species_id bigint NOT NULL
);


ALTER TABLE animal OWNER TO dw_aatams_acoustic;

--
-- Name: animal_measurement; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE animal_measurement (
    id bigint NOT NULL,
    release_id bigint NOT NULL,
    type_id bigint NOT NULL,
    unit_id bigint NOT NULL,
    value real NOT NULL
);


ALTER TABLE animal_measurement OWNER TO dw_aatams_acoustic;

--
-- Name: animal_measurement_type; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE animal_measurement_type (
    id bigint NOT NULL,
    type character varying(255) NOT NULL
);


ALTER TABLE animal_measurement_type OWNER TO dw_aatams_acoustic;

--
-- Name: animal_release; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE animal_release (
    id bigint NOT NULL,
    animal_id bigint NOT NULL,
    capturedatetime_timestamp timestamp with time zone NOT NULL,
    capture_locality character varying(255) NOT NULL,
    embargo_date timestamp with time zone,
    project_id bigint NOT NULL,
    releasedatetime_timestamp timestamp with time zone NOT NULL,
    release_locality character varying(255) NOT NULL,
    capture_location public.geometry(Geometry,4326),
    release_location public.geometry(Geometry,4326)
);


ALTER TABLE animal_release OWNER TO dw_aatams_acoustic;

--
-- Name: databasechangelog; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO dw_aatams_acoustic;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO dw_aatams_acoustic;

--
-- Name: device; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE device (
    id bigint NOT NULL,
    class character varying(255) NOT NULL,
    project_id bigint,
    model_id bigint,
    serial_number character varying(255)
);


ALTER TABLE device OWNER TO dw_aatams_acoustic;

--
-- Name: device_model; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE device_model (
    id bigint NOT NULL,
    model_name character varying(255) NOT NULL
);


ALTER TABLE device_model OWNER TO dw_aatams_acoustic;

--
-- Name: installation; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE installation (
    id bigint NOT NULL,
    name character varying(255) NOT NULL,
    project_id bigint NOT NULL,
    configuration_id bigint
);


ALTER TABLE installation OWNER TO dw_aatams_acoustic;

--
-- Name: installation_configuration; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE installation_configuration (
    id bigint NOT NULL,
    type character varying(255) NOT NULL
);


ALTER TABLE installation_configuration OWNER TO dw_aatams_acoustic;

--
-- Name: installation_station; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE installation_station (
    id bigint NOT NULL,
    installation_id bigint NOT NULL,
    name character varying(255) NOT NULL,
    location public.geometry(Geometry,4326) NOT NULL,
    CONSTRAINT installation_station_location_check CHECK (public.st_isvalid(location))
);


ALTER TABLE installation_station OWNER TO dw_aatams_acoustic;

--
-- Name: installation_summary; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE installation_summary (
    project_name character varying(255) NOT NULL,
    installation_name character varying(255) NOT NULL,
    station_name character varying(255) NOT NULL,
    receiver_name character varying(255),
    deployment_date timestamp without time zone,
    recovery_date timestamp without time zone,
    receiver_status character varying(255),
    active character varying(255),
    geom public.geometry(Geometry,4326),
    installation_type character varying(255),
    imos_b boolean,
    CONSTRAINT installation_summary_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE installation_summary OWNER TO dw_aatams_acoustic;

--
-- Name: measurement_unit; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE measurement_unit (
    id bigint NOT NULL,
    unit character varying(255) NOT NULL
);


ALTER TABLE measurement_unit OWNER TO dw_aatams_acoustic;

--
-- Name: project; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE project (
    id bigint NOT NULL,
    name character varying(255) NOT NULL,
    is_protected boolean
);


ALTER TABLE project OWNER TO dw_aatams_acoustic;

--
-- Name: receiver_deployment; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE receiver_deployment (
    id bigint NOT NULL,
    bottom_depthm real,
    deploymentdatetime_timestamp timestamp with time zone NOT NULL,
    depth_below_surfacem real,
    station_id bigint,
    receiver_id bigint
);


ALTER TABLE receiver_deployment OWNER TO dw_aatams_acoustic;

--
-- Name: receiver_recovery; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE receiver_recovery (
    id bigint NOT NULL,
    recoverydatetime_timestamp timestamp with time zone,
    deployment_id bigint,
    status character varying(255)
);


ALTER TABLE receiver_recovery OWNER TO dw_aatams_acoustic;

--
-- Name: sensor; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE sensor (
    id bigint NOT NULL,
    tag_id bigint,
    transmitter_id character varying(255),
    transmitter_type_id bigint
);


ALTER TABLE sensor OWNER TO dw_aatams_acoustic;

--
-- Name: sex; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE sex (
    id bigint NOT NULL,
    sex character varying(255) NOT NULL
);


ALTER TABLE sex OWNER TO dw_aatams_acoustic;

--
-- Name: species; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE species (
    id bigint NOT NULL,
    common_name character varying(255),
    order_name character varying(255),
    phylum character varying(255),
    scientific_name character varying(255),
    name character varying(255)
);


ALTER TABLE species OWNER TO dw_aatams_acoustic;

--
-- Name: surgery; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE surgery (
    id bigint NOT NULL,
    release_id bigint NOT NULL,
    tag_id bigint NOT NULL
);


ALTER TABLE surgery OWNER TO dw_aatams_acoustic;

--
-- Name: transmitter_type; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE transmitter_type (
    id bigint NOT NULL,
    transmitter_type_name character varying(255) NOT NULL
);


ALTER TABLE transmitter_type OWNER TO dw_aatams_acoustic;

--
-- Name: valid_detection; Type: TABLE; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE TABLE valid_detection (
    id bigint NOT NULL,
    receiver_deployment_id bigint NOT NULL,
    "timestamp" timestamp with time zone NOT NULL,
    transmitter_id character varying(255) NOT NULL,
    receiver_name character varying(255)
);


ALTER TABLE valid_detection OWNER TO dw_aatams_acoustic;

SET search_path = dw_abos, pg_catalog;

--
-- Name: abos_file; Type: TABLE; Schema: dw_abos; Owner: dw_abos
--

CREATE TABLE abos_file (
    url text,
    toolbox_version text,
    file_version text,
    date_created timestamp with time zone,
    institution text,
    site_code text,
    platform_code text,
    deployment_code text,
    deployment_number text,
    source text,
    instrument text,
    instrument_serial_number text,
    instrument_nominal_depth double precision,
    geospatial_vertical_min double precision,
    geospatial_vertical_max double precision,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    author text,
    principal_investigator text,
    last_modified timestamp with time zone,
    first_indexed timestamp with time zone,
    last_indexed timestamp with time zone,
    status text
);


ALTER TABLE abos_file OWNER TO dw_abos;

--
-- Name: databasechangelog; Type: TABLE; Schema: dw_abos; Owner: dw_abos
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO dw_abos;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: dw_abos; Owner: dw_abos
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO dw_abos;

SET search_path = faimms, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: faimms; Owner: faimms
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO faimms;

--
-- Name: databasechangelog; Type: TABLE; Schema: faimms; Owner: faimms
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO faimms;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: faimms; Owner: faimms
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO faimms;

--
-- Name: indexed_file; Type: TABLE; Schema: faimms; Owner: faimms
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO faimms;

--
-- Name: measurements_noqaqc; Type: TABLE; Schema: faimms; Owner: faimms
--

CREATE TABLE measurements_noqaqc (
    file_id integer NOT NULL,
    measurement bigint NOT NULL,
    channel_id integer NOT NULL,
    "TIME" timestamp without time zone,
    "VALUES" real,
    "VALUES_quality_control" character varying(1)
);


ALTER TABLE measurements_noqaqc OWNER TO faimms;

--
-- Name: measurements_qaqc; Type: TABLE; Schema: faimms; Owner: faimms
--

CREATE TABLE measurements_qaqc (
    file_id integer NOT NULL,
    measurement bigint NOT NULL,
    channel_id integer NOT NULL,
    "TIME" timestamp without time zone,
    "VALUES" real,
    "VALUES_quality_control" character varying(1)
);


ALTER TABLE measurements_qaqc OWNER TO faimms;

--
-- Name: timeseries_feature_deployments_varname; Type: TABLE; Schema: faimms; Owner: faimms
--

CREATE TABLE timeseries_feature_deployments_varname (
    channel_id integer,
    "VARNAME" text,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "NOMINAL_DEPTH" real,
    geom public.geometry(Geometry,4326),
    site_code character varying(40),
    time_coverage_start timestamp without time zone,
    time_coverage_end timestamp without time zone
);


ALTER TABLE timeseries_feature_deployments_varname OWNER TO faimms;

--
-- Name: faimms_timeseries_data; Type: VIEW; Schema: faimms; Owner: faimms
--

CREATE VIEW faimms_timeseries_data AS
 SELECT measurements_noqaqc.channel_id,
    measurements_noqaqc."TIME",
    measurements_noqaqc."VALUES",
    COALESCE(measurements_qaqc."VALUES_quality_control", measurements_noqaqc."VALUES_quality_control") AS "VALUES_quality_control",
    table_a.url,
        CASE
            WHEN ((table_b.site_code)::text ~ 'DAV'::text) THEN 'Davies Reef'::character varying
            WHEN ((table_b.site_code)::text ~ 'HI'::text) THEN 'Heron Island'::character varying
            WHEN ((table_b.site_code)::text ~ 'LIZ'::text) THEN 'Lizard Island'::character varying
            WHEN ((table_b.site_code)::text ~ 'MRY'::text) THEN 'Myrmidon Reef'::character varying
            WHEN ((table_b.site_code)::text ~ 'OTI'::text) THEN 'One Tree Island'::character varying
            WHEN ((table_b.site_code)::text ~ 'RIB'::text) THEN 'Rib Reef'::character varying
            WHEN ((table_b.site_code)::text ~ 'OI'::text) THEN 'Orpheus Island'::character varying
            ELSE table_b.site_code
        END AS platform_code,
    table_b.site_code,
    table_b."LATITUDE",
    table_b."LONGITUDE",
    table_b."NOMINAL_DEPTH",
    table_b."VARNAME",
    table_b.geom
   FROM (((measurements_noqaqc
     LEFT JOIN measurements_qaqc ON (((measurements_qaqc."TIME" = measurements_noqaqc."TIME") AND (measurements_qaqc."VALUES" = measurements_noqaqc."VALUES") AND (measurements_qaqc.channel_id = measurements_noqaqc.channel_id))))
     JOIN indexed_file table_a ON ((table_a.id = measurements_noqaqc.file_id)))
     JOIN timeseries_feature_deployments_varname table_b ON ((table_b.channel_id = measurements_noqaqc.channel_id)));


ALTER TABLE faimms_timeseries_data OWNER TO faimms;

--
-- Name: faimms_timeseries_map; Type: VIEW; Schema: faimms; Owner: faimms
--

CREATE VIEW faimms_timeseries_map AS
 WITH table_b AS (
         SELECT timeseries_feature_deployments_varname_1.channel_id,
                CASE
                    WHEN ((timeseries_feature_deployments_varname_1.site_code)::text ~ 'DAV'::text) THEN 'Davies Reef'::character varying
                    WHEN ((timeseries_feature_deployments_varname_1.site_code)::text ~ 'HI'::text) THEN 'Heron Island'::character varying
                    WHEN ((timeseries_feature_deployments_varname_1.site_code)::text ~ 'LIZ'::text) THEN 'Lizard Island'::character varying
                    WHEN ((timeseries_feature_deployments_varname_1.site_code)::text ~ 'MRY'::text) THEN 'Myrmidon Reef'::character varying
                    WHEN ((timeseries_feature_deployments_varname_1.site_code)::text ~ 'OTI'::text) THEN 'One Tree Island'::character varying
                    WHEN ((timeseries_feature_deployments_varname_1.site_code)::text ~ 'RIB'::text) THEN 'Rib Reef'::character varying
                    WHEN ((timeseries_feature_deployments_varname_1.site_code)::text ~ 'OI'::text) THEN 'Orpheus Island'::character varying
                    ELSE timeseries_feature_deployments_varname_1.site_code
                END AS platform_code,
            timeseries_feature_deployments_varname_1.time_coverage_start,
            timeseries_feature_deployments_varname_1.time_coverage_end
           FROM timeseries_feature_deployments_varname timeseries_feature_deployments_varname_1
        )
 SELECT timeseries_feature_deployments_varname.channel_id,
    table_b.time_coverage_start,
    table_b.time_coverage_end,
    table_b.platform_code,
    timeseries_feature_deployments_varname.site_code,
    timeseries_feature_deployments_varname."VARNAME",
    timeseries_feature_deployments_varname."NOMINAL_DEPTH",
    timeseries_feature_deployments_varname.geom
   FROM (timeseries_feature_deployments_varname
     JOIN table_b ON ((table_b.channel_id = timeseries_feature_deployments_varname.channel_id)));


ALTER TABLE faimms_timeseries_map OWNER TO faimms;

--
-- Name: file; Type: TABLE; Schema: faimms; Owner: faimms
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO faimms;

--
-- Name: file_harvest; Type: TABLE; Schema: faimms; Owner: faimms
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO faimms;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: faimms; Owner: faimms
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO faimms;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: faimms; Owner: faimms
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: global_attributes_file; Type: TABLE; Schema: faimms; Owner: faimms
--

CREATE TABLE global_attributes_file (
    id bigint NOT NULL,
    file_id integer NOT NULL,
    author_email character varying,
    aims_channel_id integer,
    quality_control_set character varying,
    keywords character varying,
    source character varying,
    citation character varying,
    author character varying,
    "references" character varying,
    platform_code character varying,
    geospatial_vertical_reference_datum character varying,
    file_version character varying,
    geospatial_vertical_positive character varying,
    institution character varying,
    distribution_statement character varying,
    principal_investigator_email character varying,
    institution_references character varying,
    geospatial_vertical_min real,
    local_time_zone character varying,
    geospatial_vertical_max character varying,
    geospatial_vertical_units character varying,
    data_centre_email character varying,
    file_version_quality_control character varying,
    netcdf_version character varying,
    data_centre character varying,
    instrument character varying,
    date_created character varying,
    title character varying,
    acknowledgement character varying,
    principal_investigator character varying,
    metadata_uuid character varying,
    conventions character varying,
    site_code character varying,
    instrument_serial_number character varying,
    project character varying,
    naming_authority character varying
);


ALTER TABLE global_attributes_file OWNER TO faimms;

--
-- Name: global_attributes_file_id_seq; Type: SEQUENCE; Schema: faimms; Owner: faimms
--

CREATE SEQUENCE global_attributes_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE global_attributes_file_id_seq OWNER TO faimms;

--
-- Name: global_attributes_file_id_seq; Type: SEQUENCE OWNED BY; Schema: faimms; Owner: faimms
--

ALTER SEQUENCE global_attributes_file_id_seq OWNED BY global_attributes_file.id;


--
-- Name: index_job; Type: TABLE; Schema: faimms; Owner: faimms
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO faimms;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: faimms; Owner: faimms
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO faimms;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: faimms; Owner: faimms
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: faimms; Owner: faimms
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO faimms;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: faimms; Owner: faimms
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements_noqaqc_measurement_seq; Type: SEQUENCE; Schema: faimms; Owner: faimms
--

CREATE SEQUENCE measurements_noqaqc_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_noqaqc_measurement_seq OWNER TO faimms;

--
-- Name: measurements_noqaqc_measurement_seq; Type: SEQUENCE OWNED BY; Schema: faimms; Owner: faimms
--

ALTER SEQUENCE measurements_noqaqc_measurement_seq OWNED BY measurements_noqaqc.measurement;


--
-- Name: measurements_qaqc_measurement_seq; Type: SEQUENCE; Schema: faimms; Owner: faimms
--

CREATE SEQUENCE measurements_qaqc_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_qaqc_measurement_seq OWNER TO faimms;

--
-- Name: measurements_qaqc_measurement_seq; Type: SEQUENCE OWNED BY; Schema: faimms; Owner: faimms
--

ALTER SEQUENCE measurements_qaqc_measurement_seq OWNED BY measurements_qaqc.measurement;


--
-- Name: timeseries_feature_deployments; Type: TABLE; Schema: faimms; Owner: faimms
--

CREATE TABLE timeseries_feature_deployments (
    channel_id integer NOT NULL,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "NOMINAL_DEPTH" real,
    geom public.geometry(Geometry,4326) NOT NULL,
    site_code character varying(40)
);


ALTER TABLE timeseries_feature_deployments OWNER TO faimms;

--
-- Name: variable; Type: TABLE; Schema: faimms; Owner: faimms
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO faimms;

--
-- Name: variables_info; Type: MATERIALIZED VIEW; Schema: faimms; Owner: faimms
--

CREATE MATERIALIZED VIEW variables_info AS
 SELECT DISTINCT var."LONGNAME",
    var."VARNAME"
   FROM ( SELECT DISTINCT attribute.container AS "VARNAME",
            attribute.value AS "LONGNAME"
           FROM attribute
          WHERE ((attribute.container !~ 'LATITUDE'::text) AND (attribute.container !~ 'LONGITUDE'::text) AND (attribute.container !~ 'TIME'::text) AND (attribute.container !~ 'NOMINAL_DEPTH'::text) AND (attribute.container !~ '_quality_control'::text) AND (attribute.name = 'long_name'::text))) var
  WITH NO DATA;


ALTER TABLE variables_info OWNER TO faimms;

SET search_path = future_reef_map, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO future_reef_map;

--
-- Name: databasechangelog; Type: TABLE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO future_reef_map;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO future_reef_map;

--
-- Name: deployments; Type: TABLE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE TABLE deployments (
    deploy_id bigint NOT NULL,
    file_id integer NOT NULL,
    project character varying,
    institution character varying,
    title character varying,
    date_created character varying,
    source character varying,
    platform_code character varying,
    vessel_name character varying,
    cruise_id character varying,
    naming_authority character varying,
    cdm_data_type character varying,
    geospatial_lat_min character varying,
    geospatial_lat_max character varying,
    geospatial_lon_min character varying,
    geospatial_lon_max character varying,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    principal_investigator character varying,
    institution_references character varying,
    citation character varying,
    acknowledgement character varying,
    distribution_statement character varying
);


ALTER TABLE deployments OWNER TO future_reef_map;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE SEQUENCE deployments_deploy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deployments_deploy_id_seq OWNER TO future_reef_map;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE OWNED BY; Schema: future_reef_map; Owner: future_reef_map
--

ALTER SEQUENCE deployments_deploy_id_seq OWNED BY deployments.deploy_id;


--
-- Name: file; Type: TABLE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO future_reef_map;

--
-- Name: file_harvest; Type: TABLE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO future_reef_map;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO future_reef_map;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: future_reef_map; Owner: future_reef_map
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: measurements; Type: TABLE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE TABLE measurements (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "TIME_quality_control" character(1),
    "LATITUDE" double precision,
    "LATITUDE_quality_control" character(1),
    "LONGITUDE" double precision,
    "LONGITUDE_quality_control" character(1),
    "DfCO2" real,
    "DfCO2_quality_control" character(1),
    "fCO2ATM_UATM_INTERPOLATED" real,
    "fCO2ATM_UATM_INTERPOLATED_quality_control" character(1),
    "fCO2SW_UATM" real,
    "fCO2SW_UATM_quality_control" character(1),
    "H2OFLOW" real,
    "H2OFLOW_quality_control" character(1),
    "LICORflow" real,
    "LICORflow_quality_control" character(1),
    "Press_ATM" real,
    "Press_ATM_quality_control" character(1),
    "Press_Equil" real,
    "Press_Equil_quality_control" character(1),
    "PSAL" real,
    "PSAL_quality_control" character(1),
    "SUBFLAG" real,
    "TEMP_1" real,
    "TEMP_1_quality_control" character(1),
    "TEMP_2" real,
    "TEMP_2_quality_control" character(1),
    "WDIR" real,
    "WDIR_quality_control" character(1),
    "WSPD" real,
    "WSPD_quality_control" character(1),
    "xCO2ATM_PPM" real,
    "xCO2ATM_PPM_quality_control" character(1),
    "xCO2ATM_PPM_INTERPOLATED" real,
    "xCO2ATM_PPM_INTERPOLATED_quality_control" character(1),
    "xCO2EQ_PPM" real,
    "xCO2EQ_PPM_quality_control" character(1),
    geom public.geometry(Geometry,4326),
    CONSTRAINT measurements_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements OWNER TO future_reef_map;

--
-- Name: future_reef_map_trajectory_data; Type: VIEW; Schema: future_reef_map; Owner: future_reef_map
--

CREATE VIEW future_reef_map_trajectory_data AS
 SELECT measurements.file_id,
    deployments.vessel_name,
    deployments.cruise_id,
    measurements.measurement,
    timezone('UTC'::text, measurements."TIME") AS "TIME",
    measurements."TIME_quality_control",
    measurements."LATITUDE",
    measurements."LATITUDE_quality_control",
    measurements."LONGITUDE",
    measurements."LONGITUDE_quality_control",
    measurements."DfCO2",
    measurements."DfCO2_quality_control",
    measurements."fCO2ATM_UATM_INTERPOLATED",
    measurements."fCO2ATM_UATM_INTERPOLATED_quality_control",
    measurements."fCO2SW_UATM",
    measurements."fCO2SW_UATM_quality_control",
    measurements."H2OFLOW",
    measurements."H2OFLOW_quality_control",
    measurements."LICORflow",
    measurements."LICORflow_quality_control",
    measurements."Press_ATM",
    measurements."Press_ATM_quality_control",
    measurements."Press_Equil",
    measurements."Press_Equil_quality_control",
    measurements."PSAL",
    measurements."PSAL_quality_control",
    measurements."SUBFLAG",
    measurements."TEMP_1",
    measurements."TEMP_1_quality_control",
    measurements."TEMP_2",
    measurements."TEMP_2_quality_control",
    measurements."WDIR",
    measurements."WDIR_quality_control",
    measurements."WSPD",
    measurements."WSPD_quality_control",
    measurements."xCO2ATM_PPM",
    measurements."xCO2ATM_PPM_quality_control",
    measurements."xCO2ATM_PPM_INTERPOLATED",
    measurements."xCO2ATM_PPM_INTERPOLATED_quality_control",
    measurements."xCO2EQ_PPM",
    measurements."xCO2EQ_PPM_quality_control",
    measurements.geom
   FROM (measurements
     JOIN deployments ON ((deployments.file_id = measurements.file_id)));


ALTER TABLE future_reef_map_trajectory_data OWNER TO future_reef_map;

--
-- Name: indexed_file; Type: TABLE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO future_reef_map;

--
-- Name: visualisation_wms; Type: TABLE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE TABLE visualisation_wms (
    file_id integer,
    cruise_id character varying(30),
    colour character varying(50),
    geom public.geometry(Geometry,4326),
    CONSTRAINT visualisation_wms_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE visualisation_wms OWNER TO future_reef_map;

--
-- Name: future_reef_map_trajectory_map; Type: VIEW; Schema: future_reef_map; Owner: future_reef_map
--

CREATE VIEW future_reef_map_trajectory_map AS
 SELECT deployments.file_id,
    idx.url,
    idx.size,
    timezone('UTC'::text, deployments.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, deployments.time_coverage_end) AS time_coverage_end,
    v.colour,
    v.geom,
    deployments.platform_code,
    deployments.cruise_id,
    deployments.vessel_name
   FROM ((deployments
     JOIN indexed_file idx ON ((idx.id = deployments.file_id)))
     JOIN visualisation_wms v ON ((v.file_id = deployments.file_id)));


ALTER TABLE future_reef_map_trajectory_map OWNER TO future_reef_map;

--
-- Name: index_job; Type: TABLE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO future_reef_map;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO future_reef_map;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: future_reef_map; Owner: future_reef_map
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO future_reef_map;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: future_reef_map; Owner: future_reef_map
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements_measurement_seq; Type: SEQUENCE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE SEQUENCE measurements_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_seq OWNER TO future_reef_map;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE OWNED BY; Schema: future_reef_map; Owner: future_reef_map
--

ALTER SEQUENCE measurements_measurement_seq OWNED BY measurements.measurement;


--
-- Name: variable; Type: TABLE; Schema: future_reef_map; Owner: future_reef_map
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO future_reef_map;

SET search_path = generic_timestep, pg_catalog;

--
-- Name: collection; Type: TABLE; Schema: generic_timestep; Owner: generic_timestep
--

CREATE TABLE collection (
    id bigint NOT NULL,
    name text
);


ALTER TABLE collection OWNER TO generic_timestep;

--
-- Name: collection_id_seq; Type: SEQUENCE; Schema: generic_timestep; Owner: generic_timestep
--

CREATE SEQUENCE collection_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE collection_id_seq OWNER TO generic_timestep;

--
-- Name: collection_id_seq; Type: SEQUENCE OWNED BY; Schema: generic_timestep; Owner: generic_timestep
--

ALTER SEQUENCE collection_id_seq OWNED BY collection.id;


--
-- Name: databasechangelog; Type: TABLE; Schema: generic_timestep; Owner: generic_timestep
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO generic_timestep;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: generic_timestep; Owner: generic_timestep
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO generic_timestep;

--
-- Name: file_harvest; Type: TABLE; Schema: generic_timestep; Owner: generic_timestep
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO generic_timestep;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: generic_timestep; Owner: generic_timestep
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO generic_timestep;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: generic_timestep; Owner: generic_timestep
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: generic_timestep; Owner: generic_timestep
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO generic_timestep;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: generic_timestep; Owner: generic_timestep
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO generic_timestep;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: generic_timestep; Owner: generic_timestep
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: generic_timestep; Owner: generic_timestep
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO generic_timestep;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: generic_timestep; Owner: generic_timestep
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO generic_timestep;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: generic_timestep; Owner: generic_timestep
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: timestep; Type: TABLE; Schema: generic_timestep; Owner: generic_timestep
--

CREATE TABLE timestep (
    id bigint NOT NULL,
    file_id bigint NOT NULL,
    collection_id bigint NOT NULL,
    "TIME" timestamp with time zone,
    geom public.geometry(Geometry,4326)
);


ALTER TABLE timestep OWNER TO generic_timestep;

--
-- Name: timestep_id_seq; Type: SEQUENCE; Schema: generic_timestep; Owner: generic_timestep
--

CREATE SEQUENCE timestep_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE timestep_id_seq OWNER TO generic_timestep;

--
-- Name: timestep_id_seq; Type: SEQUENCE OWNED BY; Schema: generic_timestep; Owner: generic_timestep
--

ALTER SEQUENCE timestep_id_seq OWNED BY timestep.id;


--
-- Name: timestep_url; Type: VIEW; Schema: generic_timestep; Owner: generic_timestep
--

CREATE VIEW timestep_url AS
 SELECT t.id AS timestep_id,
    c.name AS collection_name,
    f.url AS file_url,
    f.size,
    timezone('UTC'::text, t."TIME") AS "TIME",
    t.geom
   FROM ((timestep t
     JOIN indexed_file f ON ((t.file_id = f.id)))
     JOIN collection c ON ((c.id = t.collection_id)));


ALTER TABLE timestep_url OWNER TO generic_timestep;

SET search_path = soop_asf_fmt, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO soop_asf_fmt;

--
-- Name: databasechangelog; Type: TABLE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO soop_asf_fmt;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO soop_asf_fmt;

--
-- Name: deployments; Type: TABLE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE TABLE deployments (
    deploy_id bigint NOT NULL,
    file_id integer NOT NULL,
    author_email character varying,
    author character varying,
    principal_investigator character varying,
    project character varying,
    platform_code character varying,
    voyage_number character varying,
    vessel_name character varying,
    title character varying,
    time_coverage_start character varying,
    time_coverage_end character varying,
    geospatial_lat_min character varying,
    geospatial_lat_max character varying,
    geospatial_lon_min character varying,
    geospatial_lon_max character varying,
    source character varying,
    comment character varying
);


ALTER TABLE deployments OWNER TO soop_asf_fmt;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE SEQUENCE deployments_deploy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deployments_deploy_id_seq OWNER TO soop_asf_fmt;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER SEQUENCE deployments_deploy_id_seq OWNED BY deployments.deploy_id;


--
-- Name: file; Type: TABLE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO soop_asf_fmt;

--
-- Name: file_harvest; Type: TABLE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO soop_asf_fmt;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO soop_asf_fmt;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO soop_asf_fmt;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO soop_asf_fmt;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO soop_asf_fmt;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO soop_asf_fmt;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements; Type: TABLE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE TABLE measurements (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "AIRT" real,
    "AIRT1_5M" real,
    "AIRT2_0M" real,
    "AIRT_FLAG" integer,
    "AIRT_H" real,
    "ATMP" real,
    "ATMP_FLAG" integer,
    "ATMP_H" real,
    "HEAT_NET" real,
    "HL" real,
    "H_RAIN" real,
    "HS" real,
    "LW" real,
    "LW_FLAG" integer,
    "LW_H" real,
    "LW_NET" real,
    "MASS_N" real,
    "PL_CMP" real,
    "PL_CRS" real,
    "PL_SPD" real,
    "RAIN_AMOUNT" real,
    "RAIN_AMOUNT_FLAG" integer,
    "RAIN_AMOUNT_H" real,
    "RELH" real,
    "RELH1_5M" real,
    "RELH2_0M" real,
    "RELH_FLAG" integer,
    "RELH_H" real,
    "SST" real,
    "SW" real,
    "SW_FLAG" integer,
    "SW_H" real,
    "SW_NET" real,
    "TAU" real,
    "TEMP" real,
    "TEMP_FLAG" integer,
    "TEMP_H" real,
    "WDIR" real,
    "WIND_F" integer,
    "WIND_H" real,
    "WSPD" real,
    "WSPD10M" real,
    geom public.geometry(Geometry,4326),
    CONSTRAINT measurements_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements OWNER TO soop_asf_fmt;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE SEQUENCE measurements_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_seq OWNER TO soop_asf_fmt;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER SEQUENCE measurements_measurement_seq OWNED BY measurements.measurement;


--
-- Name: visualisation_wms; Type: TABLE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE TABLE visualisation_wms (
    file_id integer,
    url character varying(512) NOT NULL,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    voyage_number character varying(35),
    platform_code character varying(255),
    vessel_name character varying(255),
    colour character varying(50),
    geom public.geometry(Geometry,4326),
    size double precision,
    CONSTRAINT visualisation_wms_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE visualisation_wms OWNER TO soop_asf_fmt;

--
-- Name: soop_asf_fmt_trajectory_data; Type: VIEW; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE VIEW soop_asf_fmt_trajectory_data AS
 SELECT measurements.file_id,
    visualisation_wms.voyage_number AS cruise_id,
    visualisation_wms.vessel_name,
    visualisation_wms.platform_code,
    measurements.measurement,
    timezone('UTC'::text, measurements."TIME") AS "TIME",
    measurements."LATITUDE",
    measurements."LONGITUDE",
    measurements."AIRT",
    measurements."AIRT1_5M",
    measurements."AIRT2_0M",
    measurements."AIRT_FLAG",
    measurements."AIRT_H",
    measurements."ATMP",
    measurements."ATMP_FLAG",
    measurements."ATMP_H",
    measurements."HEAT_NET",
    measurements."HL",
    measurements."H_RAIN",
    measurements."HS",
    measurements."LW",
    measurements."LW_FLAG",
    measurements."LW_H",
    measurements."LW_NET",
    measurements."MASS_N",
    measurements."PL_CMP",
    measurements."PL_CRS",
    measurements."PL_SPD",
    measurements."RAIN_AMOUNT",
    measurements."RAIN_AMOUNT_FLAG",
    measurements."RAIN_AMOUNT_H",
    measurements."RELH",
    measurements."RELH1_5M",
    measurements."RELH2_0M",
    measurements."RELH_FLAG",
    measurements."RELH_H",
    measurements."SST",
    measurements."SW",
    measurements."SW_FLAG",
    measurements."SW_H",
    measurements."SW_NET",
    measurements."TAU",
    measurements."TEMP",
    measurements."TEMP_FLAG",
    measurements."TEMP_H",
    measurements."WDIR",
    measurements."WIND_F",
    measurements."WIND_H",
    measurements."WSPD",
    measurements."WSPD10M",
    measurements.geom
   FROM (measurements
     JOIN visualisation_wms ON ((visualisation_wms.file_id = measurements.file_id)))
  ORDER BY measurements."TIME";


ALTER TABLE soop_asf_fmt_trajectory_data OWNER TO soop_asf_fmt;

--
-- Name: soop_asf_fmt_trajectory_map; Type: VIEW; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE VIEW soop_asf_fmt_trajectory_map AS
 SELECT a.file_id,
    a.url,
    a.size,
    timezone('UTC'::text, a.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, a.time_coverage_end) AS time_coverage_end,
    a.colour,
    public.st_makevalid(a.geom) AS geom,
    b.platform_code,
    b.voyage_number AS cruise_id,
    b.vessel_name
   FROM (visualisation_wms a
     JOIN deployments b ON ((a.file_id = b.file_id)));


ALTER TABLE soop_asf_fmt_trajectory_map OWNER TO soop_asf_fmt;

--
-- Name: variable; Type: TABLE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO soop_asf_fmt;

--
-- Name: vessel_names; Type: TABLE; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE TABLE vessel_names (
    vessel_name character varying(50) NOT NULL,
    platform_code character varying(50),
    colour character varying(50)
);


ALTER TABLE vessel_names OWNER TO soop_asf_fmt;

SET search_path = soop_asf_mt, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO soop_asf_mt;

--
-- Name: databasechangelog; Type: TABLE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO soop_asf_mt;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO soop_asf_mt;

--
-- Name: deployments; Type: TABLE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE TABLE deployments (
    deploy_id bigint NOT NULL,
    file_id integer NOT NULL,
    author_email character varying,
    author character varying,
    principal_investigator character varying,
    project character varying,
    platform_code character varying,
    voyage_number character varying,
    vessel_name character varying,
    title character varying,
    time_coverage_start character varying,
    time_coverage_end character varying,
    geospatial_lat_min character varying,
    geospatial_lat_max character varying,
    geospatial_lon_min character varying,
    geospatial_lon_max character varying,
    source character varying
);


ALTER TABLE deployments OWNER TO soop_asf_mt;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE SEQUENCE deployments_deploy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deployments_deploy_id_seq OWNER TO soop_asf_mt;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER SEQUENCE deployments_deploy_id_seq OWNED BY deployments.deploy_id;


--
-- Name: file; Type: TABLE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO soop_asf_mt;

--
-- Name: file_harvest; Type: TABLE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO soop_asf_mt;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO soop_asf_mt;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO soop_asf_mt;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO soop_asf_mt;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO soop_asf_mt;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO soop_asf_mt;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements; Type: TABLE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE TABLE measurements (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "AIRT_1" real,
    "AIRT_2" real,
    "ATMP" real,
    "LW_1" real,
    "LW_2" real,
    "PL_CMP" real,
    "PL_CRS" real,
    "PL_HD" real,
    "PL_SPD" real,
    "PL_WDIR_1" real,
    "PL_WDIR_2" real,
    "PL_WSPD_1" real,
    "PL_WSPD_2" real,
    "RAD_PAR_1" real,
    "RAD_PAR_2" real,
    "RAD_PAR_3" real,
    "RAD_PAR_4" real,
    "RAD_UV" real,
    "RAIN_AMOUNT_1" real,
    "RAIN_AMOUNT_2" real,
    "RELH_1" real,
    "RELH_2" real,
    "RRATE" real,
    "SW_1" real,
    "SW_2" real,
    "TEMP" real,
    "VIS" real,
    "WDIR_1" real,
    "WDIR_2" real,
    "WSPD_1" real,
    "WSPD_2" real,
    "WX" real,
    geom public.geometry(Geometry,4326),
    "LATITUDE_quality_control" character varying(1),
    "LONGITUDE_quality_control" character varying(1),
    CONSTRAINT measurements_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements OWNER TO soop_asf_mt;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE SEQUENCE measurements_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_seq OWNER TO soop_asf_mt;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER SEQUENCE measurements_measurement_seq OWNED BY measurements.measurement;


--
-- Name: visualisation_wms; Type: TABLE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE TABLE visualisation_wms (
    file_id integer,
    url character varying(512) NOT NULL,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    voyage_number character varying(35),
    platform_code character varying(255),
    vessel_name character varying(255),
    colour character varying(50),
    geom public.geometry(Geometry,4326),
    size double precision,
    CONSTRAINT visualisation_wms_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE visualisation_wms OWNER TO soop_asf_mt;

--
-- Name: soop_asf_mt_trajectory_data; Type: VIEW; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE VIEW soop_asf_mt_trajectory_data AS
 SELECT measurements.file_id,
    visualisation_wms.vessel_name,
    visualisation_wms.voyage_number AS cruise_id,
    visualisation_wms.platform_code,
    measurements.measurement,
    timezone('UTC'::text, measurements."TIME") AS "TIME",
    measurements."LATITUDE",
    measurements."LONGITUDE",
    measurements."AIRT_1",
    measurements."AIRT_2",
    measurements."ATMP",
    measurements."LW_1",
    measurements."LW_2",
    measurements."PL_CMP",
    measurements."PL_CRS",
    measurements."PL_HD",
    measurements."PL_SPD",
    measurements."PL_WDIR_1",
    measurements."PL_WDIR_2",
    measurements."PL_WSPD_1",
    measurements."PL_WSPD_2",
    measurements."RAD_PAR_1",
    measurements."RAD_PAR_2",
    measurements."RAD_PAR_3",
    measurements."RAD_PAR_4",
    measurements."RAD_UV",
    measurements."RAIN_AMOUNT_1",
    measurements."RAIN_AMOUNT_2",
    measurements."RELH_1",
    measurements."RELH_2",
    measurements."RRATE",
    measurements."SW_1",
    measurements."SW_2",
    measurements."TEMP",
    measurements."VIS",
    measurements."WDIR_1",
    measurements."WDIR_2",
    measurements."WSPD_1",
    measurements."WSPD_2",
    measurements."WX",
    measurements.geom
   FROM (measurements
     JOIN visualisation_wms ON ((visualisation_wms.file_id = measurements.file_id)))
  WHERE (((measurements."LONGITUDE_quality_control")::text = 'Z'::text) AND ((measurements."LATITUDE_quality_control")::text = 'Z'::text))
  ORDER BY measurements.file_id, measurements."TIME";


ALTER TABLE soop_asf_mt_trajectory_data OWNER TO soop_asf_mt;

--
-- Name: soop_asf_mt_trajectory_map; Type: VIEW; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE VIEW soop_asf_mt_trajectory_map AS
 SELECT a.file_id,
    a.url,
    a.size,
    timezone('UTC'::text, a.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, a.time_coverage_end) AS time_coverage_end,
    a.colour,
    public.st_makevalid(a.geom) AS geom,
    b.platform_code,
    b.voyage_number AS cruise_id,
    b.vessel_name
   FROM (visualisation_wms a
     JOIN deployments b ON ((a.file_id = b.file_id)));


ALTER TABLE soop_asf_mt_trajectory_map OWNER TO soop_asf_mt;

--
-- Name: variable; Type: TABLE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO soop_asf_mt;

--
-- Name: vessel_names; Type: TABLE; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE TABLE vessel_names (
    vessel_name character varying(50) NOT NULL,
    platform_code character varying(50),
    colour character varying(50)
);


ALTER TABLE vessel_names OWNER TO soop_asf_mt;

SET search_path = soop_auscpr, pg_catalog;

--
-- Name: databasechangelog; Type: TABLE; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO soop_auscpr;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO soop_auscpr;

--
-- Name: pci; Type: TABLE; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE TABLE pci (
    measurement bigint NOT NULL,
    route_code text,
    start_port text,
    end_port text,
    route_frequency text,
    route_start_date date,
    vessel_name text,
    trip_code text,
    colour_index smallint NOT NULL,
    colour text,
    pci_comments text,
    acknowledgements text,
    "TIME" timestamp with time zone,
    geom public.geometry(Geometry,4326) NOT NULL,
    latitude double precision,
    longitude double precision,
    CONSTRAINT pci_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE pci OWNER TO soop_auscpr;

--
-- Name: pci_measurement_seq; Type: SEQUENCE; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE SEQUENCE pci_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pci_measurement_seq OWNER TO soop_auscpr;

--
-- Name: pci_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_auscpr; Owner: soop_auscpr
--

ALTER SEQUENCE pci_measurement_seq OWNED BY pci.measurement;


--
-- Name: phyto; Type: TABLE; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE TABLE phyto (
    measurement bigint NOT NULL,
    route_code text,
    start_port text,
    end_port text,
    route_frequency text,
    route_start_date date,
    vessel_name text,
    trip_code text,
    "TIME" timestamp with time zone,
    geom public.geometry(Geometry,4326),
    taxon_name text,
    family text,
    genus text,
    species text,
    taxon_group text,
    caab_code bigint,
    taxon_start_date date,
    taxon_per_m3 numeric(7,1),
    phyto_comments text,
    acknowledgements text,
    longitude double precision,
    latitude double precision,
    CONSTRAINT phyto_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE phyto OWNER TO soop_auscpr;

--
-- Name: phyto_measurement_seq; Type: SEQUENCE; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE SEQUENCE phyto_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phyto_measurement_seq OWNER TO soop_auscpr;

--
-- Name: phyto_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_auscpr; Owner: soop_auscpr
--

ALTER SEQUENCE phyto_measurement_seq OWNED BY phyto.measurement;


--
-- Name: phyto_taxon_changelog; Type: TABLE; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE TABLE phyto_taxon_changelog (
    measurement bigint NOT NULL,
    taxon_name text,
    taxon_start_date date,
    first_occurrence date,
    parent_taxon_name text,
    training text,
    comments text
);


ALTER TABLE phyto_taxon_changelog OWNER TO soop_auscpr;

--
-- Name: phyto_taxon_changelog_measurement_seq; Type: SEQUENCE; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE SEQUENCE phyto_taxon_changelog_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE phyto_taxon_changelog_measurement_seq OWNER TO soop_auscpr;

--
-- Name: phyto_taxon_changelog_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_auscpr; Owner: soop_auscpr
--

ALTER SEQUENCE phyto_taxon_changelog_measurement_seq OWNED BY phyto_taxon_changelog.measurement;


--
-- Name: soop_auscpr_pci_trajectory_map; Type: VIEW; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE VIEW soop_auscpr_pci_trajectory_map AS
 SELECT pci.measurement,
    pci.route_code,
    pci.start_port,
    pci.end_port,
    pci.route_frequency,
    pci.route_start_date,
    pci.vessel_name,
    pci.trip_code,
    pci.colour_index,
    pci.colour,
    pci.pci_comments,
    pci.acknowledgements,
    pci."TIME",
    pci.geom,
    pci.latitude,
    pci.longitude
   FROM pci
  ORDER BY pci.trip_code, pci."TIME", pci.measurement;


ALTER TABLE soop_auscpr_pci_trajectory_map OWNER TO soop_auscpr;

--
-- Name: soop_auscpr_phyto_trajectory_map; Type: VIEW; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE VIEW soop_auscpr_phyto_trajectory_map AS
 SELECT phyto.measurement,
    phyto.route_code,
    phyto.start_port,
    phyto.end_port,
    phyto.route_frequency,
    phyto.route_start_date,
    phyto.vessel_name,
    phyto.trip_code,
    phyto."TIME",
    phyto.geom,
    phyto.taxon_name,
    phyto.family,
    phyto.genus,
    phyto.species,
    phyto.taxon_group,
    phyto.caab_code,
    phyto.taxon_start_date,
    phyto.taxon_per_m3,
    phyto.phyto_comments,
    phyto.acknowledgements,
    phyto.longitude,
    phyto.latitude,
    phyto_taxon_changelog.first_occurrence,
    phyto_taxon_changelog.parent_taxon_name,
    phyto_taxon_changelog.training,
    phyto_taxon_changelog.comments
   FROM (phyto
     LEFT JOIN phyto_taxon_changelog ON ((phyto.taxon_name = phyto_taxon_changelog.taxon_name)))
  ORDER BY phyto.trip_code, phyto."TIME", phyto.measurement;


ALTER TABLE soop_auscpr_phyto_trajectory_map OWNER TO soop_auscpr;

--
-- Name: zoop; Type: TABLE; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE TABLE zoop (
    measurement bigint NOT NULL,
    route_code text,
    start_port text,
    end_port text,
    route_frequency text,
    route_start_date date,
    vessel_name text,
    trip_code text,
    "TIME" timestamp with time zone,
    geom public.geometry(Geometry,4326),
    taxon_name text,
    family character varying,
    genus character varying,
    species character varying,
    sex character varying,
    life_stage character varying,
    taxon_group character varying,
    taxon_eco_group character varying,
    caab_code bigint,
    taxon_start_date date,
    taxon_per_m3 real,
    zoop_comments character varying,
    acknowledgements text,
    longitude double precision,
    latitude double precision,
    CONSTRAINT zoop_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE zoop OWNER TO soop_auscpr;

--
-- Name: zoop_taxon_changelog; Type: TABLE; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE TABLE zoop_taxon_changelog (
    measurement bigint NOT NULL,
    taxon_name text,
    taxon_start_date date,
    first_occurrence date,
    parent_taxon_name text,
    training text,
    comments text
);


ALTER TABLE zoop_taxon_changelog OWNER TO soop_auscpr;

--
-- Name: soop_auscpr_zoop_trajectory_map; Type: VIEW; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE VIEW soop_auscpr_zoop_trajectory_map AS
 SELECT zoop.measurement,
    zoop.route_code,
    zoop.start_port,
    zoop.end_port,
    zoop.route_frequency,
    zoop.route_start_date,
    zoop.vessel_name,
    zoop.trip_code,
    zoop."TIME",
    zoop.geom,
    zoop.taxon_name,
    zoop.family,
    zoop.genus,
    zoop.species,
    zoop.sex,
    zoop.life_stage,
    zoop.taxon_group,
    zoop.taxon_eco_group,
    zoop.caab_code,
    zoop.taxon_start_date,
    zoop.taxon_per_m3,
    zoop.zoop_comments,
    zoop.acknowledgements,
    zoop.longitude,
    zoop.latitude,
    zoop_taxon_changelog.first_occurrence,
    zoop_taxon_changelog.parent_taxon_name,
    zoop_taxon_changelog.training,
    zoop_taxon_changelog.comments
   FROM (zoop
     LEFT JOIN zoop_taxon_changelog ON ((zoop.taxon_name = zoop_taxon_changelog.taxon_name)))
  ORDER BY zoop.trip_code, zoop."TIME", zoop.measurement;


ALTER TABLE soop_auscpr_zoop_trajectory_map OWNER TO soop_auscpr;

--
-- Name: zoop_measurement_seq; Type: SEQUENCE; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE SEQUENCE zoop_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE zoop_measurement_seq OWNER TO soop_auscpr;

--
-- Name: zoop_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_auscpr; Owner: soop_auscpr
--

ALTER SEQUENCE zoop_measurement_seq OWNED BY zoop.measurement;


--
-- Name: zoop_taxon_changelog_measurement_seq; Type: SEQUENCE; Schema: soop_auscpr; Owner: soop_auscpr
--

CREATE SEQUENCE zoop_taxon_changelog_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE zoop_taxon_changelog_measurement_seq OWNER TO soop_auscpr;

--
-- Name: zoop_taxon_changelog_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_auscpr; Owner: soop_auscpr
--

ALTER SEQUENCE zoop_taxon_changelog_measurement_seq OWNED BY zoop_taxon_changelog.measurement;


SET search_path = soop_ba, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: soop_ba; Owner: soop_ba
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO soop_ba;

--
-- Name: databasechangelog; Type: TABLE; Schema: soop_ba; Owner: soop_ba
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO soop_ba;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: soop_ba; Owner: soop_ba
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO soop_ba;

--
-- Name: deployments; Type: TABLE; Schema: soop_ba; Owner: soop_ba
--

CREATE TABLE deployments (
    deploy_id bigint NOT NULL,
    file_id integer NOT NULL,
    author_email character varying,
    author character varying,
    principal_investigator character varying,
    project character varying,
    platform_code character varying,
    vessel_name character varying,
    vessel_callsign character varying,
    vessel_home_port character varying,
    vessel_imo character varying,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    geospatial_lat_min character varying,
    geospatial_lat_max character varying,
    geospatial_lon_min character varying,
    geospatial_lon_max character varying,
    title character varying,
    voyage_id character varying,
    transect_id character varying,
    mission_abstract character varying,
    source character varying
);


ALTER TABLE deployments OWNER TO soop_ba;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE; Schema: soop_ba; Owner: soop_ba
--

CREATE SEQUENCE deployments_deploy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deployments_deploy_id_seq OWNER TO soop_ba;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_ba; Owner: soop_ba
--

ALTER SEQUENCE deployments_deploy_id_seq OWNED BY deployments.deploy_id;


--
-- Name: file; Type: TABLE; Schema: soop_ba; Owner: soop_ba
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO soop_ba;

--
-- Name: file_harvest; Type: TABLE; Schema: soop_ba; Owner: soop_ba
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO soop_ba;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: soop_ba; Owner: soop_ba
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO soop_ba;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_ba; Owner: soop_ba
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: soop_ba; Owner: soop_ba
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO soop_ba;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: soop_ba; Owner: soop_ba
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO soop_ba;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_ba; Owner: soop_ba
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: soop_ba; Owner: soop_ba
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO soop_ba;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: soop_ba; Owner: soop_ba
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO soop_ba;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_ba; Owner: soop_ba
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements; Type: TABLE; Schema: soop_ba; Owner: soop_ba
--

CREATE TABLE measurements (
    file_id integer,
    measurement bigint NOT NULL,
    voyage_id character varying,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    geom public.geometry(Geometry,4326),
    CONSTRAINT measurements_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements OWNER TO soop_ba;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE; Schema: soop_ba; Owner: soop_ba
--

CREATE SEQUENCE measurements_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_seq OWNER TO soop_ba;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_ba; Owner: soop_ba
--

ALTER SEQUENCE measurements_measurement_seq OWNED BY measurements.measurement;


--
-- Name: visualisation_wms; Type: TABLE; Schema: soop_ba; Owner: soop_ba
--

CREATE TABLE visualisation_wms (
    voyage_id character varying,
    file_id integer,
    url character varying,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    vessel_name character varying NOT NULL,
    colour character varying,
    geom public.geometry(Geometry,4326),
    size double precision,
    CONSTRAINT visualisation_wms_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE visualisation_wms OWNER TO soop_ba;

--
-- Name: soop_ba_trajectory_map; Type: VIEW; Schema: soop_ba; Owner: soop_ba
--

CREATE VIEW soop_ba_trajectory_map AS
 SELECT a.file_id,
    a.url,
    a.size,
    timezone('UTC'::text, a.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, a.time_coverage_end) AS time_coverage_end,
    a.colour,
    a.geom,
    b.platform_code,
    b.vessel_name
   FROM (visualisation_wms a
     JOIN deployments b ON ((a.file_id = b.file_id)));


ALTER TABLE soop_ba_trajectory_map OWNER TO soop_ba;

--
-- Name: variable; Type: TABLE; Schema: soop_ba; Owner: soop_ba
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO soop_ba;

--
-- Name: vessel_names; Type: TABLE; Schema: soop_ba; Owner: soop_ba
--

CREATE TABLE vessel_names (
    vessel_name character varying NOT NULL,
    platform_code character varying,
    colour character varying
);


ALTER TABLE vessel_names OWNER TO soop_ba;

SET search_path = soop_co2, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: soop_co2; Owner: soop_co2
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO soop_co2;

--
-- Name: databasechangelog; Type: TABLE; Schema: soop_co2; Owner: soop_co2
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO soop_co2;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: soop_co2; Owner: soop_co2
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO soop_co2;

--
-- Name: deployments; Type: TABLE; Schema: soop_co2; Owner: soop_co2
--

CREATE TABLE deployments (
    deploy_id bigint NOT NULL,
    file_id integer NOT NULL,
    project character varying,
    institution character varying,
    title character varying,
    date_created character varying,
    source character varying,
    platform_code character varying,
    vessel_name character varying,
    cruise_id character varying,
    naming_authority character varying,
    cdm_data_type character varying,
    geospatial_lat_min character varying,
    geospatial_lat_max character varying,
    geospatial_lon_min character varying,
    geospatial_lon_max character varying,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    principal_investigator character varying,
    institution_references character varying,
    citation character varying,
    aknowledgment character varying,
    distribution_statement character varying
);


ALTER TABLE deployments OWNER TO soop_co2;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE; Schema: soop_co2; Owner: soop_co2
--

CREATE SEQUENCE deployments_deploy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deployments_deploy_id_seq OWNER TO soop_co2;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_co2; Owner: soop_co2
--

ALTER SEQUENCE deployments_deploy_id_seq OWNED BY deployments.deploy_id;


--
-- Name: file; Type: TABLE; Schema: soop_co2; Owner: soop_co2
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO soop_co2;

--
-- Name: file_harvest; Type: TABLE; Schema: soop_co2; Owner: soop_co2
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO soop_co2;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: soop_co2; Owner: soop_co2
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO soop_co2;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_co2; Owner: soop_co2
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: soop_co2; Owner: soop_co2
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO soop_co2;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: soop_co2; Owner: soop_co2
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO soop_co2;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_co2; Owner: soop_co2
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: soop_co2; Owner: soop_co2
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO soop_co2;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: soop_co2; Owner: soop_co2
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO soop_co2;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_co2; Owner: soop_co2
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements; Type: TABLE; Schema: soop_co2; Owner: soop_co2
--

CREATE TABLE measurements (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "TIME_quality_control" character(1),
    "LATITUDE" double precision,
    "LATITUDE_quality_control" character(1),
    "LONGITUDE" double precision,
    "LONGITUDE_quality_control" character(1),
    "DfCO2" real,
    "DfCO2_quality_control" character(1),
    "fCO2ATM_UATM_INTERPOLATED" real,
    "fCO2ATM_UATM_INTERPOLATED_quality_control" character(1),
    "fCO2SW_UATM" real,
    "fCO2SW_UATM_quality_control" character(1),
    "H2OFLOW" real,
    "H2OFLOW_quality_control" character(1),
    "LICORflow" real,
    "LICORflow_quality_control" character(1),
    "Press_ATM" real,
    "Press_ATM_quality_control" character(1),
    "Press_Equil" real,
    "Press_Equil_quality_control" character(1),
    "PSAL" real,
    "PSAL_quality_control" character(1),
    "SUBFLAG" real,
    "TEMP_1" real,
    "TEMP_1_quality_control" character(1),
    "TEMP_2" real,
    "TEMP_2_quality_control" character(1),
    "WDIR" real,
    "WDIR_quality_control" character(1),
    "WSPD" real,
    "WSPD_quality_control" character(1),
    "xCO2ATM_PPM" real,
    "xCO2ATM_PPM_quality_control" character(1),
    "xCO2ATM_PPM_INTERPOLATED" real,
    "xCO2ATM_PPM_INTERPOLATED_quality_control" character(1),
    "xCO2EQ_PPM" real,
    "xCO2EQ_PPM_quality_control" character(1),
    geom public.geometry(Geometry,4326),
    "TYPE" character(3),
    CONSTRAINT measurements_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements OWNER TO soop_co2;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE; Schema: soop_co2; Owner: soop_co2
--

CREATE SEQUENCE measurements_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_seq OWNER TO soop_co2;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_co2; Owner: soop_co2
--

ALTER SEQUENCE measurements_measurement_seq OWNED BY measurements.measurement;


--
-- Name: visualisation_wms; Type: TABLE; Schema: soop_co2; Owner: soop_co2
--

CREATE TABLE visualisation_wms (
    file_id integer,
    url character varying(512) NOT NULL,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    voyage_number character varying(30),
    vessel_name character varying(50) NOT NULL,
    colour character varying(50),
    geom public.geometry(Geometry,4326),
    size double precision,
    CONSTRAINT visualisation_wms_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE visualisation_wms OWNER TO soop_co2;

--
-- Name: soop_co2_trajectory_data; Type: VIEW; Schema: soop_co2; Owner: soop_co2
--

CREATE VIEW soop_co2_trajectory_data AS
 SELECT measurements.file_id,
    visualisation_wms.vessel_name,
    visualisation_wms.voyage_number AS cruise_id,
    measurements.measurement,
    timezone('UTC'::text, measurements."TIME") AS "TIME",
    measurements."TIME_quality_control",
    measurements."LATITUDE",
    measurements."LATITUDE_quality_control",
    measurements."LONGITUDE",
    measurements."LONGITUDE_quality_control",
    measurements."DfCO2",
    measurements."DfCO2_quality_control",
    measurements."fCO2ATM_UATM_INTERPOLATED",
    measurements."fCO2ATM_UATM_INTERPOLATED_quality_control",
    measurements."fCO2SW_UATM",
    measurements."fCO2SW_UATM_quality_control",
    measurements."H2OFLOW",
    measurements."H2OFLOW_quality_control",
    measurements."LICORflow",
    measurements."LICORflow_quality_control",
    measurements."Press_ATM",
    measurements."Press_ATM_quality_control",
    measurements."Press_Equil",
    measurements."Press_Equil_quality_control",
    measurements."PSAL",
    measurements."PSAL_quality_control",
    measurements."TYPE",
    measurements."SUBFLAG",
    measurements."TEMP_1",
    measurements."TEMP_1_quality_control",
    measurements."TEMP_2",
    measurements."TEMP_2_quality_control",
    measurements."WDIR",
    measurements."WDIR_quality_control",
    measurements."WSPD",
    measurements."WSPD_quality_control",
    measurements."xCO2ATM_PPM",
    measurements."xCO2ATM_PPM_quality_control",
    measurements."xCO2ATM_PPM_INTERPOLATED",
    measurements."xCO2ATM_PPM_INTERPOLATED_quality_control",
    measurements."xCO2EQ_PPM",
    measurements."xCO2EQ_PPM_quality_control",
    measurements.geom
   FROM (measurements
     JOIN visualisation_wms ON ((visualisation_wms.file_id = measurements.file_id)))
  ORDER BY measurements."TIME";


ALTER TABLE soop_co2_trajectory_data OWNER TO soop_co2;

--
-- Name: soop_co2_trajectory_map; Type: VIEW; Schema: soop_co2; Owner: soop_co2
--

CREATE VIEW soop_co2_trajectory_map AS
 SELECT a.file_id,
    a.url,
    a.size,
    timezone('UTC'::text, a.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, a.time_coverage_end) AS time_coverage_end,
    a.colour,
    a.geom,
    b.platform_code,
    b.cruise_id,
    b.vessel_name
   FROM (visualisation_wms a
     JOIN deployments b ON ((a.file_id = b.file_id)));


ALTER TABLE soop_co2_trajectory_map OWNER TO soop_co2;

--
-- Name: variable; Type: TABLE; Schema: soop_co2; Owner: soop_co2
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO soop_co2;

--
-- Name: vessel_names; Type: TABLE; Schema: soop_co2; Owner: soop_co2
--

CREATE TABLE vessel_names (
    vessel_name character varying(50) NOT NULL,
    platform_code character varying(50),
    colour character varying(50)
);


ALTER TABLE vessel_names OWNER TO soop_co2;

SET search_path = soop_sst, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: soop_sst; Owner: soop_sst
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO soop_sst;

--
-- Name: databasechangelog; Type: TABLE; Schema: soop_sst; Owner: soop_sst
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO soop_sst;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: soop_sst; Owner: soop_sst
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO soop_sst;

--
-- Name: file; Type: TABLE; Schema: soop_sst; Owner: soop_sst
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO soop_sst;

--
-- Name: file_harvest; Type: TABLE; Schema: soop_sst; Owner: soop_sst
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO soop_sst;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: soop_sst; Owner: soop_sst
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO soop_sst;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_sst; Owner: soop_sst
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: soop_sst; Owner: soop_sst
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO soop_sst;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: soop_sst; Owner: soop_sst
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO soop_sst;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_sst; Owner: soop_sst
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: soop_sst; Owner: soop_sst
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO soop_sst;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: soop_sst; Owner: soop_sst
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO soop_sst;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_sst; Owner: soop_sst
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements; Type: TABLE; Schema: soop_sst; Owner: soop_sst
--

CREATE TABLE measurements (
    trajectory_id integer,
    measurement_id bigint NOT NULL,
    "TIME" timestamp with time zone,
    "TIME_quality_control" character(1),
    "LATITUDE" real,
    "LATITUDE_quality_control" character(1),
    "LONGITUDE" real,
    "LONGITUDE_quality_control" character(1),
    "AIRT" real,
    "AIRT_quality_control" character(1),
    "ATMP" real,
    "ATMP_quality_control" character(1),
    "CNDC" real,
    "CNDC_quality_control" character(1),
    "CNDC_2" real,
    "CNDC_2_quality_control" character(1),
    "CNDC_3" real,
    "CNDC_3_quality_control" character(1),
    "DEWT" real,
    "DEWT_quality_control" character(1),
    "GPS_HEIGHT" real,
    "GPS_HEIGHT_quality_control" character(1),
    "PL_CRS" real,
    "PL_CRS_quality_control" character(1),
    "PL_SPD" real,
    "PL_SPD_quality_control" character(1),
    "PL_WDIR" real,
    "PL_WDIR_quality_control" character(1),
    "PL_WSPD" real,
    "PL_WSPD_quality_control" character(1),
    "PSAL" real,
    "PSAL_quality_control" character(1),
    "PSAL_2" real,
    "PSAL_2_quality_control" character(1),
    "PSAL_3" real,
    "PSAL_3_quality_control" character(1),
    "RAD_PAR" real,
    "RAD_PAR_quality_control" character(1),
    "RELH" real,
    "RELH_quality_control" character(1),
    "TEMP" real,
    "TEMP_quality_control" character(1),
    "TEMP_2" real,
    "TEMP_2_quality_control" character(1),
    "TEMP_3" real,
    "TEMP_3_quality_control" character(1),
    "TEMP_4" real,
    "TEMP_4_quality_control" character(1),
    "WDIR" real,
    "WDIR_quality_control" character(1),
    "WETT" real,
    "WETT_quality_control" character(1),
    "WSPD" real,
    "WSPD_quality_control" character(1),
    geom public.geometry(Geometry,4326)
);


ALTER TABLE measurements OWNER TO soop_sst;

--
-- Name: measurements_measurement_id_seq; Type: SEQUENCE; Schema: soop_sst; Owner: soop_sst
--

CREATE SEQUENCE measurements_measurement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_id_seq OWNER TO soop_sst;

--
-- Name: measurements_measurement_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_sst; Owner: soop_sst
--

ALTER SEQUENCE measurements_measurement_id_seq OWNED BY measurements.measurement_id;


--
-- Name: soop_sst_dm_trajectory_map; Type: TABLE; Schema: soop_sst; Owner: soop_sst
--

CREATE TABLE soop_sst_dm_trajectory_map (
    trajectory_id integer NOT NULL,
    url character varying(512) NOT NULL,
    platform_code character varying(30),
    vessel_name character varying(30),
    voyage_number character varying(30),
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    geom public.geometry(Geometry,4326),
    colour character varying(7),
    "AIRT_b" boolean,
    "ATMP_b" boolean,
    "GPS_HEIGHT_b" boolean,
    "PL_CRS_b" boolean,
    "PL_SPD_b" boolean,
    "PL_WDIR_b" boolean,
    "PL_WSPD_b" boolean,
    "RAD_PAR_b" boolean,
    "RELH_b" boolean,
    "TEMP_b" boolean,
    "WDIR_b" boolean,
    "WSPD_b" boolean,
    size double precision
);


ALTER TABLE soop_sst_dm_trajectory_map OWNER TO soop_sst;

--
-- Name: soop_sst_dm_trajectory_data; Type: VIEW; Schema: soop_sst; Owner: soop_sst
--

CREATE VIEW soop_sst_dm_trajectory_data AS
 SELECT measurements.trajectory_id,
    measurements.measurement_id,
    soop_sst_dm_trajectory_map.platform_code,
    soop_sst_dm_trajectory_map.vessel_name,
    soop_sst_dm_trajectory_map.voyage_number,
    timezone('UTC'::text, measurements."TIME") AS "TIME",
    measurements."TIME_quality_control",
    measurements."LATITUDE",
    measurements."LATITUDE_quality_control",
    measurements."LONGITUDE",
    measurements."LONGITUDE_quality_control",
    measurements."AIRT",
    measurements."AIRT_quality_control",
    measurements."ATMP",
    measurements."ATMP_quality_control",
    measurements."GPS_HEIGHT",
    measurements."GPS_HEIGHT_quality_control",
    measurements."PL_CRS",
    measurements."PL_CRS_quality_control",
    measurements."PL_SPD",
    measurements."PL_SPD_quality_control",
    measurements."PL_WDIR",
    measurements."PL_WDIR_quality_control",
    measurements."PL_WSPD",
    measurements."PL_WSPD_quality_control",
    measurements."RELH",
    measurements."RELH_quality_control",
    measurements."TEMP",
    measurements."TEMP_quality_control",
    measurements."WDIR",
    measurements."WDIR_quality_control",
    measurements."WSPD",
    measurements."WSPD_quality_control",
    soop_sst_dm_trajectory_map."AIRT_b",
    soop_sst_dm_trajectory_map."ATMP_b",
    soop_sst_dm_trajectory_map."PL_CRS_b",
    soop_sst_dm_trajectory_map."PL_SPD_b",
    soop_sst_dm_trajectory_map."PL_WDIR_b",
    soop_sst_dm_trajectory_map."PL_WSPD_b",
    soop_sst_dm_trajectory_map."RELH_b",
    soop_sst_dm_trajectory_map."TEMP_b",
    soop_sst_dm_trajectory_map."WDIR_b",
    soop_sst_dm_trajectory_map."WSPD_b",
    measurements.geom
   FROM (measurements
     JOIN soop_sst_dm_trajectory_map ON ((soop_sst_dm_trajectory_map.trajectory_id = measurements.trajectory_id)))
  ORDER BY measurements.trajectory_id, measurements."TIME";


ALTER TABLE soop_sst_dm_trajectory_data OWNER TO soop_sst;

--
-- Name: soop_sst_nrt_trajectory_map; Type: TABLE; Schema: soop_sst; Owner: soop_sst
--

CREATE TABLE soop_sst_nrt_trajectory_map (
    trajectory_id integer NOT NULL,
    url character varying(512) NOT NULL,
    platform_code character varying(30),
    vessel_name character varying(30),
    voyage_number character varying(30),
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    geom public.geometry(Geometry,4326),
    colour character varying(7),
    "AIRT_b" boolean,
    "ATMP_b" boolean,
    "CNDC_b" boolean,
    "DEWT_b" boolean,
    "GPS_HEIGHT_b" boolean,
    "PL_CRS_b" boolean,
    "PL_SPD_b" boolean,
    "PL_WDIR_b" boolean,
    "PL_WSPD_b" boolean,
    "PSAL_b" boolean,
    "RELH_b" boolean,
    "TEMP_b" boolean,
    "WDIR_b" boolean,
    "WETT_b" boolean,
    "WSPD_b" boolean,
    size double precision
);


ALTER TABLE soop_sst_nrt_trajectory_map OWNER TO soop_sst;

--
-- Name: soop_sst_nrt_trajectory_data; Type: VIEW; Schema: soop_sst; Owner: soop_sst
--

CREATE VIEW soop_sst_nrt_trajectory_data AS
 SELECT measurements.trajectory_id,
    measurements.measurement_id,
    soop_sst_nrt_trajectory_map.platform_code,
    soop_sst_nrt_trajectory_map.vessel_name,
    soop_sst_nrt_trajectory_map.voyage_number,
    timezone('UTC'::text, measurements."TIME") AS "TIME",
    measurements."TIME_quality_control",
    measurements."LATITUDE",
    measurements."LATITUDE_quality_control",
    measurements."LONGITUDE",
    measurements."LONGITUDE_quality_control",
    measurements."AIRT",
    measurements."AIRT_quality_control",
    measurements."ATMP",
    measurements."ATMP_quality_control",
    measurements."CNDC",
    measurements."CNDC_quality_control",
    measurements."CNDC_2",
    measurements."CNDC_2_quality_control",
    measurements."CNDC_3",
    measurements."CNDC_3_quality_control",
    measurements."DEWT",
    measurements."DEWT_quality_control",
    measurements."GPS_HEIGHT",
    measurements."GPS_HEIGHT_quality_control",
    measurements."PL_CRS",
    measurements."PL_CRS_quality_control",
    measurements."PL_SPD",
    measurements."PL_SPD_quality_control",
    measurements."PL_WDIR",
    measurements."PL_WDIR_quality_control",
    measurements."PL_WSPD",
    measurements."PL_WSPD_quality_control",
    measurements."PSAL",
    measurements."PSAL_quality_control",
    measurements."PSAL_2",
    measurements."PSAL_2_quality_control",
    measurements."PSAL_3",
    measurements."PSAL_3_quality_control",
    measurements."RELH",
    measurements."RELH_quality_control",
    measurements."TEMP",
    measurements."TEMP_quality_control",
    measurements."TEMP_2",
    measurements."TEMP_2_quality_control",
    measurements."TEMP_3",
    measurements."TEMP_3_quality_control",
    measurements."TEMP_4",
    measurements."TEMP_4_quality_control",
    measurements."WDIR",
    measurements."WDIR_quality_control",
    measurements."WETT",
    measurements."WETT_quality_control",
    measurements."WSPD",
    measurements."WSPD_quality_control",
    soop_sst_nrt_trajectory_map."AIRT_b",
    soop_sst_nrt_trajectory_map."ATMP_b",
    soop_sst_nrt_trajectory_map."CNDC_b",
    soop_sst_nrt_trajectory_map."DEWT_b",
    soop_sst_nrt_trajectory_map."PL_CRS_b",
    soop_sst_nrt_trajectory_map."PL_SPD_b",
    soop_sst_nrt_trajectory_map."PL_WDIR_b",
    soop_sst_nrt_trajectory_map."PL_WSPD_b",
    soop_sst_nrt_trajectory_map."PSAL_b",
    soop_sst_nrt_trajectory_map."RELH_b",
    soop_sst_nrt_trajectory_map."TEMP_b",
    soop_sst_nrt_trajectory_map."WDIR_b",
    soop_sst_nrt_trajectory_map."WETT_b",
    soop_sst_nrt_trajectory_map."WSPD_b",
    measurements.geom
   FROM (measurements
     JOIN soop_sst_nrt_trajectory_map ON ((soop_sst_nrt_trajectory_map.trajectory_id = measurements.trajectory_id)))
  ORDER BY measurements.trajectory_id, measurements."TIME";


ALTER TABLE soop_sst_nrt_trajectory_data OWNER TO soop_sst;

--
-- Name: variable; Type: TABLE; Schema: soop_sst; Owner: soop_sst
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO soop_sst;

--
-- Name: vessel_names; Type: TABLE; Schema: soop_sst; Owner: soop_sst
--

CREATE TABLE vessel_names (
    vessel_name character varying(30) NOT NULL,
    colour character varying(7)
);


ALTER TABLE vessel_names OWNER TO soop_sst;

SET search_path = soop_tmv, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO soop_tmv;

--
-- Name: databasechangelog; Type: TABLE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO soop_tmv;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO soop_tmv;

--
-- Name: deployments; Type: TABLE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE TABLE deployments (
    deploy_id bigint NOT NULL,
    file_id integer NOT NULL,
    abstract character varying,
    author character varying,
    author_email character varying,
    cdm_data_type character varying,
    citation character varying,
    data_centre character varying,
    data_centre_email character varying,
    date_created character varying,
    distribution_statement character varying,
    "featureType" character varying,
    geospatial_lat_max character varying,
    geospatial_lat_min character varying,
    geospatial_lon_max character varying,
    geospatial_lon_min character varying,
    geospatial_vertical_max character varying,
    geospatial_vertical_min character varying,
    geospatial_vertical_positive character varying,
    institution character varying,
    institution_references character varying,
    naming_authority character varying,
    platform_code character varying,
    principal_investigator character varying,
    principal_investigator_email character varying,
    project character varying,
    project_acknowledgement character varying,
    source character varying,
    time_coverage_end character varying,
    time_coverage_start character varying,
    title character varying,
    vessel_name character varying
);


ALTER TABLE deployments OWNER TO soop_tmv;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE SEQUENCE deployments_deploy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deployments_deploy_id_seq OWNER TO soop_tmv;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_tmv; Owner: soop_tmv
--

ALTER SEQUENCE deployments_deploy_id_seq OWNED BY deployments.deploy_id;


--
-- Name: file; Type: TABLE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO soop_tmv;

--
-- Name: file_harvest; Type: TABLE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO soop_tmv;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO soop_tmv;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_tmv; Owner: soop_tmv
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO soop_tmv;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO soop_tmv;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_tmv; Owner: soop_tmv
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO soop_tmv;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO soop_tmv;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_tmv; Owner: soop_tmv
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements; Type: TABLE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE TABLE measurements (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "TIME_quality_control" character(1),
    "LATITUDE" double precision,
    "LATITUDE_quality_control" character(1),
    "LONGITUDE" double precision,
    "LONGITUDE_quality_control" character(1),
    "CNDC" real,
    "CNDC_quality_control" character(1),
    "COND" real,
    "COND_quality_control" character(1),
    "CPHL" real,
    "CPHL_quality_control" character(1),
    "PSAL" real,
    "PSAL_quality_control" character(1),
    "TEMP_1" real,
    "TEMP_1_quality_control" character(1),
    "TEMP_2" real,
    "TEMP_2_quality_control" character(1),
    "TURB" real,
    "TURB_quality_control" character(1),
    geom public.geometry(Geometry,4326),
    CONSTRAINT measurements_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements OWNER TO soop_tmv;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE SEQUENCE measurements_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_seq OWNER TO soop_tmv;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_tmv; Owner: soop_tmv
--

ALTER SEQUENCE measurements_measurement_seq OWNED BY measurements.measurement;


--
-- Name: visualisation_wms; Type: TABLE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE TABLE visualisation_wms (
    file_id integer,
    url character varying(512),
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    platform_code character varying(50),
    vessel_name character varying(50),
    colour character varying(50),
    "CNDC_b" boolean,
    "CPHL_b" boolean,
    "PSAL_b" boolean,
    "TURB_b" boolean,
    "TEMP_b" boolean,
    geom public.geometry(Geometry,4326),
    size double precision,
    CONSTRAINT visualisation_wms_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE visualisation_wms OWNER TO soop_tmv;

--
-- Name: soop_tmv_trajectory_data; Type: VIEW; Schema: soop_tmv; Owner: soop_tmv
--

CREATE VIEW soop_tmv_trajectory_data AS
 SELECT measurements.file_id,
    visualisation_wms.vessel_name,
    measurements.measurement,
    timezone('UTC'::text, measurements."TIME") AS "TIME",
    measurements."TIME_quality_control",
    measurements."LATITUDE",
    measurements."LATITUDE_quality_control",
    measurements."LONGITUDE",
    measurements."LONGITUDE_quality_control",
    measurements."CNDC",
    measurements."CNDC_quality_control",
    measurements."CPHL",
    measurements."CPHL_quality_control",
    measurements."PSAL",
    measurements."PSAL_quality_control",
    measurements."TEMP_1",
    measurements."TEMP_1_quality_control",
    measurements."TEMP_2",
    measurements."TEMP_2_quality_control",
    measurements."TURB",
    measurements."TURB_quality_control",
    visualisation_wms."CNDC_b",
    visualisation_wms."CPHL_b",
    visualisation_wms."PSAL_b",
    visualisation_wms."TEMP_b",
    visualisation_wms."TURB_b",
    measurements.geom
   FROM (measurements
     JOIN visualisation_wms ON ((visualisation_wms.file_id = measurements.file_id)))
  ORDER BY measurements.file_id, measurements."TIME";


ALTER TABLE soop_tmv_trajectory_data OWNER TO soop_tmv;

--
-- Name: soop_tmv_trajectory_map; Type: VIEW; Schema: soop_tmv; Owner: soop_tmv
--

CREATE VIEW soop_tmv_trajectory_map AS
 SELECT a.file_id,
    a.url,
    a.size,
    timezone('UTC'::text, a.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, a.time_coverage_end) AS time_coverage_end,
    a.colour,
    a."CNDC_b",
    a."CPHL_b",
    a."PSAL_b",
    a."TEMP_b",
    a."TURB_b",
    a.geom,
    b.platform_code,
    b.vessel_name
   FROM (visualisation_wms a
     JOIN deployments b ON ((a.file_id = b.file_id)));


ALTER TABLE soop_tmv_trajectory_map OWNER TO soop_tmv;

--
-- Name: variable; Type: TABLE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO soop_tmv;

--
-- Name: vessel_names; Type: TABLE; Schema: soop_tmv; Owner: soop_tmv
--

CREATE TABLE vessel_names (
    vessel_name character varying(50) NOT NULL,
    platform_code character varying(50),
    colour character varying(50)
);


ALTER TABLE vessel_names OWNER TO soop_tmv;

SET search_path = soop_tmv_nrt, pg_catalog;

--
-- Name: databasechangelog; Type: TABLE; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO soop_tmv_nrt;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO soop_tmv_nrt;

--
-- Name: file_harvest; Type: TABLE; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8),
    last_change_run integer
);


ALTER TABLE file_harvest OWNER TO soop_tmv_nrt;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO soop_tmv_nrt;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO soop_tmv_nrt;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO soop_tmv_nrt;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision
);


ALTER TABLE indexed_file OWNER TO soop_tmv_nrt;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO soop_tmv_nrt;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


SET search_path = soop_trv, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO soop_trv;

--
-- Name: databasechangelog; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO soop_trv;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO soop_trv;

--
-- Name: deployments; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE deployments (
    deploy_id bigint NOT NULL,
    file_id integer NOT NULL,
    time_coverage_start character varying(100),
    time_coverage_end character varying(100),
    platform_code character varying(100),
    file_version character varying(500),
    aims_channel_id integer,
    trip_id integer,
    metadata_uuid character varying(100),
    cdm_data_type character varying(100),
    institution character varying(100),
    data_centre_email character varying(100),
    principal_investigator_email character varying(100),
    source character varying(100),
    project character varying(100),
    geospatial_vertical_min character varying(100),
    netcdf_version character varying(100),
    local_time_zone character varying(100),
    geospatial_vertical_max character varying(100),
    data_centre character varying(100),
    naming_authority character varying(100),
    author character varying(100),
    date_created character varying(100),
    title character varying(100),
    "references" character varying(100),
    vessel_name character varying(100),
    principal_investigator character varying(100)
);


ALTER TABLE deployments OWNER TO soop_trv;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE; Schema: soop_trv; Owner: soop_trv
--

CREATE SEQUENCE deployments_deploy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deployments_deploy_id_seq OWNER TO soop_trv;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_trv; Owner: soop_trv
--

ALTER SEQUENCE deployments_deploy_id_seq OWNED BY deployments.deploy_id;


--
-- Name: file; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO soop_trv;

--
-- Name: file_harvest; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO soop_trv;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: soop_trv; Owner: soop_trv
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO soop_trv;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_trv; Owner: soop_trv
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO soop_trv;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: soop_trv; Owner: soop_trv
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO soop_trv;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_trv; Owner: soop_trv
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO soop_trv;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: soop_trv; Owner: soop_trv
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO soop_trv;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: soop_trv; Owner: soop_trv
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements_cphl; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE measurements_cphl (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LATITUDE_quality_control" character(1),
    "LONGITUDE" double precision,
    "LONGITUDE_quality_control" character(1),
    geom public.geometry(Geometry,4326),
    "CPHL" real,
    "CPHL_quality_control" character(1),
    trip_id integer,
    CONSTRAINT measurements_cphl_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements_cphl OWNER TO soop_trv;

--
-- Name: measurements_cphl_measurement_seq; Type: SEQUENCE; Schema: soop_trv; Owner: soop_trv
--

CREATE SEQUENCE measurements_cphl_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_cphl_measurement_seq OWNER TO soop_trv;

--
-- Name: measurements_cphl_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_trv; Owner: soop_trv
--

ALTER SEQUENCE measurements_cphl_measurement_seq OWNED BY measurements_cphl.measurement;


--
-- Name: measurements_merged_data; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE measurements_merged_data (
    trip_id integer,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    geom public.geometry(Geometry,4326),
    "TURB" real,
    "TEMP" real,
    "CPHL" real,
    "PSAL" real,
    measurement bigint NOT NULL,
    CONSTRAINT measurements_merged_data_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements_merged_data OWNER TO soop_trv;

--
-- Name: measurements_merged_data_measurement_seq; Type: SEQUENCE; Schema: soop_trv; Owner: soop_trv
--

CREATE SEQUENCE measurements_merged_data_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_merged_data_measurement_seq OWNER TO soop_trv;

--
-- Name: measurements_merged_data_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_trv; Owner: soop_trv
--

ALTER SEQUENCE measurements_merged_data_measurement_seq OWNED BY measurements_merged_data.measurement;


--
-- Name: measurements_psal; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE measurements_psal (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LATITUDE_quality_control" character(1),
    "LONGITUDE" double precision,
    "LONGITUDE_quality_control" character(1),
    geom public.geometry(Geometry,4326),
    "PSAL" real,
    "PSAL_quality_control" character(1),
    trip_id integer,
    CONSTRAINT measurements_psal_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements_psal OWNER TO soop_trv;

--
-- Name: measurements_psal_measurement_seq; Type: SEQUENCE; Schema: soop_trv; Owner: soop_trv
--

CREATE SEQUENCE measurements_psal_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_psal_measurement_seq OWNER TO soop_trv;

--
-- Name: measurements_psal_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_trv; Owner: soop_trv
--

ALTER SEQUENCE measurements_psal_measurement_seq OWNED BY measurements_psal.measurement;


--
-- Name: measurements_temp; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE measurements_temp (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LATITUDE_quality_control" character(1),
    "LONGITUDE" double precision,
    "LONGITUDE_quality_control" character(1),
    geom public.geometry(Geometry,4326),
    "TEMP" real,
    "TEMP_quality_control" character(1),
    trip_id integer,
    CONSTRAINT measurements_temp_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements_temp OWNER TO soop_trv;

--
-- Name: measurements_temp_measurement_seq; Type: SEQUENCE; Schema: soop_trv; Owner: soop_trv
--

CREATE SEQUENCE measurements_temp_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_temp_measurement_seq OWNER TO soop_trv;

--
-- Name: measurements_temp_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_trv; Owner: soop_trv
--

ALTER SEQUENCE measurements_temp_measurement_seq OWNED BY measurements_temp.measurement;


--
-- Name: measurements_turb; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE measurements_turb (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LATITUDE_quality_control" character(1),
    "LONGITUDE" double precision,
    "LONGITUDE_quality_control" character(1),
    geom public.geometry(Geometry,4326),
    "TURB" real,
    "TURB_quality_control" character(1),
    trip_id integer,
    CONSTRAINT measurements_turb_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements_turb OWNER TO soop_trv;

--
-- Name: measurements_turb_measurement_seq; Type: SEQUENCE; Schema: soop_trv; Owner: soop_trv
--

CREATE SEQUENCE measurements_turb_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_turb_measurement_seq OWNER TO soop_trv;

--
-- Name: measurements_turb_measurement_seq; Type: SEQUENCE OWNED BY; Schema: soop_trv; Owner: soop_trv
--

ALTER SEQUENCE measurements_turb_measurement_seq OWNED BY measurements_turb.measurement;


--
-- Name: visualisation_wms; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE visualisation_wms (
    trip_id integer NOT NULL,
    metadata_uuid character varying(100),
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    vessel_name character varying(50),
    colour character varying(50),
    "TURB_b" boolean,
    "TEMP_b" boolean,
    "CPHL_b" boolean,
    "PSAL_b" boolean,
    geom public.geometry(Geometry,4326),
    CONSTRAINT visualisation_wms_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE visualisation_wms OWNER TO soop_trv;

--
-- Name: soop_trv_trajectory_data; Type: VIEW; Schema: soop_trv; Owner: soop_trv
--

CREATE VIEW soop_trv_trajectory_data AS
 SELECT measurements_merged_data.trip_id,
    visualisation_wms.vessel_name,
    timezone('UTC'::text, measurements_merged_data."TIME") AS "TIME",
    measurements_merged_data."LATITUDE",
    measurements_merged_data."LONGITUDE",
    measurements_merged_data."TURB",
    measurements_merged_data."TEMP",
    measurements_merged_data."PSAL",
    measurements_merged_data."CPHL",
    (measurements_merged_data."TURB" IS NOT NULL) AS "TURB_b",
    (measurements_merged_data."TEMP" IS NOT NULL) AS "TEMP_b",
    (measurements_merged_data."PSAL" IS NOT NULL) AS "PSAL_b",
    (measurements_merged_data."CPHL" IS NOT NULL) AS "CPHL_b",
    measurements_merged_data.geom
   FROM (measurements_merged_data
     JOIN visualisation_wms ON ((visualisation_wms.trip_id = measurements_merged_data.trip_id)))
  ORDER BY measurements_merged_data.trip_id, measurements_merged_data."TIME";


ALTER TABLE soop_trv_trajectory_data OWNER TO soop_trv;

--
-- Name: soop_trv_trajectory_map; Type: VIEW; Schema: soop_trv; Owner: soop_trv
--

CREATE VIEW soop_trv_trajectory_map AS
 SELECT a.trip_id,
    a.metadata_uuid,
    timezone('UTC'::text, a.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, a.time_coverage_end) AS time_coverage_end,
    a.colour,
    a."TURB_b",
    a."CPHL_b",
    a."TEMP_b",
    a."PSAL_b",
    a.geom,
    ( SELECT DISTINCT deployments.platform_code
           FROM deployments
          WHERE (deployments.trip_id = a.trip_id)) AS platform_code,
    ( SELECT DISTINCT deployments.vessel_name
           FROM deployments
          WHERE (deployments.trip_id = a.trip_id)) AS vessel_name
   FROM visualisation_wms a;


ALTER TABLE soop_trv_trajectory_map OWNER TO soop_trv;

--
-- Name: table_master; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE table_master (
    trip_id integer,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    geom public.geometry(Geometry,4326),
    measurements bigint NOT NULL,
    CONSTRAINT table_master_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE table_master OWNER TO soop_trv;

--
-- Name: table_master_measurements_seq; Type: SEQUENCE; Schema: soop_trv; Owner: soop_trv
--

CREATE SEQUENCE table_master_measurements_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE table_master_measurements_seq OWNER TO soop_trv;

--
-- Name: table_master_measurements_seq; Type: SEQUENCE OWNED BY; Schema: soop_trv; Owner: soop_trv
--

ALTER SEQUENCE table_master_measurements_seq OWNED BY table_master.measurements;


--
-- Name: temporary_sub_select_wms; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE temporary_sub_select_wms (
    trip_id integer,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    "TURB" bigint,
    "TEMP" bigint,
    "CPHL" bigint,
    "PSAL" bigint,
    geom public.geometry,
    CONSTRAINT temporary_sub_select_wms_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE temporary_sub_select_wms OWNER TO soop_trv;

--
-- Name: variable; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO soop_trv;

--
-- Name: vessel_names; Type: TABLE; Schema: soop_trv; Owner: soop_trv
--

CREATE TABLE vessel_names (
    vessel_name character varying(50) NOT NULL,
    platform_code character varying(50),
    colour character varying(50)
);


ALTER TABLE vessel_names OWNER TO soop_trv;

SET search_path = srs_altimetry, pg_catalog;

--
-- Name: databasechangelog; Type: TABLE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO srs_altimetry;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO srs_altimetry;

--
-- Name: deployments; Type: TABLE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE TABLE deployments (
    deploy_id bigint NOT NULL,
    file_id integer NOT NULL,
    site_code character varying(50),
    instrument character varying(150),
    conventions character varying(50),
    keywords character varying(400),
    author_email character varying(100),
    project character varying(100),
    data_centre_email character varying(100),
    date_created character varying(100),
    geospatial_vertical_min character varying(100),
    geospatial_vertical_max character varying(100),
    time_coverage_start character varying(100),
    time_coverage_end character varying(100),
    geospatial_lat_min character varying(100),
    geospatial_lat_max character varying(100),
    geospatial_lon_min character varying(100),
    geospatial_lon_max character varying(100),
    author character varying(100),
    title character varying(100),
    principal_investigator character varying(100),
    institution character varying(100),
    site character varying(50)
);


ALTER TABLE deployments OWNER TO srs_altimetry;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE SEQUENCE deployments_deploy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deployments_deploy_id_seq OWNER TO srs_altimetry;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER SEQUENCE deployments_deploy_id_seq OWNED BY deployments.deploy_id;


--
-- Name: file_harvest; Type: TABLE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO srs_altimetry;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO srs_altimetry;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO srs_altimetry;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO srs_altimetry;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO srs_altimetry;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO srs_altimetry;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements; Type: TABLE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE TABLE measurements (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    "NOMINAL_DEPTH" real,
    "CNDC" real,
    "PRES" real,
    "PSAL" real,
    "TEMP" real,
    "UCUR" real,
    "VCUR" real,
    "CNDC_quality_control" character varying(1),
    "PRES_quality_control" character varying(1),
    "PSAL_quality_control" character varying(1),
    "TEMP_quality_control" character varying(1),
    "UCUR_quality_control" character varying(1),
    "VCUR_quality_control" character varying(1),
    geom public.geometry(Geometry,4326),
    CONSTRAINT measurements_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements OWNER TO srs_altimetry;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE SEQUENCE measurements_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_seq OWNER TO srs_altimetry;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE OWNED BY; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER SEQUENCE measurements_measurement_seq OWNED BY measurements.measurement;


--
-- Name: visualisation_wms; Type: TABLE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE TABLE visualisation_wms (
    file_id integer NOT NULL,
    site_name character varying(50),
    instrument character varying(150),
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    "CNDC_b" boolean,
    "PRES_b" boolean,
    "PSAL_b" boolean,
    "TEMP_b" boolean,
    "UCUR_b" boolean,
    "VCUR_b" boolean,
    geom public.geometry(Geometry,4326),
    CONSTRAINT visualisation_wms_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE visualisation_wms OWNER TO srs_altimetry;

--
-- Name: srs_altimetry_timeseries_data; Type: VIEW; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE VIEW srs_altimetry_timeseries_data AS
 SELECT visualisation_wms.site_name,
    visualisation_wms.instrument,
    timezone('UTC'::text, measurements."TIME") AS "TIME",
    measurements."LATITUDE",
    measurements."LONGITUDE",
    measurements."NOMINAL_DEPTH",
    measurements."CNDC",
    measurements."PRES",
    measurements."PSAL",
    measurements."TEMP",
    measurements."UCUR",
    measurements."VCUR",
    measurements."CNDC_quality_control",
    measurements."PRES_quality_control",
    measurements."PSAL_quality_control",
    measurements."TEMP_quality_control",
    measurements."UCUR_quality_control",
    measurements."VCUR_quality_control",
    (measurements."CNDC" IS NOT NULL) AS "CNDC_b",
    (measurements."PRES" IS NOT NULL) AS "PRES_b",
    (measurements."PSAL" IS NOT NULL) AS "PSAL_b",
    (measurements."TEMP" IS NOT NULL) AS "TEMP_b",
    (measurements."UCUR" IS NOT NULL) AS "UCUR_b",
    (measurements."VCUR" IS NOT NULL) AS "VCUR_b",
    measurements.geom
   FROM measurements,
    visualisation_wms
  WHERE (visualisation_wms.file_id = measurements.file_id)
  ORDER BY measurements.file_id, measurements."TIME";


ALTER TABLE srs_altimetry_timeseries_data OWNER TO srs_altimetry;

--
-- Name: srs_altimetry_timeseries_map; Type: VIEW; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE VIEW srs_altimetry_timeseries_map AS
 SELECT a.file_id,
    b.size,
    b.url,
    a.site_name,
    a.instrument,
    timezone('UTC'::text, a.time_coverage_start) AS time_coverage_start,
    timezone('UTC'::text, a.time_coverage_end) AS time_coverage_end,
    a."TEMP_b",
    a."PSAL_b",
    a."PRES_b",
    a."CNDC_b",
    a."UCUR_b",
    a."VCUR_b",
    a.geom
   FROM visualisation_wms a,
    indexed_file b
  WHERE (a.file_id = b.id);


ALTER TABLE srs_altimetry_timeseries_map OWNER TO srs_altimetry;

--
-- Name: temporary_sub_select_wms; Type: TABLE; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE TABLE temporary_sub_select_wms (
    file_id integer,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    "TEMP" bigint,
    "PSAL" bigint,
    "PRES" bigint,
    "CNDC" bigint,
    "UCUR" bigint,
    "VCUR" bigint,
    geom public.geometry(Geometry,4326),
    CONSTRAINT temporary_sub_select_wms_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE temporary_sub_select_wms OWNER TO srs_altimetry;

SET search_path = srs_oc_bodbaw, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO srs_oc_bodbaw;

--
-- Name: cruise_id; Type: TABLE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE TABLE cruise_id (
    cruise_id text NOT NULL,
    vessel_name text NOT NULL,
    platform_code text,
    colour text
);


ALTER TABLE cruise_id OWNER TO srs_oc_bodbaw;

--
-- Name: databasechangelog; Type: TABLE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO srs_oc_bodbaw;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO srs_oc_bodbaw;

--
-- Name: deployments; Type: TABLE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE TABLE deployments (
    deploy_id bigint NOT NULL,
    file_id integer NOT NULL,
    cruise_id text,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    author_email text,
    source text,
    title text,
    "references" text,
    comment text,
    platform_code text,
    vessel_name text,
    principal_investigator_email text,
    project text,
    original_project_name text,
    abstract text
);


ALTER TABLE deployments OWNER TO srs_oc_bodbaw;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE SEQUENCE deployments_deploy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deployments_deploy_id_seq OWNER TO srs_oc_bodbaw;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER SEQUENCE deployments_deploy_id_seq OWNED BY deployments.deploy_id;


--
-- Name: file; Type: TABLE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO srs_oc_bodbaw;

--
-- Name: file_harvest; Type: TABLE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO srs_oc_bodbaw;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO srs_oc_bodbaw;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO srs_oc_bodbaw;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO srs_oc_bodbaw;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO srs_oc_bodbaw;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO srs_oc_bodbaw;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements; Type: TABLE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE TABLE measurements (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    geom public.geometry(Geometry,4326),
    CONSTRAINT measurements_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements OWNER TO srs_oc_bodbaw;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE SEQUENCE measurements_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_seq OWNER TO srs_oc_bodbaw;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER SEQUENCE measurements_measurement_seq OWNED BY measurements.measurement;


--
-- Name: srs_oc_bodbaw_trajectory_profile_map; Type: TABLE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE TABLE srs_oc_bodbaw_trajectory_profile_map (
    file_id integer NOT NULL,
    abstract text,
    url_marlin_metadata text,
    cruise_id text,
    data_type text,
    url_nc text,
    url_csv text,
    url_plot text,
    size double precision,
    time_coverage_start timestamp without time zone,
    time_coverage_end timestamp without time zone,
    vessel_name text,
    colour text,
    geom public.geometry(Geometry,4326),
    CONSTRAINT measurements_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE srs_oc_bodbaw_trajectory_profile_map OWNER TO srs_oc_bodbaw;

--
-- Name: variable; Type: TABLE; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO srs_oc_bodbaw;

SET search_path = srs_oc_ljco_wws, pg_catalog;

--
-- Name: databasechangelog; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO srs_oc_ljco_wws;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO srs_oc_ljco_wws;

--
-- Name: deployments; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE deployments (
    deploy_id bigint NOT NULL,
    file_id integer,
    abstract text,
    acknowledgement text,
    author text,
    cdm_data_type text,
    citation text,
    data_centre text,
    data_centre_email text,
    distribution_statement text,
    file_version text,
    geospatial_lat_max double precision,
    geospatial_lat_min double precision,
    geospatial_lon_max double precision,
    geospatial_lon_min double precision,
    geospatial_vertical_max double precision,
    geospatial_vertical_min double precision,
    geospatial_vertical_positive text,
    header_line text,
    history text,
    institution text,
    instrument text,
    instrument_sample_interval double precision,
    instrument_serial_number text,
    local_time_zone double precision,
    naming_authority text,
    organization text,
    principal_investigator text,
    project text,
    project_acknowledgement text,
    quality_control_log text,
    "references" text,
    site text,
    site_code text,
    site_nominal_depth double precision,
    standard_name_vocabulary text,
    title text,
    time_coverage_start text,
    time_coverage_end text,
    geom public.geometry(Geometry,4326),
    CONSTRAINT deployments_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE deployments OWNER TO srs_oc_ljco_wws;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE SEQUENCE deployments_deploy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deployments_deploy_id_seq OWNER TO srs_oc_ljco_wws;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER SEQUENCE deployments_deploy_id_seq OWNED BY deployments.deploy_id;


--
-- Name: file_harvest; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO srs_oc_ljco_wws;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO srs_oc_ljco_wws;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO srs_oc_ljco_wws;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO srs_oc_ljco_wws;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO srs_oc_ljco_wws;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO srs_oc_ljco_wws;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements_daily_ecotriplet_fv02; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE measurements_daily_ecotriplet_fv02 (
    file_id integer NOT NULL,
    measurement_id bigint NOT NULL,
    "TIME" timestamp without time zone NOT NULL,
    "LATITUDE" double precision NOT NULL,
    "LONGITUDE" double precision NOT NULL,
    geom public.geometry(Geometry,4326) NOT NULL,
    "HEIGHT_water_sensor" double precision,
    "cal_data_Total_num_obs" double precision,
    cal_data_b_470 double precision,
    cal_data_b_470_max double precision,
    cal_data_b_470_min double precision,
    cal_data_b_470_num_obs double precision,
    cal_data_b_470_sd double precision,
    cal_data_b_532 double precision,
    cal_data_b_532_max double precision,
    cal_data_b_532_min double precision,
    cal_data_b_532_num_obs double precision,
    cal_data_b_532_sd double precision,
    cal_data_cdom double precision,
    cal_data_cdom_max double precision,
    cal_data_cdom_min double precision,
    cal_data_cdom_num_obs double precision,
    cal_data_cdom_sd double precision,
    CONSTRAINT measurements_daily_ecotriplet_fv02_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements_daily_ecotriplet_fv02 OWNER TO srs_oc_ljco_wws;

--
-- Name: measurements_daily_ecotriplet_fv02_measurement_id_seq; Type: SEQUENCE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE SEQUENCE measurements_daily_ecotriplet_fv02_measurement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_daily_ecotriplet_fv02_measurement_id_seq OWNER TO srs_oc_ljco_wws;

--
-- Name: measurements_daily_ecotriplet_fv02_measurement_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER SEQUENCE measurements_daily_ecotriplet_fv02_measurement_id_seq OWNED BY measurements_daily_ecotriplet_fv02.measurement_id;


--
-- Name: measurements_daily_fv02_gridded; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE measurements_daily_fv02_gridded (
    file_id integer NOT NULL,
    measurement_id bigint NOT NULL,
    "TIME" timestamp without time zone NOT NULL,
    "LATITUDE" double precision NOT NULL,
    "LONGITUDE" double precision NOT NULL,
    geom public.geometry(Geometry,4326) NOT NULL,
    "HEIGHT_water_sensor" double precision,
    CONSTRAINT measurements_daily_fv02_gridded_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements_daily_fv02_gridded OWNER TO srs_oc_ljco_wws;

--
-- Name: measurements_daily_fv02_gridded_measurement_id_seq; Type: SEQUENCE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE SEQUENCE measurements_daily_fv02_gridded_measurement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_daily_fv02_gridded_measurement_id_seq OWNER TO srs_oc_ljco_wws;

--
-- Name: measurements_daily_fv02_gridded_measurement_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER SEQUENCE measurements_daily_fv02_gridded_measurement_id_seq OWNED BY measurements_daily_fv02_gridded.measurement_id;


--
-- Name: measurements_daily_wqm_fv02; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE measurements_daily_wqm_fv02 (
    file_id integer NOT NULL,
    measurement_id bigint NOT NULL,
    "TIME" timestamp without time zone NOT NULL,
    "LATITUDE" double precision NOT NULL,
    "LONGITUDE" double precision NOT NULL,
    geom public.geometry(Geometry,4326) NOT NULL,
    "NOMINAL_DEPTH" double precision,
    "CNDC" double precision,
    "CNDC_max" double precision,
    "CNDC_min" double precision,
    "CNDC_num_obs" double precision,
    "CNDC_sd" double precision,
    "DENS" double precision,
    "DENS_max" double precision,
    "DENS_min" double precision,
    "DENS_num_obs" double precision,
    "DENS_sd" double precision,
    "DOX1_1" double precision,
    "DOX1_1_max" double precision,
    "DOX1_1_min" double precision,
    "DOX1_1_num_obs" double precision,
    "DOX1_1_sd" double precision,
    "DOX1_2" double precision,
    "DOX1_2_max" double precision,
    "DOX1_2_min" double precision,
    "DOX1_2_num_obs" double precision,
    "DOX1_2_sd" double precision,
    "DOX1_3" double precision,
    "DOX1_3_max" double precision,
    "DOX1_3_min" double precision,
    "DOX1_3_num_obs" double precision,
    "DOX1_3_sd" double precision,
    "DOX2" double precision,
    "DOX2_max" double precision,
    "DOX2_min" double precision,
    "DOX2_num_obs" double precision,
    "DOX2_sd" double precision,
    "PRES_REL" double precision,
    "PRES_REL_max" double precision,
    "PRES_REL_min" double precision,
    "PRES_REL_num_obs" double precision,
    "PRES_REL_sd" double precision,
    "PSAL" double precision,
    "PSAL_max" double precision,
    "PSAL_min" double precision,
    "PSAL_num_obs" double precision,
    "PSAL_sd" double precision,
    "TEMP" double precision,
    "TEMP_max" double precision,
    "TEMP_min" double precision,
    "TEMP_num_obs" double precision,
    "TEMP_sd" double precision,
    "DEPTH" double precision,
    "DEPTH_max" double precision,
    "DEPTH_min" double precision,
    "DEPTH_num_obs" double precision,
    "DEPTH_sd" double precision,
    "CHLF" double precision,
    "CHLF_max" double precision,
    "CHLF_min" double precision,
    "CHLF_num_obs" double precision,
    "CHLF_sd" double precision,
    "FLU2" double precision,
    "FLU2_max" double precision,
    "FLU2_min" double precision,
    "FLU2_num_obs" double precision,
    "FLU2_sd" double precision,
    "TURB_RAW_COUNT" double precision,
    "TURB_RAW_COUNT_max" double precision,
    "TURB_RAW_COUNT_min" double precision,
    "TURB_RAW_COUNT_num_obs" double precision,
    "TURB_RAW_COUNT_sd" double precision,
    "TURB" double precision,
    "TURB_max" double precision,
    "TURB_min" double precision,
    "TURB_num_obs" double precision,
    "TURB_sd" double precision,
    "Total_num_obs" double precision,
    CONSTRAINT measurements_daily_wqm_fv02_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements_daily_wqm_fv02 OWNER TO srs_oc_ljco_wws;

--
-- Name: measurements_daily_wqm_fv02_measurement_id_seq; Type: SEQUENCE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE SEQUENCE measurements_daily_wqm_fv02_measurement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_daily_wqm_fv02_measurement_id_seq OWNER TO srs_oc_ljco_wws;

--
-- Name: measurements_daily_wqm_fv02_measurement_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER SEQUENCE measurements_daily_wqm_fv02_measurement_id_seq OWNED BY measurements_daily_wqm_fv02.measurement_id;


--
-- Name: measurements_hourly_wqm_fv01; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE measurements_hourly_wqm_fv01 (
    file_id integer NOT NULL,
    measurement_id bigint NOT NULL,
    "TIME" timestamp without time zone NOT NULL,
    "LATITUDE" double precision NOT NULL,
    "LONGITUDE" double precision NOT NULL,
    geom public.geometry(Geometry,4326) NOT NULL,
    "NOMINAL_DEPTH" double precision,
    "CNDC" double precision,
    "CNDC_quality_control" character varying(1),
    "DENS" double precision,
    "DENS_quality_control" character varying(1),
    "DOX1_1" double precision,
    "DOX1_1_quality_control" character varying(1),
    "DOX1_2" double precision,
    "DOX1_2_quality_control" character varying(1),
    "DOX1_3" double precision,
    "DOX1_3_quality_control" character varying(1),
    "DOX2" double precision,
    "DOX2_quality_control" character varying(1),
    "PRES_REL" double precision,
    "PRES_REL_quality_control" character varying(1),
    "PSAL" double precision,
    "PSAL_quality_control" character varying(1),
    "TEMP" double precision,
    "TEMP_quality_control" character varying(1),
    "DEPTH" double precision,
    "DEPTH_quality_control" character varying(1),
    "CHLF" double precision,
    "CHLF_quality_control" character varying(1),
    "FLU2" double precision,
    "FLU2_quality_control" character varying(1),
    "TURB" double precision,
    "TURB_quality_control" character varying(1),
    "TURB_RAW_COUNT" double precision,
    "TURB_RAW_COUNT_quality_control" character varying(1),
    CONSTRAINT measurements_hourly_wqm_fv01_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements_hourly_wqm_fv01 OWNER TO srs_oc_ljco_wws;

--
-- Name: measurements_hourly_wqm_fv01_measurement_id_seq; Type: SEQUENCE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE SEQUENCE measurements_hourly_wqm_fv01_measurement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_hourly_wqm_fv01_measurement_id_seq OWNER TO srs_oc_ljco_wws;

--
-- Name: measurements_hourly_wqm_fv01_measurement_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER SEQUENCE measurements_hourly_wqm_fv01_measurement_id_seq OWNED BY measurements_hourly_wqm_fv01.measurement_id;


--
-- Name: measurements_mtw_water_monthly_fv01; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE measurements_mtw_water_monthly_fv01 (
    measurement_id bigint NOT NULL,
    file_id integer,
    "TIME" timestamp with time zone NOT NULL,
    "LATITUDE" double precision NOT NULL,
    "LONGITUDE" double precision NOT NULL,
    "HEIGHT_water_sensor" double precision,
    "WMXH_01" double precision,
    "WMXH_01_quality_control" character varying(1),
    "WMXH_10" double precision,
    "WMXH_10_quality_control" character varying(1),
    "WMXH_30" double precision,
    "WMXH_30_quality_control" character varying(1),
    geom public.geometry(Geometry,4326) NOT NULL,
    CONSTRAINT measurements_mtw_water_monthly_fv01_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements_mtw_water_monthly_fv01 OWNER TO srs_oc_ljco_wws;

--
-- Name: measurements_mtw_water_monthly_fv01_measurement_id_seq; Type: SEQUENCE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE SEQUENCE measurements_mtw_water_monthly_fv01_measurement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_mtw_water_monthly_fv01_measurement_id_seq OWNER TO srs_oc_ljco_wws;

--
-- Name: measurements_mtw_water_monthly_fv01_measurement_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER SEQUENCE measurements_mtw_water_monthly_fv01_measurement_id_seq OWNED BY measurements_mtw_water_monthly_fv01.measurement_id;


--
-- Name: measurements_mtw_weather_monthly_fv01; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE measurements_mtw_weather_monthly_fv01 (
    measurement_id bigint NOT NULL,
    file_id integer,
    "TIME" timestamp with time zone NOT NULL,
    "LATITUDE" double precision NOT NULL,
    "LONGITUDE" double precision NOT NULL,
    "AIRT" double precision,
    "AIRT_quality_control" character varying(1),
    "ATMP" double precision,
    "ATMP_quality_control" character varying(1),
    "RELH" double precision,
    "RELH_quality_control" character varying(1),
    "WDIR" double precision,
    "WDIR_quality_control" character varying(1),
    "WSPD" double precision,
    "WSPD_quality_control" character varying(1),
    "WSPD_max" double precision,
    "WSPD_max_quality_control" character varying(1),
    geom public.geometry(Geometry,4326) NOT NULL,
    CONSTRAINT measurements_mtw_weather_monthly_fv01_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements_mtw_weather_monthly_fv01 OWNER TO srs_oc_ljco_wws;

--
-- Name: measurements_mtw_weather_monthly_fv01_measurement_id_seq; Type: SEQUENCE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE SEQUENCE measurements_mtw_weather_monthly_fv01_measurement_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_mtw_weather_monthly_fv01_measurement_id_seq OWNER TO srs_oc_ljco_wws;

--
-- Name: measurements_mtw_weather_monthly_fv01_measurement_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER SEQUENCE measurements_mtw_weather_monthly_fv01_measurement_id_seq OWNED BY measurements_mtw_weather_monthly_fv01.measurement_id;


--
-- Name: srs_oc_ljco_wws_daily_acs_fv02_timeseries_map; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE srs_oc_ljco_wws_daily_acs_fv02_timeseries_map (
    file_id integer,
    size double precision,
    url character varying(512),
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    geom public.geometry(Geometry,4326)
);

ALTER TABLE ONLY srs_oc_ljco_wws_daily_acs_fv02_timeseries_map REPLICA IDENTITY NOTHING;


ALTER TABLE srs_oc_ljco_wws_daily_acs_fv02_timeseries_map OWNER TO srs_oc_ljco_wws;

--
-- Name: srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map (
    file_id integer,
    size double precision,
    url character varying(512),
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    geom public.geometry(Geometry,4326)
);

ALTER TABLE ONLY srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map REPLICA IDENTITY NOTHING;


ALTER TABLE srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map OWNER TO srs_oc_ljco_wws;

--
-- Name: srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map (
    file_id integer,
    size double precision,
    url character varying(512),
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    geom public.geometry(Geometry,4326)
);

ALTER TABLE ONLY srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map REPLICA IDENTITY NOTHING;


ALTER TABLE srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map OWNER TO srs_oc_ljco_wws;

--
-- Name: srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map (
    file_id integer,
    size double precision,
    url character varying(512),
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    geom public.geometry(Geometry,4326)
);

ALTER TABLE ONLY srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map REPLICA IDENTITY NOTHING;


ALTER TABLE srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map OWNER TO srs_oc_ljco_wws;

--
-- Name: visualisation_wms_daily_wqm_fv02; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE visualisation_wms_daily_wqm_fv02 (
    file_id integer NOT NULL,
    time_start timestamp without time zone,
    time_end timestamp without time zone,
    "CNDC_b" boolean,
    "DENS_b" boolean,
    "DEPTH_b" boolean,
    "DOX1_1_b" boolean,
    "DOX1_2_b" boolean,
    "DOX1_3_b" boolean,
    "DOX2_b" boolean,
    "PRES_REL_b" boolean,
    "PSAL_b" boolean,
    "TEMP_b" boolean,
    "CHLF_b" boolean,
    "FLU2_b" boolean,
    "TURB_b" boolean,
    "TURB_RAW_COUNT_b" boolean,
    geom public.geometry(Geometry,4326) NOT NULL,
    CONSTRAINT visualisation_wms_daily_wqm_fv02_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE visualisation_wms_daily_wqm_fv02 OWNER TO srs_oc_ljco_wws;

--
-- Name: srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map; Type: VIEW; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE VIEW srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map AS
 SELECT a.file_id,
    b.size,
    b.url,
    timezone('UTC'::text, a.time_start) AS time_coverage_start,
    timezone('UTC'::text, a.time_end) AS time_coverage_end,
    public.st_x(a.geom) AS "LONGITUDE",
    public.st_y(a.geom) AS "LATITUDE",
    a."CNDC_b",
    a."DENS_b",
    a."DEPTH_b",
    a."DOX1_1_b",
    a."DOX1_2_b",
    a."DOX1_3_b",
    a."DOX2_b",
    a."PRES_REL_b",
    a."PSAL_b",
    a."TEMP_b",
    a."CHLF_b",
    a."FLU2_b",
    a."TURB_b",
    a."TURB_RAW_COUNT_b",
    a.geom
   FROM visualisation_wms_daily_wqm_fv02 a,
    indexed_file b
  WHERE (a.file_id = b.id);


ALTER TABLE srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map OWNER TO srs_oc_ljco_wws;

--
-- Name: srs_oc_ljco_wws_daily_all_products_fv02_timeseries_map; Type: VIEW; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE VIEW srs_oc_ljco_wws_daily_all_products_fv02_timeseries_map AS
 SELECT srs_oc_ljco_wws_daily_acs_fv02_timeseries_map.file_id,
    srs_oc_ljco_wws_daily_acs_fv02_timeseries_map.size,
    srs_oc_ljco_wws_daily_acs_fv02_timeseries_map.url,
    srs_oc_ljco_wws_daily_acs_fv02_timeseries_map.time_coverage_start,
    srs_oc_ljco_wws_daily_acs_fv02_timeseries_map.time_coverage_end,
    srs_oc_ljco_wws_daily_acs_fv02_timeseries_map."LATITUDE",
    srs_oc_ljco_wws_daily_acs_fv02_timeseries_map."LONGITUDE",
    srs_oc_ljco_wws_daily_acs_fv02_timeseries_map.geom,
    'ac-s'::character varying AS instrument
   FROM srs_oc_ljco_wws_daily_acs_fv02_timeseries_map
UNION ALL
 SELECT srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map.file_id,
    srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map.size,
    srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map.url,
    srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map.time_coverage_start,
    srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map.time_coverage_end,
    srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map."LATITUDE",
    srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map."LONGITUDE",
    srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map.geom,
    'BB9'::character varying AS instrument
   FROM srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map
UNION ALL
 SELECT srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map.file_id,
    srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map.size,
    srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map.url,
    srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map.time_coverage_start,
    srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map.time_coverage_end,
    srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map."LATITUDE",
    srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map."LONGITUDE",
    srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map.geom,
    'HyperOCR'::character varying AS instrument
   FROM srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map
UNION ALL
 SELECT srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map.file_id,
    srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map.size,
    srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map.url,
    srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map.time_coverage_start,
    srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map.time_coverage_end,
    srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map."LATITUDE",
    srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map."LONGITUDE",
    srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map.geom,
    'ECO Triplet'::character varying AS instrument
   FROM srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map
UNION ALL
 SELECT srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map.file_id,
    srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map.size,
    srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map.url,
    srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map.time_coverage_start,
    srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map.time_coverage_end,
    srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map."LATITUDE",
    srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map."LONGITUDE",
    srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map.geom,
    'WQM'::character varying AS instrument
   FROM srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map;


ALTER TABLE srs_oc_ljco_wws_daily_all_products_fv02_timeseries_map OWNER TO srs_oc_ljco_wws;

--
-- Name: srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_data; Type: VIEW; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE VIEW srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_data AS
 SELECT measurements_daily_ecotriplet_fv02.file_id,
    measurements_daily_ecotriplet_fv02.measurement_id,
    measurements_daily_ecotriplet_fv02."TIME",
    measurements_daily_ecotriplet_fv02."LATITUDE",
    measurements_daily_ecotriplet_fv02."LONGITUDE",
    measurements_daily_ecotriplet_fv02.geom,
    measurements_daily_ecotriplet_fv02."HEIGHT_water_sensor",
    measurements_daily_ecotriplet_fv02."cal_data_Total_num_obs",
    measurements_daily_ecotriplet_fv02.cal_data_b_470,
    measurements_daily_ecotriplet_fv02.cal_data_b_470_max,
    measurements_daily_ecotriplet_fv02.cal_data_b_470_min,
    measurements_daily_ecotriplet_fv02.cal_data_b_470_num_obs,
    measurements_daily_ecotriplet_fv02.cal_data_b_470_sd,
    measurements_daily_ecotriplet_fv02.cal_data_b_532,
    measurements_daily_ecotriplet_fv02.cal_data_b_532_max,
    measurements_daily_ecotriplet_fv02.cal_data_b_532_min,
    measurements_daily_ecotriplet_fv02.cal_data_b_532_num_obs,
    measurements_daily_ecotriplet_fv02.cal_data_b_532_sd,
    measurements_daily_ecotriplet_fv02.cal_data_cdom,
    measurements_daily_ecotriplet_fv02.cal_data_cdom_max,
    measurements_daily_ecotriplet_fv02.cal_data_cdom_min,
    measurements_daily_ecotriplet_fv02.cal_data_cdom_num_obs,
    measurements_daily_ecotriplet_fv02.cal_data_cdom_sd
   FROM measurements_daily_ecotriplet_fv02;


ALTER TABLE srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_data OWNER TO srs_oc_ljco_wws;

--
-- Name: srs_oc_ljco_wws_daily_wqm_fv02_timeseries_data; Type: VIEW; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE VIEW srs_oc_ljco_wws_daily_wqm_fv02_timeseries_data AS
 SELECT measurements_daily_wqm_fv02.measurement_id,
    measurements_daily_wqm_fv02.file_id,
    timezone('UTC'::text, measurements_daily_wqm_fv02."TIME") AS "TIME",
    measurements_daily_wqm_fv02."LATITUDE",
    measurements_daily_wqm_fv02."LONGITUDE",
    deployments.geom,
    measurements_daily_wqm_fv02."NOMINAL_DEPTH",
    measurements_daily_wqm_fv02."CNDC",
    measurements_daily_wqm_fv02."CNDC_max",
    measurements_daily_wqm_fv02."CNDC_min",
    measurements_daily_wqm_fv02."CNDC_num_obs",
    measurements_daily_wqm_fv02."CNDC_sd",
    measurements_daily_wqm_fv02."DENS",
    measurements_daily_wqm_fv02."DENS_max",
    measurements_daily_wqm_fv02."DENS_min",
    measurements_daily_wqm_fv02."DENS_num_obs",
    measurements_daily_wqm_fv02."DENS_sd",
    measurements_daily_wqm_fv02."DOX1_1",
    measurements_daily_wqm_fv02."DOX1_1_max",
    measurements_daily_wqm_fv02."DOX1_1_min",
    measurements_daily_wqm_fv02."DOX1_1_num_obs",
    measurements_daily_wqm_fv02."DOX1_1_sd",
    measurements_daily_wqm_fv02."DOX1_2",
    measurements_daily_wqm_fv02."DOX1_2_max",
    measurements_daily_wqm_fv02."DOX1_2_min",
    measurements_daily_wqm_fv02."DOX1_2_num_obs",
    measurements_daily_wqm_fv02."DOX1_2_sd",
    measurements_daily_wqm_fv02."DOX1_3",
    measurements_daily_wqm_fv02."DOX1_3_max",
    measurements_daily_wqm_fv02."DOX1_3_min",
    measurements_daily_wqm_fv02."DOX1_3_num_obs",
    measurements_daily_wqm_fv02."DOX1_3_sd",
    measurements_daily_wqm_fv02."DOX2",
    measurements_daily_wqm_fv02."DOX2_max",
    measurements_daily_wqm_fv02."DOX2_min",
    measurements_daily_wqm_fv02."DOX2_num_obs",
    measurements_daily_wqm_fv02."DOX2_sd",
    measurements_daily_wqm_fv02."PRES_REL",
    measurements_daily_wqm_fv02."PRES_REL_max",
    measurements_daily_wqm_fv02."PRES_REL_min",
    measurements_daily_wqm_fv02."PRES_REL_num_obs",
    measurements_daily_wqm_fv02."PRES_REL_sd",
    measurements_daily_wqm_fv02."PSAL",
    measurements_daily_wqm_fv02."PSAL_max",
    measurements_daily_wqm_fv02."PSAL_min",
    measurements_daily_wqm_fv02."PSAL_num_obs",
    measurements_daily_wqm_fv02."PSAL_sd",
    measurements_daily_wqm_fv02."TEMP",
    measurements_daily_wqm_fv02."TEMP_max",
    measurements_daily_wqm_fv02."TEMP_min",
    measurements_daily_wqm_fv02."TEMP_num_obs",
    measurements_daily_wqm_fv02."TEMP_sd",
    measurements_daily_wqm_fv02."DEPTH",
    measurements_daily_wqm_fv02."DEPTH_max",
    measurements_daily_wqm_fv02."DEPTH_min",
    measurements_daily_wqm_fv02."DEPTH_num_obs",
    measurements_daily_wqm_fv02."DEPTH_sd",
    measurements_daily_wqm_fv02."CHLF",
    measurements_daily_wqm_fv02."CHLF_max",
    measurements_daily_wqm_fv02."CHLF_min",
    measurements_daily_wqm_fv02."CHLF_num_obs",
    measurements_daily_wqm_fv02."CHLF_sd",
    measurements_daily_wqm_fv02."FLU2",
    measurements_daily_wqm_fv02."FLU2_max",
    measurements_daily_wqm_fv02."FLU2_min",
    measurements_daily_wqm_fv02."FLU2_num_obs",
    measurements_daily_wqm_fv02."FLU2_sd",
    measurements_daily_wqm_fv02."TURB_RAW_COUNT",
    measurements_daily_wqm_fv02."TURB_RAW_COUNT_max",
    measurements_daily_wqm_fv02."TURB_RAW_COUNT_min",
    measurements_daily_wqm_fv02."TURB_RAW_COUNT_num_obs",
    measurements_daily_wqm_fv02."TURB_RAW_COUNT_sd",
    measurements_daily_wqm_fv02."TURB",
    measurements_daily_wqm_fv02."TURB_max",
    measurements_daily_wqm_fv02."TURB_min",
    measurements_daily_wqm_fv02."TURB_num_obs",
    measurements_daily_wqm_fv02."TURB_sd",
    measurements_daily_wqm_fv02."Total_num_obs",
    (measurements_daily_wqm_fv02."NOMINAL_DEPTH" IS NOT NULL) AS "NOMINAL_DEPTH_b",
    (measurements_daily_wqm_fv02."CNDC" IS NOT NULL) AS "CNDC_b",
    (measurements_daily_wqm_fv02."CNDC_max" IS NOT NULL) AS "CNDC_max_b",
    (measurements_daily_wqm_fv02."CNDC_min" IS NOT NULL) AS "CNDC_min_b",
    (measurements_daily_wqm_fv02."CNDC_num_obs" IS NOT NULL) AS "CNDC_num_obs_b",
    (measurements_daily_wqm_fv02."CNDC_sd" IS NOT NULL) AS "CNDC_sd_b",
    (measurements_daily_wqm_fv02."DENS" IS NOT NULL) AS "DENS_b",
    (measurements_daily_wqm_fv02."DENS_max" IS NOT NULL) AS "DENS_max_b",
    (measurements_daily_wqm_fv02."DENS_min" IS NOT NULL) AS "DENS_min_b",
    (measurements_daily_wqm_fv02."DENS_num_obs" IS NOT NULL) AS "DENS_num_obs_b",
    (measurements_daily_wqm_fv02."DENS_sd" IS NOT NULL) AS "DENS_sd_b",
    (measurements_daily_wqm_fv02."DOX1_1" IS NOT NULL) AS "DOX1_1_b",
    (measurements_daily_wqm_fv02."DOX1_1_max" IS NOT NULL) AS "DOX1_1_max_b",
    (measurements_daily_wqm_fv02."DOX1_1_min" IS NOT NULL) AS "DOX1_1_min_b",
    (measurements_daily_wqm_fv02."DOX1_1_num_obs" IS NOT NULL) AS "DOX1_1_num_obs_b",
    (measurements_daily_wqm_fv02."DOX1_1_sd" IS NOT NULL) AS "DOX1_1_sd_b",
    (measurements_daily_wqm_fv02."DOX1_2" IS NOT NULL) AS "DOX1_2_b",
    (measurements_daily_wqm_fv02."DOX1_2_max" IS NOT NULL) AS "DOX1_2_max_b",
    (measurements_daily_wqm_fv02."DOX1_2_min" IS NOT NULL) AS "DOX1_2_min_b",
    (measurements_daily_wqm_fv02."DOX1_2_num_obs" IS NOT NULL) AS "DOX1_2_num_obs_b",
    (measurements_daily_wqm_fv02."DOX1_2_sd" IS NOT NULL) AS "DOX1_2_sd_b",
    (measurements_daily_wqm_fv02."DOX1_3" IS NOT NULL) AS "DOX1_3_b",
    (measurements_daily_wqm_fv02."DOX1_3_max" IS NOT NULL) AS "DOX1_3_max_b",
    (measurements_daily_wqm_fv02."DOX1_3_min" IS NOT NULL) AS "DOX1_3_min_b",
    (measurements_daily_wqm_fv02."DOX1_3_num_obs" IS NOT NULL) AS "DOX1_3_num_obs_b",
    (measurements_daily_wqm_fv02."DOX1_3_sd" IS NOT NULL) AS "DOX1_3_sd_b",
    (measurements_daily_wqm_fv02."DOX2" IS NOT NULL) AS "DOX2_b",
    (measurements_daily_wqm_fv02."DOX2_max" IS NOT NULL) AS "DOX2_max_b",
    (measurements_daily_wqm_fv02."DOX2_min" IS NOT NULL) AS "DOX2_min_b",
    (measurements_daily_wqm_fv02."DOX2_num_obs" IS NOT NULL) AS "DOX2_num_obs_b",
    (measurements_daily_wqm_fv02."DOX2_sd" IS NOT NULL) AS "DOX2_sd_b",
    (measurements_daily_wqm_fv02."PRES_REL" IS NOT NULL) AS "PRES_REL_b",
    (measurements_daily_wqm_fv02."PRES_REL_max" IS NOT NULL) AS "PRES_REL_max_b",
    (measurements_daily_wqm_fv02."PRES_REL_min" IS NOT NULL) AS "PRES_REL_min_b",
    (measurements_daily_wqm_fv02."PRES_REL_num_obs" IS NOT NULL) AS "PRES_REL_num_obs_b",
    (measurements_daily_wqm_fv02."PRES_REL_sd" IS NOT NULL) AS "PRES_REL_sd_b",
    (measurements_daily_wqm_fv02."PSAL" IS NOT NULL) AS "PSAL_b",
    (measurements_daily_wqm_fv02."PSAL_max" IS NOT NULL) AS "PSAL_max_b",
    (measurements_daily_wqm_fv02."PSAL_min" IS NOT NULL) AS "PSAL_min_b",
    (measurements_daily_wqm_fv02."PSAL_num_obs" IS NOT NULL) AS "PSAL_num_obs_b",
    (measurements_daily_wqm_fv02."PSAL_sd" IS NOT NULL) AS "PSAL_sd_b",
    (measurements_daily_wqm_fv02."TEMP" IS NOT NULL) AS "TEMP_b",
    (measurements_daily_wqm_fv02."TEMP_max" IS NOT NULL) AS "TEMP_max_b",
    (measurements_daily_wqm_fv02."TEMP_min" IS NOT NULL) AS "TEMP_min_b",
    (measurements_daily_wqm_fv02."TEMP_num_obs" IS NOT NULL) AS "TEMP_num_obs_b",
    (measurements_daily_wqm_fv02."TEMP_sd" IS NOT NULL) AS "TEMP_sd_b",
    (measurements_daily_wqm_fv02."DEPTH" IS NOT NULL) AS "DEPTH_b",
    (measurements_daily_wqm_fv02."DEPTH_max" IS NOT NULL) AS "DEPTH_max_b",
    (measurements_daily_wqm_fv02."DEPTH_min" IS NOT NULL) AS "DEPTH_min_b",
    (measurements_daily_wqm_fv02."DEPTH_num_obs" IS NOT NULL) AS "DEPTH_num_obs_b",
    (measurements_daily_wqm_fv02."DEPTH_sd" IS NOT NULL) AS "DEPTH_sd_b",
    (measurements_daily_wqm_fv02."CHLF" IS NOT NULL) AS "CHLF_b",
    (measurements_daily_wqm_fv02."CHLF_max" IS NOT NULL) AS "CHLF_max_b",
    (measurements_daily_wqm_fv02."CHLF_min" IS NOT NULL) AS "CHLF_min_b",
    (measurements_daily_wqm_fv02."CHLF_num_obs" IS NOT NULL) AS "CHLF_num_obs_b",
    (measurements_daily_wqm_fv02."CHLF_sd" IS NOT NULL) AS "CHLF_sd_b",
    (measurements_daily_wqm_fv02."FLU2" IS NOT NULL) AS "FLU2_b",
    (measurements_daily_wqm_fv02."FLU2_max" IS NOT NULL) AS "FLU2_max_b",
    (measurements_daily_wqm_fv02."FLU2_min" IS NOT NULL) AS "FLU2_min_b",
    (measurements_daily_wqm_fv02."FLU2_num_obs" IS NOT NULL) AS "FLU2_num_obs_b",
    (measurements_daily_wqm_fv02."FLU2_sd" IS NOT NULL) AS "FLU2_sd_b",
    (measurements_daily_wqm_fv02."TURB_RAW_COUNT" IS NOT NULL) AS "TURB_RAW_COUNT_b",
    (measurements_daily_wqm_fv02."TURB_RAW_COUNT_max" IS NOT NULL) AS "TURB_RAW_COUNT_max_b",
    (measurements_daily_wqm_fv02."TURB_RAW_COUNT_min" IS NOT NULL) AS "TURB_RAW_COUNT_min_b",
    (measurements_daily_wqm_fv02."TURB_RAW_COUNT_num_obs" IS NOT NULL) AS "TURB_RAW_COUNT_num_obs_b",
    (measurements_daily_wqm_fv02."TURB_RAW_COUNT_sd" IS NOT NULL) AS "TURB_RAW_COUNT_sd_b",
    (measurements_daily_wqm_fv02."TURB" IS NOT NULL) AS "TURB_b",
    (measurements_daily_wqm_fv02."TURB_max" IS NOT NULL) AS "TURB_max_b",
    (measurements_daily_wqm_fv02."TURB_min" IS NOT NULL) AS "TURB_min_b",
    (measurements_daily_wqm_fv02."TURB_num_obs" IS NOT NULL) AS "TURB_num_obs_b",
    (measurements_daily_wqm_fv02."TURB_sd" IS NOT NULL) AS "TURB_sd_b",
    (measurements_daily_wqm_fv02."Total_num_obs" IS NOT NULL) AS "Total_num_obs_b"
   FROM (measurements_daily_wqm_fv02
     JOIN deployments ON ((measurements_daily_wqm_fv02.file_id = deployments.file_id)));


ALTER TABLE srs_oc_ljco_wws_daily_wqm_fv02_timeseries_data OWNER TO srs_oc_ljco_wws;

--
-- Name: srs_oc_ljco_wws_hourly_wqm_fv01_timeseries_data; Type: VIEW; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE VIEW srs_oc_ljco_wws_hourly_wqm_fv01_timeseries_data AS
 SELECT measurements_hourly_wqm_fv01.measurement_id,
    measurements_hourly_wqm_fv01.file_id,
    timezone('UTC'::text, measurements_hourly_wqm_fv01."TIME") AS "TIME",
    measurements_hourly_wqm_fv01."LATITUDE",
    measurements_hourly_wqm_fv01."LONGITUDE",
    deployments.geom,
    measurements_hourly_wqm_fv01."NOMINAL_DEPTH",
    measurements_hourly_wqm_fv01."CNDC",
    measurements_hourly_wqm_fv01."CNDC_quality_control",
    measurements_hourly_wqm_fv01."DENS",
    measurements_hourly_wqm_fv01."DENS_quality_control",
    measurements_hourly_wqm_fv01."DOX1_1",
    measurements_hourly_wqm_fv01."DOX1_1_quality_control",
    measurements_hourly_wqm_fv01."DOX1_2",
    measurements_hourly_wqm_fv01."DOX1_2_quality_control",
    measurements_hourly_wqm_fv01."DOX1_3",
    measurements_hourly_wqm_fv01."DOX1_3_quality_control",
    measurements_hourly_wqm_fv01."DOX2",
    measurements_hourly_wqm_fv01."DOX2_quality_control",
    measurements_hourly_wqm_fv01."PRES_REL",
    measurements_hourly_wqm_fv01."PRES_REL_quality_control",
    measurements_hourly_wqm_fv01."PSAL",
    measurements_hourly_wqm_fv01."PSAL_quality_control",
    measurements_hourly_wqm_fv01."TEMP",
    measurements_hourly_wqm_fv01."TEMP_quality_control",
    measurements_hourly_wqm_fv01."DEPTH",
    measurements_hourly_wqm_fv01."DEPTH_quality_control",
    measurements_hourly_wqm_fv01."CHLF",
    measurements_hourly_wqm_fv01."CHLF_quality_control",
    measurements_hourly_wqm_fv01."FLU2",
    measurements_hourly_wqm_fv01."FLU2_quality_control",
    measurements_hourly_wqm_fv01."TURB",
    measurements_hourly_wqm_fv01."TURB_quality_control",
    measurements_hourly_wqm_fv01."TURB_RAW_COUNT",
    measurements_hourly_wqm_fv01."TURB_RAW_COUNT_quality_control",
    (measurements_hourly_wqm_fv01."CNDC" IS NOT NULL) AS "CNDC_b",
    (measurements_hourly_wqm_fv01."DENS" IS NOT NULL) AS "DENS_b",
    (measurements_hourly_wqm_fv01."DOX1_1" IS NOT NULL) AS "DOX1_1_b",
    (measurements_hourly_wqm_fv01."DOX1_2" IS NOT NULL) AS "DOX1_2_b",
    (measurements_hourly_wqm_fv01."DOX1_3" IS NOT NULL) AS "DOX1_3_b",
    (measurements_hourly_wqm_fv01."DOX2" IS NOT NULL) AS "DOX2_b",
    (measurements_hourly_wqm_fv01."PSAL" IS NOT NULL) AS "PSAL_b",
    (measurements_hourly_wqm_fv01."TEMP" IS NOT NULL) AS "TEMP_b",
    (measurements_hourly_wqm_fv01."DEPTH" IS NOT NULL) AS "DEPTH_b",
    (measurements_hourly_wqm_fv01."CHLF" IS NOT NULL) AS "CHLF_b",
    (measurements_hourly_wqm_fv01."FLU2" IS NOT NULL) AS "FLU2_b",
    (measurements_hourly_wqm_fv01."TURB" IS NOT NULL) AS "TURB_b",
    (measurements_hourly_wqm_fv01."TURB_RAW_COUNT" IS NOT NULL) AS "TURB_RAW_COUNT_b"
   FROM (measurements_hourly_wqm_fv01
     JOIN deployments ON ((measurements_hourly_wqm_fv01.file_id = deployments.file_id)));


ALTER TABLE srs_oc_ljco_wws_hourly_wqm_fv01_timeseries_data OWNER TO srs_oc_ljco_wws;

--
-- Name: visualisation_wms_hourly_wqm_fv01; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE visualisation_wms_hourly_wqm_fv01 (
    file_id integer NOT NULL,
    time_start timestamp without time zone,
    time_end timestamp without time zone,
    "CNDC_b" boolean,
    "DENS_b" boolean,
    "DEPTH_b" boolean,
    "DOX1_1_b" boolean,
    "DOX1_2_b" boolean,
    "DOX1_3_b" boolean,
    "DOX2_b" boolean,
    "PRES_REL_b" boolean,
    "PSAL_b" boolean,
    "TEMP_b" boolean,
    "CHLF_b" boolean,
    "FLU2_b" boolean,
    "TURB_b" boolean,
    "TURB_RAW_COUNT_b" boolean,
    geom public.geometry(Geometry,4326) NOT NULL,
    CONSTRAINT visualisation_wms_hourly_wqm_fv01_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE visualisation_wms_hourly_wqm_fv01 OWNER TO srs_oc_ljco_wws;

--
-- Name: srs_oc_ljco_wws_hourly_wqm_fv01_timeseries_map; Type: VIEW; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE VIEW srs_oc_ljco_wws_hourly_wqm_fv01_timeseries_map AS
 SELECT a.file_id,
    b.size,
    b.url,
    timezone('UTC'::text, a.time_start) AS time_coverage_start,
    timezone('UTC'::text, a.time_end) AS time_coverage_end,
    a."CNDC_b",
    a."DENS_b",
    a."DEPTH_b",
    a."DOX1_1_b",
    a."DOX1_2_b",
    a."DOX1_3_b",
    a."DOX2_b",
    a."PRES_REL_b",
    a."PSAL_b",
    a."TEMP_b",
    a."CHLF_b",
    a."FLU2_b",
    a."TURB_b",
    a."TURB_RAW_COUNT_b",
    c.geom
   FROM visualisation_wms_hourly_wqm_fv01 a,
    deployments c,
    indexed_file b
  WHERE ((a.file_id = b.id) AND (a.file_id = c.file_id));


ALTER TABLE srs_oc_ljco_wws_hourly_wqm_fv01_timeseries_map OWNER TO srs_oc_ljco_wws;

--
-- Name: visualisation_wms_mtw_monthly_fv01; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE visualisation_wms_mtw_monthly_fv01 (
    file_id integer NOT NULL,
    time_start timestamp without time zone,
    time_end timestamp without time zone,
    "WMXH_01_b" boolean,
    "WMXH_10_b" boolean,
    "WMXH_30_b" boolean,
    "AIRT_b" boolean,
    "ATMP_b" boolean,
    "RELH_b" boolean,
    "WDIR_b" boolean,
    "WSPD_b" boolean,
    "WSPD_max_b" boolean,
    geom public.geometry(Geometry,4326),
    CONSTRAINT visualisation_wms_mtw_monthly_fv01_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE visualisation_wms_mtw_monthly_fv01 OWNER TO srs_oc_ljco_wws;

--
-- Name: srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_map; Type: VIEW; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE VIEW srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_map AS
 SELECT a.file_id,
    b.size,
    b.url,
    timezone('UTC'::text, a.time_start) AS time_coverage_start,
    timezone('UTC'::text, a.time_end) AS time_coverage_end,
    a."WMXH_01_b",
    a."WMXH_10_b",
    a."WMXH_30_b",
    a."AIRT_b",
    a."ATMP_b",
    a."RELH_b",
    a."WDIR_b",
    a."WSPD_b",
    a."WSPD_max_b",
    c.geom
   FROM visualisation_wms_mtw_monthly_fv01 a,
    indexed_file b,
    deployments c
  WHERE ((a.file_id = b.id) AND (a.file_id = c.file_id));


ALTER TABLE srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_map OWNER TO srs_oc_ljco_wws;

--
-- Name: srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_water_data; Type: VIEW; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE VIEW srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_water_data AS
 SELECT measurements_mtw_water_monthly_fv01.measurement_id,
    measurements_mtw_water_monthly_fv01.file_id,
    timezone('UTC'::text, measurements_mtw_water_monthly_fv01."TIME") AS "TIME",
    measurements_mtw_water_monthly_fv01."LATITUDE",
    measurements_mtw_water_monthly_fv01."LONGITUDE",
    measurements_mtw_water_monthly_fv01."HEIGHT_water_sensor",
    measurements_mtw_water_monthly_fv01."WMXH_01",
    measurements_mtw_water_monthly_fv01."WMXH_01_quality_control",
    measurements_mtw_water_monthly_fv01."WMXH_10",
    measurements_mtw_water_monthly_fv01."WMXH_10_quality_control",
    measurements_mtw_water_monthly_fv01."WMXH_30",
    measurements_mtw_water_monthly_fv01."WMXH_30_quality_control",
    (measurements_mtw_water_monthly_fv01."WMXH_01" IS NOT NULL) AS "WMXH_01_b",
    (measurements_mtw_water_monthly_fv01."WMXH_10" IS NOT NULL) AS "WMXH_10_b",
    (measurements_mtw_water_monthly_fv01."WMXH_30" IS NOT NULL) AS "WMXH_30_b",
    deployments.geom
   FROM (measurements_mtw_water_monthly_fv01
     JOIN deployments ON ((measurements_mtw_water_monthly_fv01.file_id = deployments.file_id)));


ALTER TABLE srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_water_data OWNER TO srs_oc_ljco_wws;

--
-- Name: srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_weather_data; Type: VIEW; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE VIEW srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_weather_data AS
 SELECT measurements_mtw_weather_monthly_fv01.measurement_id,
    measurements_mtw_weather_monthly_fv01.file_id,
    timezone('UTC'::text, measurements_mtw_weather_monthly_fv01."TIME") AS "TIME",
    measurements_mtw_weather_monthly_fv01."LATITUDE",
    measurements_mtw_weather_monthly_fv01."LONGITUDE",
    measurements_mtw_weather_monthly_fv01."AIRT",
    measurements_mtw_weather_monthly_fv01."AIRT_quality_control",
    measurements_mtw_weather_monthly_fv01."ATMP",
    measurements_mtw_weather_monthly_fv01."ATMP_quality_control",
    measurements_mtw_weather_monthly_fv01."RELH",
    measurements_mtw_weather_monthly_fv01."RELH_quality_control",
    measurements_mtw_weather_monthly_fv01."WDIR",
    measurements_mtw_weather_monthly_fv01."WDIR_quality_control",
    measurements_mtw_weather_monthly_fv01."WSPD",
    measurements_mtw_weather_monthly_fv01."WSPD_quality_control",
    measurements_mtw_weather_monthly_fv01."WSPD_max",
    measurements_mtw_weather_monthly_fv01."WSPD_max_quality_control",
    (measurements_mtw_weather_monthly_fv01."AIRT" IS NOT NULL) AS "AIRT_b",
    (measurements_mtw_weather_monthly_fv01."ATMP" IS NOT NULL) AS "ATMP_b",
    (measurements_mtw_weather_monthly_fv01."RELH" IS NOT NULL) AS "RELH_b",
    (measurements_mtw_weather_monthly_fv01."WDIR" IS NOT NULL) AS "WDIR_b",
    (measurements_mtw_weather_monthly_fv01."WSPD" IS NOT NULL) AS "WSPD_b",
    (measurements_mtw_weather_monthly_fv01."WSPD_max" IS NOT NULL) AS "WSPD_max_b",
    deployments.geom
   FROM (measurements_mtw_weather_monthly_fv01
     JOIN deployments ON ((measurements_mtw_weather_monthly_fv01.file_id = deployments.file_id)));


ALTER TABLE srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_weather_data OWNER TO srs_oc_ljco_wws;

--
-- Name: temporary_sub_select_wms_daily_wqm_fv02; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE temporary_sub_select_wms_daily_wqm_fv02 (
    file_id integer,
    time_start timestamp with time zone,
    time_end timestamp with time zone,
    "CNDC" bigint,
    "DENS" bigint,
    "DEPTH" bigint,
    "DOX1_1" bigint,
    "DOX1_2" bigint,
    "DOX1_3" bigint,
    "DOX2" bigint,
    "PRES_REL" bigint,
    "PSAL" bigint,
    "TEMP" bigint,
    "CHLF" bigint,
    "FLU2" bigint,
    "TURB_RAW_COUNT" bigint,
    "TURB" bigint,
    geom public.geometry(Geometry,4326) NOT NULL,
    CONSTRAINT temporary_sub_select_wms_daily_wqm_fv02_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE temporary_sub_select_wms_daily_wqm_fv02 OWNER TO srs_oc_ljco_wws;

--
-- Name: temporary_sub_select_wms_hourly_wqm_fv01; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE temporary_sub_select_wms_hourly_wqm_fv01 (
    file_id integer,
    time_start timestamp with time zone,
    time_end timestamp with time zone,
    "CNDC" bigint,
    "DENS" bigint,
    "DEPTH" bigint,
    "DOX1_1" bigint,
    "DOX1_2" bigint,
    "DOX1_3" bigint,
    "DOX2" bigint,
    "PRES_REL" bigint,
    "PSAL" bigint,
    "TEMP" bigint,
    "CHLF" bigint,
    "FLU2" bigint,
    "TURB" bigint,
    "TURB_RAW_COUNT" bigint,
    geom public.geometry(Geometry,4326) NOT NULL,
    CONSTRAINT temporary_sub_select_wms_hourly_wqm_fv01_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE temporary_sub_select_wms_hourly_wqm_fv01 OWNER TO srs_oc_ljco_wws;

--
-- Name: temporary_sub_select_wms_mtw_monthly_fv01; Type: TABLE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE TABLE temporary_sub_select_wms_mtw_monthly_fv01 (
    file_id integer,
    time_start timestamp with time zone,
    time_end timestamp with time zone,
    "WMXH_01" bigint,
    "WMXH_10" bigint,
    "WMXH_30" bigint,
    "AIRT" bigint,
    "ATMP" bigint,
    "RELH" bigint,
    "WDIR" bigint,
    "WSPD" bigint,
    "WSPD_max" bigint,
    geom public.geometry(Geometry,4326),
    CONSTRAINT temporary_sub_select_wms_mtw_monthly_fv01_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE temporary_sub_select_wms_mtw_monthly_fv01 OWNER TO srs_oc_ljco_wws;

SET search_path = srs_oc_soop_rad, pg_catalog;

--
-- Name: attribute; Type: TABLE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE TABLE attribute (
    file_id bigint NOT NULL,
    container text NOT NULL,
    name text NOT NULL,
    type text,
    value text
);


ALTER TABLE attribute OWNER TO srs_oc_soop_rad;

--
-- Name: databasechangelog; Type: TABLE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO srs_oc_soop_rad;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO srs_oc_soop_rad;

--
-- Name: deployments; Type: TABLE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE TABLE deployments (
    deploy_id bigint NOT NULL,
    file_id integer NOT NULL,
    author_email character varying,
    author character varying,
    principal_investigator character varying,
    project character varying,
    platform_code character varying,
    vessel_name character varying,
    time_coverage_start timestamp with time zone,
    time_coverage_end timestamp with time zone,
    geospatial_lat_min character varying,
    geospatial_lat_max character varying,
    geospatial_lon_min character varying,
    geospatial_lon_max character varying,
    title character varying,
    voyage_id character varying,
    source character varying
);


ALTER TABLE deployments OWNER TO srs_oc_soop_rad;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE SEQUENCE deployments_deploy_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE deployments_deploy_id_seq OWNER TO srs_oc_soop_rad;

--
-- Name: deployments_deploy_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER SEQUENCE deployments_deploy_id_seq OWNED BY deployments.deploy_id;


--
-- Name: file; Type: TABLE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE TABLE file (
    file_id bigint NOT NULL,
    url text
);


ALTER TABLE file OWNER TO srs_oc_soop_rad;

--
-- Name: file_harvest; Type: TABLE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO srs_oc_soop_rad;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO srs_oc_soop_rad;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO srs_oc_soop_rad;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO srs_oc_soop_rad;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO srs_oc_soop_rad;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO srs_oc_soop_rad;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: measurements; Type: TABLE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE TABLE measurements (
    file_id integer,
    measurement bigint NOT NULL,
    "TIME" timestamp with time zone,
    "LATITUDE" double precision,
    "LONGITUDE" double precision,
    geom public.geometry(Geometry,4326),
    CONSTRAINT measurements_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE measurements OWNER TO srs_oc_soop_rad;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE SEQUENCE measurements_measurement_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measurements_measurement_seq OWNER TO srs_oc_soop_rad;

--
-- Name: measurements_measurement_seq; Type: SEQUENCE OWNED BY; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER SEQUENCE measurements_measurement_seq OWNED BY measurements.measurement;


--
-- Name: visualisation_wms; Type: TABLE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE TABLE visualisation_wms (
    voyage_id character varying,
    file_id integer,
    url character varying,
    time_start timestamp with time zone,
    time_end timestamp with time zone,
    vessel_name character varying NOT NULL,
    colour character varying,
    geom public.geometry(Geometry,4326),
    size double precision,
    CONSTRAINT visualisation_geom_check CHECK (public.st_isvalid(geom))
);


ALTER TABLE visualisation_wms OWNER TO srs_oc_soop_rad;

--
-- Name: srs_oc_soop_rad_trajectory_map; Type: VIEW; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE VIEW srs_oc_soop_rad_trajectory_map AS
 SELECT a.file_id,
    a.url,
    a.size,
    timezone('UTC'::text, a.time_start) AS time_coverage_start,
    timezone('UTC'::text, a.time_end) AS time_coverage_end,
    a.colour,
    a.geom,
    b.platform_code,
    b.vessel_name
   FROM (visualisation_wms a
     JOIN deployments b ON ((a.file_id = b.file_id)));


ALTER TABLE srs_oc_soop_rad_trajectory_map OWNER TO srs_oc_soop_rad;

--
-- Name: variable; Type: TABLE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE TABLE variable (
    file_id bigint NOT NULL,
    name text NOT NULL,
    type text,
    dimensions text,
    shape text
);


ALTER TABLE variable OWNER TO srs_oc_soop_rad;

--
-- Name: vessel_names; Type: TABLE; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE TABLE vessel_names (
    vessel_name character varying NOT NULL,
    platform_code character varying,
    colour character varying
);


ALTER TABLE vessel_names OWNER TO srs_oc_soop_rad;

SET search_path = srs_sst, pg_catalog;

--
-- Name: databasechangelog; Type: TABLE; Schema: srs_sst; Owner: srs_sst
--

CREATE TABLE databasechangelog (
    id character varying(63) NOT NULL,
    author character varying(63) NOT NULL,
    filename character varying(200) NOT NULL,
    dateexecuted timestamp with time zone NOT NULL,
    orderexecuted integer NOT NULL,
    exectype character varying(10) NOT NULL,
    md5sum character varying(35),
    description character varying(255),
    comments character varying(255),
    tag character varying(255),
    liquibase character varying(20)
);


ALTER TABLE databasechangelog OWNER TO srs_sst;

--
-- Name: databasechangeloglock; Type: TABLE; Schema: srs_sst; Owner: srs_sst
--

CREATE TABLE databasechangeloglock (
    id integer NOT NULL,
    locked boolean NOT NULL,
    lockgranted timestamp with time zone,
    lockedby character varying(255)
);


ALTER TABLE databasechangeloglock OWNER TO srs_sst;

--
-- Name: file_harvest; Type: TABLE; Schema: srs_sst; Owner: srs_sst
--

CREATE TABLE file_harvest (
    id bigint NOT NULL,
    harvest_type character varying(8),
    file_id bigint,
    last_moddate_harvested timestamp with time zone,
    last_change_type character varying(8) NOT NULL,
    last_change_run integer NOT NULL
);


ALTER TABLE file_harvest OWNER TO srs_sst;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE; Schema: srs_sst; Owner: srs_sst
--

CREATE SEQUENCE file_harvest_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_harvest_id_seq OWNER TO srs_sst;

--
-- Name: file_harvest_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_sst; Owner: srs_sst
--

ALTER SEQUENCE file_harvest_id_seq OWNED BY file_harvest.id;


--
-- Name: index_job; Type: TABLE; Schema: srs_sst; Owner: srs_sst
--

CREATE TABLE index_job (
    id integer NOT NULL,
    name character varying(100),
    last_run_no integer NOT NULL,
    last_run_date timestamp with time zone
);


ALTER TABLE index_job OWNER TO srs_sst;

--
-- Name: index_job_id_seq; Type: SEQUENCE; Schema: srs_sst; Owner: srs_sst
--

CREATE SEQUENCE index_job_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE index_job_id_seq OWNER TO srs_sst;

--
-- Name: index_job_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_sst; Owner: srs_sst
--

ALTER SEQUENCE index_job_id_seq OWNED BY index_job.id;


--
-- Name: indexed_file; Type: TABLE; Schema: srs_sst; Owner: srs_sst
--

CREATE TABLE indexed_file (
    id integer NOT NULL,
    job_id bigint,
    url character varying(512) NOT NULL,
    created timestamp with time zone,
    modified timestamp with time zone,
    first_indexed timestamp with time zone DEFAULT now(),
    last_indexed timestamp with time zone,
    last_indexed_run integer,
    size double precision,
    deleted boolean DEFAULT false
);


ALTER TABLE indexed_file OWNER TO srs_sst;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE; Schema: srs_sst; Owner: srs_sst
--

CREATE SEQUENCE indexed_file_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE indexed_file_id_seq OWNER TO srs_sst;

--
-- Name: indexed_file_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_sst; Owner: srs_sst
--

ALTER SEQUENCE indexed_file_id_seq OWNED BY indexed_file.id;


--
-- Name: timeseries; Type: TABLE; Schema: srs_sst; Owner: srs_sst
--

CREATE TABLE timeseries (
    id bigint NOT NULL,
    file_id bigint NOT NULL,
    product_id text NOT NULL,
    "time" timestamp with time zone
);


ALTER TABLE timeseries OWNER TO srs_sst;

--
-- Name: srs_sst_l3c_1d_day_n19_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3c_1d_day_n19_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3C-1d/day/n19%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3c_1d_day_n19_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3c_1d_ngt_n19_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3c_1d_ngt_n19_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3C-1d/ngt/n19%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3c_1d_ngt_n19_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_14d_day_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_14d_day_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-14d/day%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_14d_day_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_14d_dn_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_14d_dn_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-14d/dn%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_14d_dn_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_14d_ngt_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_14d_ngt_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-14d/ngt%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_14d_ngt_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_1d_day_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_1d_day_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-1d/day%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_1d_day_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_1d_dn_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_1d_dn_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-1d/dn%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_1d_dn_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_1d_ngt_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_1d_ngt_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-1d/ngt%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_1d_ngt_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_1d_southern_day_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_1d_southern_day_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-1dS/day%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_1d_southern_day_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_1d_southern_dn_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_1d_southern_dn_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-1dS/dn%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_1d_southern_dn_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_1d_southern_ngt_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_1d_southern_ngt_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-1dS/ngt%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_1d_southern_ngt_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_1m_day_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_1m_day_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-1m/day%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_1m_day_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_1m_dn_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_1m_dn_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-1m/dn%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_1m_dn_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_1m_ngt_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_1m_ngt_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-1m/ngt%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_1m_ngt_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_1m_southern_day_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_1m_southern_day_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-1mS/day%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_1m_southern_day_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_1m_southern_dn_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_1m_southern_dn_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-1mS/dn%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_1m_southern_dn_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_1m_southern_ngt_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_1m_southern_ngt_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-1mS/ngt%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_1m_southern_ngt_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_3d_day_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_3d_day_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-3d/day%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_3d_day_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_3d_dn_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_3d_dn_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-3d/dn%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_3d_dn_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_3d_ngt_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_3d_ngt_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-3d/ngt%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_3d_ngt_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_6d_day_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_6d_day_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-6d/day%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_6d_day_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_6d_dn_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_6d_dn_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-6d/dn%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_6d_dn_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3s_6d_ngt_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3s_6d_ngt_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3S-6d/ngt%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3s_6d_ngt_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3u_n19_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3u_n19_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3U/n19%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3u_n19_gridded_url OWNER TO srs_sst;

--
-- Name: srs_sst_l3u_southern_n19_gridded_url; Type: VIEW; Schema: srs_sst; Owner: srs_sst
--

CREATE VIEW srs_sst_l3u_southern_n19_gridded_url AS
 SELECT t.id AS timeseries_id,
    f.url AS file_url,
    f.size,
    t.product_id,
    timezone('UTC'::text, t."time") AS "time"
   FROM (timeseries t
     JOIN indexed_file f ON ((t.file_id = f.id)))
  WHERE ((f.url)::text ~~ '%L3U-S/n19%'::text)
  ORDER BY (timezone('UTC'::text, t."time"));


ALTER TABLE srs_sst_l3u_southern_n19_gridded_url OWNER TO srs_sst;

--
-- Name: timeseries_id_seq; Type: SEQUENCE; Schema: srs_sst; Owner: srs_sst
--

CREATE SEQUENCE timeseries_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE timeseries_id_seq OWNER TO srs_sst;

--
-- Name: timeseries_id_seq; Type: SEQUENCE OWNED BY; Schema: srs_sst; Owner: srs_sst
--

ALTER SEQUENCE timeseries_id_seq OWNED BY timeseries.id;


SET search_path = aatams_sattag_qc_ctd, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: file_metadata id; Type: DEFAULT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY file_metadata ALTER COLUMN id SET DEFAULT nextval('file_metadata_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: platform_metadata id; Type: DEFAULT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY platform_metadata ALTER COLUMN id SET DEFAULT nextval('platform_metadata_id_seq'::regclass);


SET search_path = abos, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: abos; Owner: postgres
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: global_attribute id; Type: DEFAULT; Schema: abos; Owner: postgres
--

ALTER TABLE ONLY global_attribute ALTER COLUMN id SET DEFAULT nextval('global_attribute_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: abos; Owner: postgres
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: abos; Owner: postgres
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


SET search_path = abos_sots, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: timeseries id; Type: DEFAULT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY timeseries ALTER COLUMN id SET DEFAULT nextval('timeseries_id_seq'::regclass);


SET search_path = anfog_dm, pg_catalog;

--
-- Name: deployments deploy_id; Type: DEFAULT; Schema: anfog_dm; Owner: anfog_dm
--

ALTER TABLE ONLY deployments ALTER COLUMN deploy_id SET DEFAULT nextval('deployments_deploy_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: anfog_dm; Owner: anfog_dm
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: anfog_dm; Owner: anfog_dm
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: anfog_dm; Owner: anfog_dm
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement; Type: DEFAULT; Schema: anfog_dm; Owner: anfog_dm
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement SET DEFAULT nextval('measurements_measurement_seq'::regclass);


--
-- Name: sensors_metadata sensor_id; Type: DEFAULT; Schema: anfog_dm; Owner: anfog_dm
--

ALTER TABLE ONLY sensors_metadata ALTER COLUMN sensor_id SET DEFAULT nextval('sensors_metadata_sensor_id_seq'::regclass);


SET search_path = anmn_acidification_nrt, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


SET search_path = anmn_am_dm, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


SET search_path = anmn_burst_avg, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: timeseries id; Type: DEFAULT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY timeseries ALTER COLUMN id SET DEFAULT nextval('timeseries_id_seq'::regclass);


SET search_path = anmn_metadata, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: file_metadata id; Type: DEFAULT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY file_metadata ALTER COLUMN id SET DEFAULT nextval('file_metadata_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


SET search_path = anmn_mhlwave, pg_catalog;

--
-- Name: harvest_mhlwave pkid; Type: DEFAULT; Schema: anmn_mhlwave; Owner: anmn_mhlwave
--

ALTER TABLE ONLY harvest_mhlwave ALTER COLUMN pkid SET DEFAULT nextval('harvest_mhlwave_pkid_seq'::regclass);


SET search_path = anmn_nrs_bgc, pg_catalog;

--
-- Name: anmn_nrs_bgc_chemistry measurement; Type: DEFAULT; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER TABLE ONLY anmn_nrs_bgc_chemistry ALTER COLUMN measurement SET DEFAULT nextval('anmn_nrs_bgc_chemistry_measurement_seq'::regclass);


--
-- Name: anmn_nrs_bgc_phypig measurement; Type: DEFAULT; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER TABLE ONLY anmn_nrs_bgc_phypig ALTER COLUMN measurement SET DEFAULT nextval('anmn_nrs_bgc_phypig_measurement_seq'::regclass);


--
-- Name: anmn_nrs_bgc_picoplankton measurement; Type: DEFAULT; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER TABLE ONLY anmn_nrs_bgc_picoplankton ALTER COLUMN measurement SET DEFAULT nextval('anmn_nrs_bgc_picoplankton_measurement_seq'::regclass);


--
-- Name: anmn_nrs_bgc_plankton_biomass measurement; Type: DEFAULT; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER TABLE ONLY anmn_nrs_bgc_plankton_biomass ALTER COLUMN measurement SET DEFAULT nextval('anmn_nrs_bgc_plankton_biomass_measurement_seq'::regclass);


--
-- Name: anmn_nrs_bgc_plankton_phytoplankton measurement; Type: DEFAULT; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER TABLE ONLY anmn_nrs_bgc_plankton_phytoplankton ALTER COLUMN measurement SET DEFAULT nextval('anmn_nrs_bgc_plankton_phytoplankton_measurement_seq'::regclass);


--
-- Name: anmn_nrs_bgc_plankton_zooplankton measurement; Type: DEFAULT; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER TABLE ONLY anmn_nrs_bgc_plankton_zooplankton ALTER COLUMN measurement SET DEFAULT nextval('anmn_nrs_bgc_plankton_zooplankton_measurement_seq'::regclass);


--
-- Name: anmn_nrs_bgc_tss_secchi measurement; Type: DEFAULT; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER TABLE ONLY anmn_nrs_bgc_tss_secchi ALTER COLUMN measurement SET DEFAULT nextval('anmn_nrs_bgc_tss_secchi_measurement_seq'::regclass);


--
-- Name: station_name station_id; Type: DEFAULT; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER TABLE ONLY station_name ALTER COLUMN station_id SET DEFAULT nextval('station_name_station_id_seq'::regclass);


SET search_path = anmn_nrs_ctd_profiles, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement; Type: DEFAULT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement SET DEFAULT nextval('measurements_measurement_seq'::regclass);


SET search_path = anmn_nrs_dar_yon, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: global_attributes_file id; Type: DEFAULT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY global_attributes_file ALTER COLUMN id SET DEFAULT nextval('global_attributes_file_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements_noqaqc measurement; Type: DEFAULT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY measurements_noqaqc ALTER COLUMN measurement SET DEFAULT nextval('measurements_noqaqc_measurement_seq'::regclass);


--
-- Name: measurements_qaqc measurement; Type: DEFAULT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY measurements_qaqc ALTER COLUMN measurement SET DEFAULT nextval('measurements_qaqc_measurement_seq'::regclass);


SET search_path = anmn_nrs_rt_bio, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: timeseries id; Type: DEFAULT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY timeseries ALTER COLUMN id SET DEFAULT nextval('timeseries_id_seq'::regclass);


SET search_path = anmn_nrs_rt_meteo, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: timeseries id; Type: DEFAULT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY timeseries ALTER COLUMN id SET DEFAULT nextval('timeseries_id_seq'::regclass);


SET search_path = anmn_nrs_rt_wave, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: timeseries id; Type: DEFAULT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY timeseries ALTER COLUMN id SET DEFAULT nextval('timeseries_id_seq'::regclass);


SET search_path = anmn_ts, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: timeseries id; Type: DEFAULT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY timeseries ALTER COLUMN id SET DEFAULT nextval('timeseries_id_seq'::regclass);


SET search_path = aodn_dart, pg_catalog;

--
-- Name: dart_records pkid; Type: DEFAULT; Schema: aodn_dart; Owner: aodn_dart
--

ALTER TABLE ONLY dart_records ALTER COLUMN pkid SET DEFAULT nextval('dart_records_pkid_seq'::regclass);


SET search_path = aodn_imas_fluorometry, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement_id; Type: DEFAULT; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement_id SET DEFAULT nextval('measurements_measurement_id_seq'::regclass);


SET search_path = aodn_mhl_sst, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement_id; Type: DEFAULT; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement_id SET DEFAULT nextval('measurements_measurement_id_seq'::regclass);


SET search_path = aodn_nsw_oeh, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: survey_metadata id; Type: DEFAULT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY survey_metadata ALTER COLUMN id SET DEFAULT nextval('survey_metadata_id_seq'::regclass);


SET search_path = aodn_ran_ctd, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement_id; Type: DEFAULT; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement_id SET DEFAULT nextval('measurements_measurement_id_seq'::regclass);


SET search_path = aodn_wamsi_sediment, pg_catalog;

--
-- Name: aodn_wamsi_sediment_data measurement_id; Type: DEFAULT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY aodn_wamsi_sediment_data ALTER COLUMN measurement_id SET DEFAULT nextval('aodn_wamsi_sediment_data_measurement_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


SET search_path = auv, pg_catalog;

--
-- Name: deployments deploy_id; Type: DEFAULT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY deployments ALTER COLUMN deploy_id SET DEFAULT nextval('deployments_deploy_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements_b measurement; Type: DEFAULT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY measurements_b ALTER COLUMN measurement SET DEFAULT nextval('measurements_b_measurement_seq'::regclass);


--
-- Name: measurements_st measurement; Type: DEFAULT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY measurements_st ALTER COLUMN measurement SET DEFAULT nextval('measurements_st_measurement_seq'::regclass);


SET search_path = auv_viewer_track, pg_catalog;

--
-- Name: auv_images pkid; Type: DEFAULT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY auv_images ALTER COLUMN pkid SET DEFAULT nextval('auv_images_pkid_seq'::regclass);


--
-- Name: auv_tracks pkid; Type: DEFAULT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY auv_tracks ALTER COLUMN pkid SET DEFAULT nextval('auv_tracks_pkid_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


SET search_path = dw_aatams_acoustic, pg_catalog;

--
-- Name: aatams_acoustic_detections_data pkid; Type: DEFAULT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY aatams_acoustic_detections_data ALTER COLUMN pkid SET DEFAULT nextval('aatams_acoustic_detections_data_pkid_seq'::regclass);


--
-- Name: aatams_acoustic_detections_map id; Type: DEFAULT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY aatams_acoustic_detections_map ALTER COLUMN id SET DEFAULT nextval('aatams_acoustic_detections_map_id_seq'::regclass);


SET search_path = faimms, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: global_attributes_file id; Type: DEFAULT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY global_attributes_file ALTER COLUMN id SET DEFAULT nextval('global_attributes_file_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements_noqaqc measurement; Type: DEFAULT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY measurements_noqaqc ALTER COLUMN measurement SET DEFAULT nextval('measurements_noqaqc_measurement_seq'::regclass);


--
-- Name: measurements_qaqc measurement; Type: DEFAULT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY measurements_qaqc ALTER COLUMN measurement SET DEFAULT nextval('measurements_qaqc_measurement_seq'::regclass);


SET search_path = future_reef_map, pg_catalog;

--
-- Name: deployments deploy_id; Type: DEFAULT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY deployments ALTER COLUMN deploy_id SET DEFAULT nextval('deployments_deploy_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement; Type: DEFAULT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement SET DEFAULT nextval('measurements_measurement_seq'::regclass);


SET search_path = generic_timestep, pg_catalog;

--
-- Name: collection id; Type: DEFAULT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY collection ALTER COLUMN id SET DEFAULT nextval('collection_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: timestep id; Type: DEFAULT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY timestep ALTER COLUMN id SET DEFAULT nextval('timestep_id_seq'::regclass);


SET search_path = soop_asf_fmt, pg_catalog;

--
-- Name: deployments deploy_id; Type: DEFAULT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY deployments ALTER COLUMN deploy_id SET DEFAULT nextval('deployments_deploy_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement; Type: DEFAULT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement SET DEFAULT nextval('measurements_measurement_seq'::regclass);


SET search_path = soop_asf_mt, pg_catalog;

--
-- Name: deployments deploy_id; Type: DEFAULT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY deployments ALTER COLUMN deploy_id SET DEFAULT nextval('deployments_deploy_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement; Type: DEFAULT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement SET DEFAULT nextval('measurements_measurement_seq'::regclass);


SET search_path = soop_auscpr, pg_catalog;

--
-- Name: pci measurement; Type: DEFAULT; Schema: soop_auscpr; Owner: soop_auscpr
--

ALTER TABLE ONLY pci ALTER COLUMN measurement SET DEFAULT nextval('pci_measurement_seq'::regclass);


--
-- Name: phyto measurement; Type: DEFAULT; Schema: soop_auscpr; Owner: soop_auscpr
--

ALTER TABLE ONLY phyto ALTER COLUMN measurement SET DEFAULT nextval('phyto_measurement_seq'::regclass);


--
-- Name: phyto_taxon_changelog measurement; Type: DEFAULT; Schema: soop_auscpr; Owner: soop_auscpr
--

ALTER TABLE ONLY phyto_taxon_changelog ALTER COLUMN measurement SET DEFAULT nextval('phyto_taxon_changelog_measurement_seq'::regclass);


--
-- Name: zoop measurement; Type: DEFAULT; Schema: soop_auscpr; Owner: soop_auscpr
--

ALTER TABLE ONLY zoop ALTER COLUMN measurement SET DEFAULT nextval('zoop_measurement_seq'::regclass);


--
-- Name: zoop_taxon_changelog measurement; Type: DEFAULT; Schema: soop_auscpr; Owner: soop_auscpr
--

ALTER TABLE ONLY zoop_taxon_changelog ALTER COLUMN measurement SET DEFAULT nextval('zoop_taxon_changelog_measurement_seq'::regclass);


SET search_path = soop_ba, pg_catalog;

--
-- Name: deployments deploy_id; Type: DEFAULT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY deployments ALTER COLUMN deploy_id SET DEFAULT nextval('deployments_deploy_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement; Type: DEFAULT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement SET DEFAULT nextval('measurements_measurement_seq'::regclass);


SET search_path = soop_co2, pg_catalog;

--
-- Name: deployments deploy_id; Type: DEFAULT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY deployments ALTER COLUMN deploy_id SET DEFAULT nextval('deployments_deploy_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement; Type: DEFAULT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement SET DEFAULT nextval('measurements_measurement_seq'::regclass);


SET search_path = soop_sst, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement_id; Type: DEFAULT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement_id SET DEFAULT nextval('measurements_measurement_id_seq'::regclass);


SET search_path = soop_tmv, pg_catalog;

--
-- Name: deployments deploy_id; Type: DEFAULT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY deployments ALTER COLUMN deploy_id SET DEFAULT nextval('deployments_deploy_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement; Type: DEFAULT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement SET DEFAULT nextval('measurements_measurement_seq'::regclass);


SET search_path = soop_tmv_nrt, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


SET search_path = soop_trv, pg_catalog;

--
-- Name: deployments deploy_id; Type: DEFAULT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY deployments ALTER COLUMN deploy_id SET DEFAULT nextval('deployments_deploy_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements_cphl measurement; Type: DEFAULT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_cphl ALTER COLUMN measurement SET DEFAULT nextval('measurements_cphl_measurement_seq'::regclass);


--
-- Name: measurements_merged_data measurement; Type: DEFAULT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_merged_data ALTER COLUMN measurement SET DEFAULT nextval('measurements_merged_data_measurement_seq'::regclass);


--
-- Name: measurements_psal measurement; Type: DEFAULT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_psal ALTER COLUMN measurement SET DEFAULT nextval('measurements_psal_measurement_seq'::regclass);


--
-- Name: measurements_temp measurement; Type: DEFAULT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_temp ALTER COLUMN measurement SET DEFAULT nextval('measurements_temp_measurement_seq'::regclass);


--
-- Name: measurements_turb measurement; Type: DEFAULT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_turb ALTER COLUMN measurement SET DEFAULT nextval('measurements_turb_measurement_seq'::regclass);


--
-- Name: table_master measurements; Type: DEFAULT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY table_master ALTER COLUMN measurements SET DEFAULT nextval('table_master_measurements_seq'::regclass);


SET search_path = srs_altimetry, pg_catalog;

--
-- Name: deployments deploy_id; Type: DEFAULT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY deployments ALTER COLUMN deploy_id SET DEFAULT nextval('deployments_deploy_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement; Type: DEFAULT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement SET DEFAULT nextval('measurements_measurement_seq'::regclass);


SET search_path = srs_oc_bodbaw, pg_catalog;

--
-- Name: deployments deploy_id; Type: DEFAULT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY deployments ALTER COLUMN deploy_id SET DEFAULT nextval('deployments_deploy_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement; Type: DEFAULT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement SET DEFAULT nextval('measurements_measurement_seq'::regclass);


SET search_path = srs_oc_ljco_wws, pg_catalog;

--
-- Name: deployments deploy_id; Type: DEFAULT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY deployments ALTER COLUMN deploy_id SET DEFAULT nextval('deployments_deploy_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements_daily_ecotriplet_fv02 measurement_id; Type: DEFAULT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_daily_ecotriplet_fv02 ALTER COLUMN measurement_id SET DEFAULT nextval('measurements_daily_ecotriplet_fv02_measurement_id_seq'::regclass);


--
-- Name: measurements_daily_fv02_gridded measurement_id; Type: DEFAULT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_daily_fv02_gridded ALTER COLUMN measurement_id SET DEFAULT nextval('measurements_daily_fv02_gridded_measurement_id_seq'::regclass);


--
-- Name: measurements_daily_wqm_fv02 measurement_id; Type: DEFAULT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_daily_wqm_fv02 ALTER COLUMN measurement_id SET DEFAULT nextval('measurements_daily_wqm_fv02_measurement_id_seq'::regclass);


--
-- Name: measurements_hourly_wqm_fv01 measurement_id; Type: DEFAULT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_hourly_wqm_fv01 ALTER COLUMN measurement_id SET DEFAULT nextval('measurements_hourly_wqm_fv01_measurement_id_seq'::regclass);


--
-- Name: measurements_mtw_water_monthly_fv01 measurement_id; Type: DEFAULT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_mtw_water_monthly_fv01 ALTER COLUMN measurement_id SET DEFAULT nextval('measurements_mtw_water_monthly_fv01_measurement_id_seq'::regclass);


--
-- Name: measurements_mtw_weather_monthly_fv01 measurement_id; Type: DEFAULT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_mtw_weather_monthly_fv01 ALTER COLUMN measurement_id SET DEFAULT nextval('measurements_mtw_weather_monthly_fv01_measurement_id_seq'::regclass);


SET search_path = srs_oc_soop_rad, pg_catalog;

--
-- Name: deployments deploy_id; Type: DEFAULT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY deployments ALTER COLUMN deploy_id SET DEFAULT nextval('deployments_deploy_id_seq'::regclass);


--
-- Name: file_harvest id; Type: DEFAULT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: measurements measurement; Type: DEFAULT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY measurements ALTER COLUMN measurement SET DEFAULT nextval('measurements_measurement_seq'::regclass);


SET search_path = srs_sst, pg_catalog;

--
-- Name: file_harvest id; Type: DEFAULT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY file_harvest ALTER COLUMN id SET DEFAULT nextval('file_harvest_id_seq'::regclass);


--
-- Name: index_job id; Type: DEFAULT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY index_job ALTER COLUMN id SET DEFAULT nextval('index_job_id_seq'::regclass);


--
-- Name: indexed_file id; Type: DEFAULT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY indexed_file ALTER COLUMN id SET DEFAULT nextval('indexed_file_id_seq'::regclass);


--
-- Name: timeseries id; Type: DEFAULT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY timeseries ALTER COLUMN id SET DEFAULT nextval('timeseries_id_seq'::regclass);


SET search_path = aatams_sattag_qc_ctd, pg_catalog;

--
-- Name: data_centre data_centre_pk; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY data_centre
    ADD CONSTRAINT data_centre_pk PRIMARY KEY (code);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file_metadata file_metadata_file_name_uc; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY file_metadata
    ADD CONSTRAINT file_metadata_file_name_uc UNIQUE (file_id, name);


--
-- Name: file_metadata file_metadata_pk; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY file_metadata
    ADD CONSTRAINT file_metadata_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: platform_metadata platform_metadata_id_pk; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY platform_metadata
    ADD CONSTRAINT platform_metadata_id_pk PRIMARY KEY (id);


--
-- Name: profile_general profile_general_pkey; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY profile_general
    ADD CONSTRAINT profile_general_pkey PRIMARY KEY (file_id, profile_no);


--
-- Name: profile_measurements profile_measurements_pkey; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY profile_measurements
    ADD CONSTRAINT profile_measurements_pkey PRIMARY KEY (file_id, profile_no, level_no);


--
-- Name: profile_metadata profile_metadata_pkey; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY profile_metadata
    ADD CONSTRAINT profile_metadata_pkey PRIMARY KEY (file_id);


--
-- Name: profile_param_calibration profile_param_calibration_pkey; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY profile_param_calibration
    ADD CONSTRAINT profile_param_calibration_pkey PRIMARY KEY (file_id, profile_no, calib_no, param_no);


--
-- Name: profile_params profile_params_pkey; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY profile_params
    ADD CONSTRAINT profile_params_pkey PRIMARY KEY (file_id, profile_no, param_no);


--
-- Name: region region_pk; Type: CONSTRAINT; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER TABLE ONLY region
    ADD CONSTRAINT region_pk PRIMARY KEY (name);


SET search_path = abos_sots, pg_catalog;

--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: timeseries timeseries_pk; Type: CONSTRAINT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_pk PRIMARY KEY (id);


SET search_path = anmn_acidification_nrt, pg_catalog;

--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurement measurement_pk; Type: CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY measurement
    ADD CONSTRAINT measurement_pk PRIMARY KEY (file_id, index);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: timeseries timeseries_deployment_code_unique; Type: CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_deployment_code_unique UNIQUE (deployment_code);


--
-- Name: timeseries timeseries_pk; Type: CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_pk PRIMARY KEY (file_id);


--
-- Name: timeseries timeseries_platform_time_start_unique; Type: CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_platform_time_start_unique UNIQUE (platform_code, time_coverage_start);


SET search_path = anmn_am_dm, pg_catalog;

--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements measurements_pk; Type: CONSTRAINT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_pk PRIMARY KEY (file_id, measurement_id);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: timeseries timeseries_pk; Type: CONSTRAINT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_pk PRIMARY KEY (file_id);


SET search_path = anmn_burst_avg, pg_catalog;

--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurement measurement_pk; Type: CONSTRAINT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY measurement
    ADD CONSTRAINT measurement_pk PRIMARY KEY (ts_id, index);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: timeseries timeseries_deployment_instrument_depth_uc; Type: CONSTRAINT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_deployment_instrument_depth_uc UNIQUE (deployment_code, instrument, instrument_nominal_depth);


--
-- Name: timeseries timeseries_pk; Type: CONSTRAINT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_pk PRIMARY KEY (id);


SET search_path = anmn_metadata, pg_catalog;

--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file_metadata file_metadata_file_id_key; Type: CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY file_metadata
    ADD CONSTRAINT file_metadata_file_id_key UNIQUE (file_id);


--
-- Name: file_metadata file_metadata_pkey; Type: CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY file_metadata
    ADD CONSTRAINT file_metadata_pkey PRIMARY KEY (id);


--
-- Name: global_attribute global_attribute_pk; Type: CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY global_attribute
    ADD CONSTRAINT global_attribute_pk PRIMARY KEY (file_id, name);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: variable_attribute variable_attribute_pk; Type: CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY variable_attribute
    ADD CONSTRAINT variable_attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


SET search_path = anmn_nrs_ctd_profiles, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: deployments deployments_pkey; Type: CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (file_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements measurements_pkey; Type: CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


SET search_path = anmn_nrs_dar_yon, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: global_attributes_file deployments_pkey; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY global_attributes_file
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (file_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements_noqaqc measurements_noqaqc_pkey; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY measurements_noqaqc
    ADD CONSTRAINT measurements_noqaqc_pkey PRIMARY KEY (measurement);


--
-- Name: measurements_qaqc measurements_qaqc_pkey; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY measurements_qaqc
    ADD CONSTRAINT measurements_qaqc_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: timeseries_feature_deployments timeseries_feature_pkey; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY timeseries_feature_deployments
    ADD CONSTRAINT timeseries_feature_pkey PRIMARY KEY (channel_id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


SET search_path = anmn_nrs_rt_bio, pg_catalog;

--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurement measurement_fk; Type: CONSTRAINT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY measurement
    ADD CONSTRAINT measurement_fk PRIMARY KEY (ts_id, index);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: timeseries timeseries_pk; Type: CONSTRAINT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_pk PRIMARY KEY (id);


--
-- Name: timeseries timeseries_platform_depth_start_unique; Type: CONSTRAINT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_platform_depth_start_unique UNIQUE (platform_code, instrument_nominal_depth, time_coverage_start);


SET search_path = anmn_nrs_rt_meteo, pg_catalog;

--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurement measurement_fk; Type: CONSTRAINT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY measurement
    ADD CONSTRAINT measurement_fk PRIMARY KEY (ts_id, index);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: timeseries timeseries_pk; Type: CONSTRAINT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_pk PRIMARY KEY (id);


--
-- Name: timeseries timeseries_platform_start_unique; Type: CONSTRAINT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_platform_start_unique UNIQUE (platform_code, time_coverage_start);


SET search_path = anmn_nrs_rt_wave, pg_catalog;

--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurement measurement_fk; Type: CONSTRAINT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY measurement
    ADD CONSTRAINT measurement_fk PRIMARY KEY (ts_id, index);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: timeseries timeseries_pk; Type: CONSTRAINT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_pk PRIMARY KEY (id);


--
-- Name: timeseries timeseries_platform_start_unique; Type: CONSTRAINT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_platform_start_unique UNIQUE (platform_code, time_coverage_start);


SET search_path = anmn_ts, pg_catalog;

--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurement measurement_fk; Type: CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY measurement
    ADD CONSTRAINT measurement_fk PRIMARY KEY (ts_id, index);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: timeseries timeseries_deployment_instrument_depth_uc; Type: CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_deployment_instrument_depth_uc UNIQUE (deployment_code, instrument, instrument_nominal_depth);


--
-- Name: timeseries timeseries_deployment_serial_number_uc; Type: CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_deployment_serial_number_uc UNIQUE (deployment_code, instrument_serial_number);


--
-- Name: timeseries timeseries_pk; Type: CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_pk PRIMARY KEY (id);


SET search_path = aodn_nsw_oeh, pg_catalog;

--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: survey_metadata survey_metadata_file_id_key; Type: CONSTRAINT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY survey_metadata
    ADD CONSTRAINT survey_metadata_file_id_key UNIQUE (file_id);


--
-- Name: survey_metadata survey_metadata_pkey; Type: CONSTRAINT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY survey_metadata
    ADD CONSTRAINT survey_metadata_pkey PRIMARY KEY (id);


SET search_path = aodn_wamsi_sediment, pg_catalog;

--
-- Name: aodn_wamsi_sediment_data aodn_wamsi_sediment_pkey; Type: CONSTRAINT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY aodn_wamsi_sediment_data
    ADD CONSTRAINT aodn_wamsi_sediment_pkey PRIMARY KEY (measurement_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


SET search_path = aus_phyto_db_ongoing, pg_catalog;

--
-- Name: apd_metadata apd_metadata_pkey; Type: CONSTRAINT; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

ALTER TABLE ONLY apd_metadata
    ADD CONSTRAINT apd_metadata_pkey PRIMARY KEY ("PROJECT_ID");


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


SET search_path = auv, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: campaign_names campaign_name_pkey; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY campaign_names
    ADD CONSTRAINT campaign_name_pkey PRIMARY KEY (campaign_name);


--
-- Name: deployments deployments_pkey; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (deploy_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements_b measurements_b_pkey; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY measurements_b
    ADD CONSTRAINT measurements_b_pkey PRIMARY KEY (measurement);


--
-- Name: measurements_st measurements_st_pkey; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY measurements_st
    ADD CONSTRAINT measurements_st_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


--
-- Name: visualisation_wms visualisation_wms_pkey; Type: CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY visualisation_wms
    ADD CONSTRAINT visualisation_wms_pkey PRIMARY KEY (dive_name);


SET search_path = auv_viewer_track, pg_catalog;

--
-- Name: auv_images auv_images_pkey; Type: CONSTRAINT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY auv_images
    ADD CONSTRAINT auv_images_pkey PRIMARY KEY (pkid);


--
-- Name: auv_tracks auv_tracks_pkey; Type: CONSTRAINT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY auv_tracks
    ADD CONSTRAINT auv_tracks_pkey PRIMARY KEY (pkid);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


SET search_path = dw_aatams_acoustic, pg_catalog;

--
-- Name: aatams_acoustic_detections_data aatams_acoustic_detections_data_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY aatams_acoustic_detections_data
    ADD CONSTRAINT aatams_acoustic_detections_data_pkey PRIMARY KEY (pkid);


--
-- Name: aatams_acoustic_detections_map aatams_acoustic_detections_map_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY aatams_acoustic_detections_map
    ADD CONSTRAINT aatams_acoustic_detections_map_pkey PRIMARY KEY (id);


--
-- Name: animal_measurement animal_measurement_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY animal_measurement
    ADD CONSTRAINT animal_measurement_pkey PRIMARY KEY (id);


--
-- Name: animal_measurement_type animal_measurement_type_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY animal_measurement_type
    ADD CONSTRAINT animal_measurement_type_pkey PRIMARY KEY (id);


--
-- Name: animal animal_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY animal
    ADD CONSTRAINT animal_pkey PRIMARY KEY (id);


--
-- Name: animal_release animal_release_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY animal_release
    ADD CONSTRAINT animal_release_pkey PRIMARY KEY (id);


--
-- Name: device_model device_model_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY device_model
    ADD CONSTRAINT device_model_pkey PRIMARY KEY (id);


--
-- Name: device device_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY device
    ADD CONSTRAINT device_pkey PRIMARY KEY (id);


--
-- Name: installation installation_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY installation
    ADD CONSTRAINT installation_pkey PRIMARY KEY (id);


--
-- Name: installation_station installation_station_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY installation_station
    ADD CONSTRAINT installation_station_pkey PRIMARY KEY (id);


--
-- Name: installation_summary installation_summary_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY installation_summary
    ADD CONSTRAINT installation_summary_pkey PRIMARY KEY (project_name, installation_name, station_name);


--
-- Name: measurement_unit measurement_unit_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY measurement_unit
    ADD CONSTRAINT measurement_unit_pkey PRIMARY KEY (id);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: project project_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY project
    ADD CONSTRAINT project_pkey PRIMARY KEY (id);


--
-- Name: receiver_deployment receiver_deployment_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY receiver_deployment
    ADD CONSTRAINT receiver_deployment_pkey PRIMARY KEY (id);


--
-- Name: receiver_recovery receiver_recovery_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY receiver_recovery
    ADD CONSTRAINT receiver_recovery_pkey PRIMARY KEY (id);


--
-- Name: sensor sensor_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY sensor
    ADD CONSTRAINT sensor_pkey PRIMARY KEY (id);


--
-- Name: sex sex_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY sex
    ADD CONSTRAINT sex_pkey PRIMARY KEY (id);


--
-- Name: species species_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY species
    ADD CONSTRAINT species_pkey PRIMARY KEY (id);


--
-- Name: surgery surgery_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY surgery
    ADD CONSTRAINT surgery_pkey PRIMARY KEY (id);


--
-- Name: transmitter_type transmitter_type_pkey; Type: CONSTRAINT; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER TABLE ONLY transmitter_type
    ADD CONSTRAINT transmitter_type_pkey PRIMARY KEY (id);


SET search_path = faimms, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: global_attributes_file deployments_pkey; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY global_attributes_file
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (file_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements_noqaqc measurements_noqaqc_pkey; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY measurements_noqaqc
    ADD CONSTRAINT measurements_noqaqc_pkey PRIMARY KEY (measurement);


--
-- Name: measurements_qaqc measurements_qaqc_pkey; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY measurements_qaqc
    ADD CONSTRAINT measurements_qaqc_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: timeseries_feature_deployments timeseries_feature_pkey; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY timeseries_feature_deployments
    ADD CONSTRAINT timeseries_feature_pkey PRIMARY KEY (channel_id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


SET search_path = future_reef_map, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: deployments deployments_pkey; Type: CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (deploy_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements measurements_pkey; Type: CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


SET search_path = generic_timestep, pg_catalog;

--
-- Name: collection collection_pk; Type: CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY collection
    ADD CONSTRAINT collection_pk PRIMARY KEY (id);


--
-- Name: collection collection_uc; Type: CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY collection
    ADD CONSTRAINT collection_uc UNIQUE (name);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: timestep timestep_pk; Type: CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY timestep
    ADD CONSTRAINT timestep_pk PRIMARY KEY (id);


--
-- Name: timestep timestep_uc; Type: CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY timestep
    ADD CONSTRAINT timestep_uc UNIQUE (collection_id, "TIME");


SET search_path = soop_asf_fmt, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: deployments deployments_pkey; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (deploy_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements measurements_pkey; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


--
-- Name: vessel_names vessel_names_pkey; Type: CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY vessel_names
    ADD CONSTRAINT vessel_names_pkey PRIMARY KEY (vessel_name);


SET search_path = soop_asf_mt, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: deployments deployments_pkey; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (deploy_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements measurements_pkey; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


--
-- Name: vessel_names vessel_names_pkey; Type: CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY vessel_names
    ADD CONSTRAINT vessel_names_pkey PRIMARY KEY (vessel_name);


SET search_path = soop_ba, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: deployments deployments_pkey; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (deploy_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements measurements_pkey; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


--
-- Name: vessel_names vessel_names_pkey; Type: CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY vessel_names
    ADD CONSTRAINT vessel_names_pkey PRIMARY KEY (vessel_name);


SET search_path = soop_co2, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: deployments deployments_pkey; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (deploy_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements measurements_pkey; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


--
-- Name: vessel_names vessel_names_pkey; Type: CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY vessel_names
    ADD CONSTRAINT vessel_names_pkey PRIMARY KEY (vessel_name);


SET search_path = soop_sst, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements measurements_pkey; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_pkey PRIMARY KEY (measurement_id);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: soop_sst_dm_trajectory_map soop_sst_dm_trajectory_map_pkey; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY soop_sst_dm_trajectory_map
    ADD CONSTRAINT soop_sst_dm_trajectory_map_pkey PRIMARY KEY (trajectory_id);


--
-- Name: soop_sst_nrt_trajectory_map soop_sst_nrt_trajectory_map_pkey; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY soop_sst_nrt_trajectory_map
    ADD CONSTRAINT soop_sst_nrt_trajectory_map_pkey PRIMARY KEY (trajectory_id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


--
-- Name: vessel_names vessel_names_pkey; Type: CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY vessel_names
    ADD CONSTRAINT vessel_names_pkey PRIMARY KEY (vessel_name);


SET search_path = soop_tmv, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: deployments deployments_pkey; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (deploy_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements measurements_pkey; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


--
-- Name: vessel_names vessel_names_pkey; Type: CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY vessel_names
    ADD CONSTRAINT vessel_names_pkey PRIMARY KEY (vessel_name);


SET search_path = soop_tmv_nrt, pg_catalog;

--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


SET search_path = soop_trv, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: deployments deployments_pkey; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (deploy_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements_cphl measurements_cphl_pkey; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_cphl
    ADD CONSTRAINT measurements_cphl_pkey PRIMARY KEY (measurement);


--
-- Name: measurements_merged_data measurements_merged_data_pkey; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_merged_data
    ADD CONSTRAINT measurements_merged_data_pkey PRIMARY KEY (measurement);


--
-- Name: measurements_psal measurements_psal_pkey; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_psal
    ADD CONSTRAINT measurements_psal_pkey PRIMARY KEY (measurement);


--
-- Name: measurements_temp measurements_temp_pkey; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_temp
    ADD CONSTRAINT measurements_temp_pkey PRIMARY KEY (measurement);


--
-- Name: measurements_turb measurements_turb_pkey; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_turb
    ADD CONSTRAINT measurements_turb_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


--
-- Name: vessel_names vessel_names_pkey; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY vessel_names
    ADD CONSTRAINT vessel_names_pkey PRIMARY KEY (vessel_name);


--
-- Name: visualisation_wms visualisation_wms_pkey; Type: CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY visualisation_wms
    ADD CONSTRAINT visualisation_wms_pkey PRIMARY KEY (trip_id);


SET search_path = srs_altimetry, pg_catalog;

--
-- Name: deployments deployments_pkey; Type: CONSTRAINT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (deploy_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements measurements_pkey; Type: CONSTRAINT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: visualisation_wms visualisation_wms_pkey; Type: CONSTRAINT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY visualisation_wms
    ADD CONSTRAINT visualisation_wms_pkey PRIMARY KEY (file_id);


SET search_path = srs_oc_bodbaw, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: cruise_id cruise_id_pkey; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY cruise_id
    ADD CONSTRAINT cruise_id_pkey PRIMARY KEY (cruise_id);


--
-- Name: deployments deployments_pkey; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (deploy_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: srs_oc_bodbaw_trajectory_profile_map file_id; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY srs_oc_bodbaw_trajectory_profile_map
    ADD CONSTRAINT file_id PRIMARY KEY (file_id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements measurements_pkey; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


SET search_path = srs_oc_ljco_wws, pg_catalog;

--
-- Name: deployments deployments_pkey; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (deploy_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements_daily_ecotriplet_fv02 measurements_daily_ecotriplet_fv02_pkey; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_daily_ecotriplet_fv02
    ADD CONSTRAINT measurements_daily_ecotriplet_fv02_pkey PRIMARY KEY (measurement_id);


--
-- Name: measurements_daily_fv02_gridded measurements_daily_fv02_gridded_pkey; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_daily_fv02_gridded
    ADD CONSTRAINT measurements_daily_fv02_gridded_pkey PRIMARY KEY (measurement_id);


--
-- Name: measurements_daily_wqm_fv02 measurements_daily_wqm_fv02_pkey; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_daily_wqm_fv02
    ADD CONSTRAINT measurements_daily_wqm_fv02_pkey PRIMARY KEY (measurement_id);


--
-- Name: measurements_hourly_wqm_fv01 measurements_hourly_wqm_fv01_pkey; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_hourly_wqm_fv01
    ADD CONSTRAINT measurements_hourly_wqm_fv01_pkey PRIMARY KEY (measurement_id);


--
-- Name: measurements_mtw_water_monthly_fv01 measurements_mtw_water_monthly_fv01_pkey; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_mtw_water_monthly_fv01
    ADD CONSTRAINT measurements_mtw_water_monthly_fv01_pkey PRIMARY KEY (measurement_id);


--
-- Name: measurements_mtw_weather_monthly_fv01 measurements_mtw_weather_monthly_fv01_pkey; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_mtw_weather_monthly_fv01
    ADD CONSTRAINT measurements_mtw_weather_monthly_fv01_pkey PRIMARY KEY (measurement_id);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: visualisation_wms_daily_wqm_fv02 visualisation_wms_daily_wqm_fv02_pkey; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY visualisation_wms_daily_wqm_fv02
    ADD CONSTRAINT visualisation_wms_daily_wqm_fv02_pkey PRIMARY KEY (file_id);


--
-- Name: visualisation_wms_hourly_wqm_fv01 visualisation_wms_hourly_wqm_fv01_pkey; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY visualisation_wms_hourly_wqm_fv01
    ADD CONSTRAINT visualisation_wms_hourly_wqm_fv01_pkey PRIMARY KEY (file_id);


--
-- Name: visualisation_wms_mtw_monthly_fv01 visualisation_wms_mtw_monthly_fv01_pkey; Type: CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY visualisation_wms_mtw_monthly_fv01
    ADD CONSTRAINT visualisation_wms_mtw_monthly_fv01_pkey PRIMARY KEY (file_id);


SET search_path = srs_oc_soop_rad, pg_catalog;

--
-- Name: attribute attribute_pk; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY attribute
    ADD CONSTRAINT attribute_pk PRIMARY KEY (file_id, container, name);


--
-- Name: deployments deployments_pkey; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT deployments_pkey PRIMARY KEY (deploy_id);


--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: file file_pk; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY file
    ADD CONSTRAINT file_pk PRIMARY KEY (file_id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: measurements measurements_pkey; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_pkey PRIMARY KEY (measurement);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: variable variable_pk; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_pk PRIMARY KEY (file_id, name);


--
-- Name: vessel_names vessel_names_pkey; Type: CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY vessel_names
    ADD CONSTRAINT vessel_names_pkey PRIMARY KEY (vessel_name);


SET search_path = srs_sst, pg_catalog;

--
-- Name: file_harvest file_harvest_harvest_type_file_id_unique; Type: CONSTRAINT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_harvest_type_file_id_unique UNIQUE (harvest_type, file_id);


--
-- Name: file_harvest file_harvest_pk; Type: CONSTRAINT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY file_harvest
    ADD CONSTRAINT file_harvest_pk PRIMARY KEY (id);


--
-- Name: index_job index_job_name_uc; Type: CONSTRAINT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_name_uc UNIQUE (name);


--
-- Name: index_job index_job_pk; Type: CONSTRAINT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY index_job
    ADD CONSTRAINT index_job_pk PRIMARY KEY (id);


--
-- Name: indexed_file indexed_file_job_url_uc; Type: CONSTRAINT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_job_url_uc UNIQUE (job_id, url);


--
-- Name: indexed_file indexed_file_pk; Type: CONSTRAINT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY indexed_file
    ADD CONSTRAINT indexed_file_pk PRIMARY KEY (id);


--
-- Name: databasechangelog pk_databasechangelog; Type: CONSTRAINT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY databasechangelog
    ADD CONSTRAINT pk_databasechangelog PRIMARY KEY (id, author, filename);


--
-- Name: databasechangeloglock pk_databasechangeloglock; Type: CONSTRAINT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY databasechangeloglock
    ADD CONSTRAINT pk_databasechangeloglock PRIMARY KEY (id);


--
-- Name: timeseries timeseries_pk; Type: CONSTRAINT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_pk PRIMARY KEY (id);


SET search_path = aatams_sattag_qc_ctd, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: platform_metadata_file_id_idx; Type: INDEX; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE UNIQUE INDEX platform_metadata_file_id_idx ON platform_metadata USING btree (file_id);


--
-- Name: profile_general_position_gist; Type: INDEX; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE INDEX profile_general_position_gist ON profile_general USING gist ("position");


--
-- Name: region_geom_idx; Type: INDEX; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

CREATE INDEX region_geom_idx ON region USING gist (geom);


SET search_path = abos_sots, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: abos_sots; Owner: abos_sots
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: abos_sots; Owner: abos_sots
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: timeseries_gist_idx; Type: INDEX; Schema: abos_sots; Owner: abos_sots
--

CREATE INDEX timeseries_gist_idx ON timeseries USING gist (geom);


SET search_path = anmn_acidification_nrt, pg_catalog;

--
-- Name: timeseries_gist_idx; Type: INDEX; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

CREATE INDEX timeseries_gist_idx ON timeseries USING gist (geom);


SET search_path = anmn_am_dm, pg_catalog;

--
-- Name: timeseries_gist_idx; Type: INDEX; Schema: anmn_am_dm; Owner: anmn_am_dm
--

CREATE INDEX timeseries_gist_idx ON timeseries USING gist (geom);


SET search_path = anmn_burst_avg, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: timeseries_gist_idx; Type: INDEX; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

CREATE INDEX timeseries_gist_idx ON timeseries USING gist (geom);


SET search_path = anmn_metadata, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: file_metadata_gist_idx; Type: INDEX; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE INDEX file_metadata_gist_idx ON file_metadata USING gist (geom);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: anmn_metadata; Owner: anmn_metadata
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


SET search_path = anmn_nrs_ctd_profiles, pg_catalog;

--
-- Name: deployments_gist_idx; Type: INDEX; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE INDEX deployments_gist_idx ON deployments USING gist (geom);


--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_file_id_idx; Type: INDEX; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE INDEX measurements_file_id_idx ON measurements USING btree (file_id);


--
-- Name: measurements_time_dpth_idx; Type: INDEX; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

CREATE INDEX measurements_time_dpth_idx ON measurements USING btree (file_id, "TIME", "DEPTH");


SET search_path = anmn_nrs_dar_yon, pg_catalog;

--
-- Name: channelid_noqaqc_idx; Type: INDEX; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE INDEX channelid_noqaqc_idx ON measurements_noqaqc USING btree (channel_id);


--
-- Name: channelid_qaqc_idx; Type: INDEX; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE INDEX channelid_qaqc_idx ON measurements_qaqc USING btree (channel_id);


--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: file_id_att_idx; Type: INDEX; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE INDEX file_id_att_idx ON global_attributes_file USING btree (file_id);


--
-- Name: file_id_idx; Type: INDEX; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE INDEX file_id_idx ON indexed_file USING btree (id);


--
-- Name: file_id_noqaqc_idx; Type: INDEX; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE INDEX file_id_noqaqc_idx ON measurements_noqaqc USING btree (file_id);


--
-- Name: file_id_qaqc_idx; Type: INDEX; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE INDEX file_id_qaqc_idx ON measurements_qaqc USING btree (file_id);


--
-- Name: file_id_var_idx; Type: INDEX; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE INDEX file_id_var_idx ON variable USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_noqaqc_data_id_time_idx; Type: INDEX; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE INDEX measurements_noqaqc_data_id_time_idx ON measurements_noqaqc USING btree (channel_id, "TIME");


--
-- Name: measurements_qaqc_data_id_time_idx; Type: INDEX; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE INDEX measurements_qaqc_data_id_time_idx ON measurements_qaqc USING btree (channel_id, "TIME");


--
-- Name: timeseries_feature_deployments_gist_idx; Type: INDEX; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE INDEX timeseries_feature_deployments_gist_idx ON timeseries_feature_deployments USING gist (geom);


--
-- Name: timeseries_feature_deployments_varname_gist_idx; Type: INDEX; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

CREATE INDEX timeseries_feature_deployments_varname_gist_idx ON timeseries_feature_deployments_varname USING gist (geom);


SET search_path = anmn_nrs_rt_bio, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: timeseries_gist_idx; Type: INDEX; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

CREATE INDEX timeseries_gist_idx ON timeseries USING gist (geom);


SET search_path = anmn_nrs_rt_meteo, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: timeseries_gist_idx; Type: INDEX; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

CREATE INDEX timeseries_gist_idx ON timeseries USING gist (geom);


SET search_path = anmn_nrs_rt_wave, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: timeseries_gist_idx; Type: INDEX; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

CREATE INDEX timeseries_gist_idx ON timeseries USING gist (geom);


SET search_path = anmn_ts, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: anmn_ts; Owner: anmn_ts
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: anmn_ts; Owner: anmn_ts
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: timeseries_gist_idx; Type: INDEX; Schema: anmn_ts; Owner: anmn_ts
--

CREATE INDEX timeseries_gist_idx ON timeseries USING gist (geom);


--
-- Name: timeseries_time_idx; Type: INDEX; Schema: anmn_ts; Owner: anmn_ts
--

CREATE INDEX timeseries_time_idx ON measurement USING btree ("TIME");


SET search_path = aodn_nsw_oeh, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: survey_metadata_gist_idx; Type: INDEX; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

CREATE INDEX survey_metadata_gist_idx ON survey_metadata USING gist (geom);


SET search_path = aodn_wamsi_sediment, pg_catalog;

--
-- Name: aodn_wamsi_sediment_gist_idx; Type: INDEX; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

CREATE INDEX aodn_wamsi_sediment_gist_idx ON aodn_wamsi_sediment_data USING gist (geom);


SET search_path = aus_phyto_db_ongoing, pg_catalog;

--
-- Name: measurement_idx; Type: INDEX; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

CREATE INDEX measurement_idx ON apd_data USING btree ("PROJECT_ID");


SET search_path = auv, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: auv; Owner: auv
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: auv; Owner: auv
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_b_gist_idx; Type: INDEX; Schema: auv; Owner: auv
--

CREATE INDEX measurements_b_gist_idx ON measurements_b USING gist (geom);


--
-- Name: measurements_idx; Type: INDEX; Schema: auv; Owner: auv
--

CREATE INDEX measurements_idx ON measurements_merged_data USING btree ("TIME");


--
-- Name: measurements_merged_data_gist_idx; Type: INDEX; Schema: auv; Owner: auv
--

CREATE INDEX measurements_merged_data_gist_idx ON measurements_merged_data USING gist (geom);


--
-- Name: measurements_st_gist_idx; Type: INDEX; Schema: auv; Owner: auv
--

CREATE INDEX measurements_st_gist_idx ON measurements_st USING gist (geom);


--
-- Name: table_master_gist_idx; Type: INDEX; Schema: auv; Owner: auv
--

CREATE INDEX table_master_gist_idx ON table_master USING gist (geom);


--
-- Name: time_b_index; Type: INDEX; Schema: auv; Owner: auv
--

CREATE INDEX time_b_index ON measurements_b USING btree ("TIME");


--
-- Name: time_st_index; Type: INDEX; Schema: auv; Owner: auv
--

CREATE INDEX time_st_index ON measurements_st USING btree ("TIME");


--
-- Name: visualisation_wms_gist_idx; Type: INDEX; Schema: auv; Owner: auv
--

CREATE INDEX visualisation_wms_gist_idx ON visualisation_wms USING gist (geom);


SET search_path = auv_viewer_track, pg_catalog;

--
-- Name: auv_images_fk_idx; Type: INDEX; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE INDEX auv_images_fk_idx ON auv_images USING btree (fk_auv_tracks, pkid);


--
-- Name: auv_images_geom_gist_idx; Type: INDEX; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE INDEX auv_images_geom_gist_idx ON auv_images USING gist (geom);


--
-- Name: auv_images_time_idx; Type: INDEX; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE INDEX auv_images_time_idx ON auv_images USING btree ("time");


--
-- Name: auv_tracks_geom_gist_idx; Type: INDEX; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE INDEX auv_tracks_geom_gist_idx ON auv_tracks USING gist (geom);


--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: auv_viewer_track; Owner: auv_viewer_track
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


SET search_path = dw_aatams_acoustic, pg_catalog;

--
-- Name: aatams_acoustic_data_idx; Type: INDEX; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE INDEX aatams_acoustic_data_idx ON aatams_acoustic_detections_data USING gist (geom);


--
-- Name: aatams_acoustic_detections_data_idx; Type: INDEX; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE INDEX aatams_acoustic_detections_data_idx ON aatams_acoustic_detections_data USING btree (transmitter_id, timezone('UTC'::text, detection_date));


--
-- Name: aatams_acoustic_detections_map_idx; Type: INDEX; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE INDEX aatams_acoustic_detections_map_idx ON aatams_acoustic_detections_map USING btree (transmitter_id, station_name);


--
-- Name: aatams_acoustic_map_idx; Type: INDEX; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE INDEX aatams_acoustic_map_idx ON aatams_acoustic_detections_map USING gist (geom);


--
-- Name: installation_station_idx; Type: INDEX; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

CREATE INDEX installation_station_idx ON installation_station USING gist (location);


SET search_path = faimms, pg_catalog;

--
-- Name: channelid_noqaqc_idx; Type: INDEX; Schema: faimms; Owner: faimms
--

CREATE INDEX channelid_noqaqc_idx ON measurements_noqaqc USING btree (channel_id);


--
-- Name: channelid_qaqc_idx; Type: INDEX; Schema: faimms; Owner: faimms
--

CREATE INDEX channelid_qaqc_idx ON measurements_qaqc USING btree (channel_id);


--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: faimms; Owner: faimms
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: file_id_att_idx; Type: INDEX; Schema: faimms; Owner: faimms
--

CREATE INDEX file_id_att_idx ON global_attributes_file USING btree (file_id);


--
-- Name: file_id_idx; Type: INDEX; Schema: faimms; Owner: faimms
--

CREATE INDEX file_id_idx ON indexed_file USING btree (id);


--
-- Name: file_id_noqaqc_idx; Type: INDEX; Schema: faimms; Owner: faimms
--

CREATE INDEX file_id_noqaqc_idx ON measurements_noqaqc USING btree (file_id);


--
-- Name: file_id_qaqc_idx; Type: INDEX; Schema: faimms; Owner: faimms
--

CREATE INDEX file_id_qaqc_idx ON measurements_qaqc USING btree (file_id);


--
-- Name: file_id_var_idx; Type: INDEX; Schema: faimms; Owner: faimms
--

CREATE INDEX file_id_var_idx ON variable USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: faimms; Owner: faimms
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_noqaqc_data_id_time_idx; Type: INDEX; Schema: faimms; Owner: faimms
--

CREATE INDEX measurements_noqaqc_data_id_time_idx ON measurements_noqaqc USING btree (channel_id, "TIME");


--
-- Name: measurements_qaqc_data_id_time_idx; Type: INDEX; Schema: faimms; Owner: faimms
--

CREATE INDEX measurements_qaqc_data_id_time_idx ON measurements_qaqc USING btree (channel_id, "TIME");


--
-- Name: timeseries_feature_deployments_gist_idx; Type: INDEX; Schema: faimms; Owner: faimms
--

CREATE INDEX timeseries_feature_deployments_gist_idx ON timeseries_feature_deployments USING gist (geom);


--
-- Name: timeseries_feature_deployments_varname_gist_idx; Type: INDEX; Schema: faimms; Owner: faimms
--

CREATE INDEX timeseries_feature_deployments_varname_gist_idx ON timeseries_feature_deployments_varname USING gist (geom);


SET search_path = future_reef_map, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: future_reef_map; Owner: future_reef_map
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: future_reef_map; Owner: future_reef_map
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_TIME_idx; Type: INDEX; Schema: future_reef_map; Owner: future_reef_map
--

CREATE INDEX "measurements_TIME_idx" ON measurements USING btree ("TIME");


--
-- Name: measurements_gist_idx; Type: INDEX; Schema: future_reef_map; Owner: future_reef_map
--

CREATE INDEX measurements_gist_idx ON measurements USING gist (geom);


--
-- Name: measurements_idx; Type: INDEX; Schema: future_reef_map; Owner: future_reef_map
--

CREATE INDEX measurements_idx ON measurements USING btree (file_id, "TIME");


--
-- Name: visualisation_wms_gist_idx; Type: INDEX; Schema: future_reef_map; Owner: future_reef_map
--

CREATE INDEX visualisation_wms_gist_idx ON visualisation_wms USING gist (geom);


SET search_path = generic_timestep, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: generic_timestep; Owner: generic_timestep
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: generic_timestep; Owner: generic_timestep
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


SET search_path = soop_asf_fmt, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_TIME_idx; Type: INDEX; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE INDEX "measurements_TIME_idx" ON measurements USING btree ("TIME");


--
-- Name: measurements_gist_idx; Type: INDEX; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE INDEX measurements_gist_idx ON measurements USING gist (geom);


--
-- Name: measurements_idx; Type: INDEX; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE INDEX measurements_idx ON measurements USING btree (file_id, "TIME");


--
-- Name: visualisation_wms_gist_idx; Type: INDEX; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE INDEX visualisation_wms_gist_idx ON visualisation_wms USING gist (geom);


--
-- Name: visualisation_wms_idx; Type: INDEX; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

CREATE INDEX visualisation_wms_idx ON visualisation_wms USING btree (file_id);


SET search_path = soop_asf_mt, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_gist_idx; Type: INDEX; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE INDEX measurements_gist_idx ON measurements USING gist (geom);


--
-- Name: measurements_idx; Type: INDEX; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE INDEX measurements_idx ON measurements USING btree (file_id, "TIME");


--
-- Name: visualisation_wms_gist_idx; Type: INDEX; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE INDEX visualisation_wms_gist_idx ON visualisation_wms USING gist (geom);


--
-- Name: visualisation_wms_idx; Type: INDEX; Schema: soop_asf_mt; Owner: soop_asf_mt
--

CREATE INDEX visualisation_wms_idx ON visualisation_wms USING btree (file_id);


SET search_path = soop_ba, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: soop_ba; Owner: soop_ba
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: soop_ba; Owner: soop_ba
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_gist_idx; Type: INDEX; Schema: soop_ba; Owner: soop_ba
--

CREATE INDEX measurements_gist_idx ON measurements USING gist (geom);


--
-- Name: visualisation_wms_gist_idx; Type: INDEX; Schema: soop_ba; Owner: soop_ba
--

CREATE INDEX visualisation_wms_gist_idx ON visualisation_wms USING gist (geom);


SET search_path = soop_co2, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: soop_co2; Owner: soop_co2
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: soop_co2; Owner: soop_co2
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_TIME_idx; Type: INDEX; Schema: soop_co2; Owner: soop_co2
--

CREATE INDEX "measurements_TIME_idx" ON measurements USING btree ("TIME");


--
-- Name: measurements_gist_idx; Type: INDEX; Schema: soop_co2; Owner: soop_co2
--

CREATE INDEX measurements_gist_idx ON measurements USING gist (geom);


--
-- Name: measurements_idx; Type: INDEX; Schema: soop_co2; Owner: soop_co2
--

CREATE INDEX measurements_idx ON measurements USING btree (file_id, "TIME");


--
-- Name: visualisation_wms_gist_idx; Type: INDEX; Schema: soop_co2; Owner: soop_co2
--

CREATE INDEX visualisation_wms_gist_idx ON visualisation_wms USING gist (geom);


SET search_path = soop_sst, pg_catalog;

--
-- Name: dm_map_idx; Type: INDEX; Schema: soop_sst; Owner: soop_sst
--

CREATE INDEX dm_map_idx ON soop_sst_dm_trajectory_map USING btree (trajectory_id, vessel_name);


--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: soop_sst; Owner: soop_sst
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: soop_sst; Owner: soop_sst
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_gist_idx; Type: INDEX; Schema: soop_sst; Owner: soop_sst
--

CREATE INDEX measurements_gist_idx ON measurements USING gist (geom);


--
-- Name: measurements_idx; Type: INDEX; Schema: soop_sst; Owner: soop_sst
--

CREATE INDEX measurements_idx ON measurements USING btree (trajectory_id, "TIME");


--
-- Name: nrt_map_idx; Type: INDEX; Schema: soop_sst; Owner: soop_sst
--

CREATE INDEX nrt_map_idx ON soop_sst_nrt_trajectory_map USING btree (trajectory_id, vessel_name);


--
-- Name: soop_sst_dm_trajectory_map_gist_idx; Type: INDEX; Schema: soop_sst; Owner: soop_sst
--

CREATE INDEX soop_sst_dm_trajectory_map_gist_idx ON soop_sst_dm_trajectory_map USING gist (geom);


--
-- Name: soop_sst_nrt_trajectory_map_gist_idx; Type: INDEX; Schema: soop_sst; Owner: soop_sst
--

CREATE INDEX soop_sst_nrt_trajectory_map_gist_idx ON soop_sst_nrt_trajectory_map USING gist (geom);


SET search_path = soop_tmv, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: soop_tmv; Owner: soop_tmv
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: soop_tmv; Owner: soop_tmv
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_gist_idx; Type: INDEX; Schema: soop_tmv; Owner: soop_tmv
--

CREATE INDEX measurements_gist_idx ON measurements USING gist (geom);


--
-- Name: measurements_idx; Type: INDEX; Schema: soop_tmv; Owner: soop_tmv
--

CREATE INDEX measurements_idx ON measurements USING btree (file_id, "TIME");


--
-- Name: visualisation_wms_gist_idx; Type: INDEX; Schema: soop_tmv; Owner: soop_tmv
--

CREATE INDEX visualisation_wms_gist_idx ON visualisation_wms USING gist (geom);


SET search_path = soop_trv, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_cphl_gist_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX measurements_cphl_gist_idx ON measurements_cphl USING gist (geom);


--
-- Name: measurements_cphl_trip_id_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX measurements_cphl_trip_id_idx ON measurements_cphl USING btree (trip_id, "TIME");


--
-- Name: measurements_merged_data_gist_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX measurements_merged_data_gist_idx ON measurements_merged_data USING gist (geom);


--
-- Name: measurements_mergedtrip_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX measurements_mergedtrip_idx ON measurements_merged_data USING btree (trip_id);


--
-- Name: measurements_mergedtriptime_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX measurements_mergedtriptime_idx ON measurements_merged_data USING btree (trip_id, "TIME");


--
-- Name: measurements_psal_gist_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX measurements_psal_gist_idx ON measurements_psal USING gist (geom);


--
-- Name: measurements_psal_trip_id_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX measurements_psal_trip_id_idx ON measurements_psal USING btree (trip_id, "TIME");


--
-- Name: measurements_temp_gist_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX measurements_temp_gist_idx ON measurements_temp USING gist (geom);


--
-- Name: measurements_temp_trip_id_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX measurements_temp_trip_id_idx ON measurements_temp USING btree (trip_id, "TIME");


--
-- Name: measurements_turb_gist_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX measurements_turb_gist_idx ON measurements_turb USING gist (geom);


--
-- Name: measurements_turb_trip_id_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX measurements_turb_trip_id_idx ON measurements_turb USING btree (trip_id, "TIME");


--
-- Name: table_master_gist_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX table_master_gist_idx ON table_master USING gist (geom);


--
-- Name: table_master_trip_id_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX table_master_trip_id_idx ON table_master USING btree (trip_id, "TIME");


--
-- Name: visualisation_wms_gist_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX visualisation_wms_gist_idx ON visualisation_wms USING gist (geom);


--
-- Name: visualisation_wms_trip_idx; Type: INDEX; Schema: soop_trv; Owner: soop_trv
--

CREATE INDEX visualisation_wms_trip_idx ON visualisation_wms USING btree (trip_id);


SET search_path = srs_altimetry, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_fileid_idx; Type: INDEX; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE INDEX measurements_fileid_idx ON measurements USING btree (file_id);


--
-- Name: measurements_fileid_time_idx; Type: INDEX; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE INDEX measurements_fileid_time_idx ON measurements USING btree (file_id, "TIME");


--
-- Name: measurements_gist_idx; Type: INDEX; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE INDEX measurements_gist_idx ON measurements USING gist (geom);


--
-- Name: visualisation_wms_gist_idx; Type: INDEX; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE INDEX visualisation_wms_gist_idx ON visualisation_wms USING gist (geom);


--
-- Name: visualisation_wms_trip_idx; Type: INDEX; Schema: srs_altimetry; Owner: srs_altimetry
--

CREATE INDEX visualisation_wms_trip_idx ON visualisation_wms USING btree (file_id);


SET search_path = srs_oc_bodbaw, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_gist_idx; Type: INDEX; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE INDEX measurements_gist_idx ON measurements USING gist (geom);


--
-- Name: srs_oc_bodbaw_trajectory_profile_map_gist_idx; Type: INDEX; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

CREATE INDEX srs_oc_bodbaw_trajectory_profile_map_gist_idx ON srs_oc_bodbaw_trajectory_profile_map USING gist (geom);


SET search_path = srs_oc_ljco_wws, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_daily_ecotriplet_fv02_geo_index_fileid_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_daily_ecotriplet_fv02_geo_index_fileid_idx ON measurements_daily_ecotriplet_fv02 USING btree (file_id);


--
-- Name: measurements_daily_ecotriplet_fv02_geo_index_fileid_time_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_daily_ecotriplet_fv02_geo_index_fileid_time_idx ON measurements_daily_ecotriplet_fv02 USING btree (file_id, "TIME");


--
-- Name: measurements_daily_ecotriplet_fv02_geo_index_gist_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_daily_ecotriplet_fv02_geo_index_gist_idx ON measurements_daily_ecotriplet_fv02 USING gist (geom);


--
-- Name: measurements_daily_fv02_gridded_geo_index_fileid_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_daily_fv02_gridded_geo_index_fileid_idx ON measurements_daily_fv02_gridded USING btree (file_id);


--
-- Name: measurements_daily_fv02_gridded_geo_index_fileid_time_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_daily_fv02_gridded_geo_index_fileid_time_idx ON measurements_daily_fv02_gridded USING btree (file_id, "TIME");


--
-- Name: measurements_daily_fv02_gridded_geo_index_gist_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_daily_fv02_gridded_geo_index_gist_idx ON measurements_daily_fv02_gridded USING gist (geom);


--
-- Name: measurements_daily_wqm_fv02_geo_index_fileid_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_daily_wqm_fv02_geo_index_fileid_idx ON measurements_daily_wqm_fv02 USING btree (file_id);


--
-- Name: measurements_daily_wqm_fv02_geo_index_fileid_time_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_daily_wqm_fv02_geo_index_fileid_time_idx ON measurements_daily_wqm_fv02 USING btree (file_id, "TIME");


--
-- Name: measurements_hourly_wqm_fv01_geo_index_fileid_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_hourly_wqm_fv01_geo_index_fileid_idx ON measurements_hourly_wqm_fv01 USING btree (file_id);


--
-- Name: measurements_hourly_wqm_fv01_geo_index_fileid_time_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_hourly_wqm_fv01_geo_index_fileid_time_idx ON measurements_hourly_wqm_fv01 USING btree (file_id, "TIME");


--
-- Name: measurements_mtw_water_monthly_fv01_fileid_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_mtw_water_monthly_fv01_fileid_idx ON measurements_mtw_water_monthly_fv01 USING btree (file_id);


--
-- Name: measurements_mtw_water_monthly_fv01_fileid_time_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_mtw_water_monthly_fv01_fileid_time_idx ON measurements_mtw_water_monthly_fv01 USING btree (file_id, "TIME");


--
-- Name: measurements_mtw_weather_monthly_fv01_fileid_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_mtw_weather_monthly_fv01_fileid_idx ON measurements_mtw_weather_monthly_fv01 USING btree (file_id);


--
-- Name: measurements_mtw_weather_monthly_fv01_fileid_time_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX measurements_mtw_weather_monthly_fv01_fileid_time_idx ON measurements_mtw_weather_monthly_fv01 USING btree (file_id, "TIME");


--
-- Name: visualisation_wms_daily_wqm_fv02_trip_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX visualisation_wms_daily_wqm_fv02_trip_idx ON visualisation_wms_daily_wqm_fv02 USING btree (file_id);


--
-- Name: visualisation_wms_hourly_wqm_fv01_trip_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX visualisation_wms_hourly_wqm_fv01_trip_idx ON visualisation_wms_hourly_wqm_fv01 USING btree (file_id);


--
-- Name: visualisation_wms_mtw_monthly_fv01_trip_idx; Type: INDEX; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE INDEX visualisation_wms_mtw_monthly_fv01_trip_idx ON visualisation_wms_mtw_monthly_fv01 USING btree (file_id);


SET search_path = srs_oc_soop_rad, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


--
-- Name: measurements_gist_idx; Type: INDEX; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE INDEX measurements_gist_idx ON measurements USING gist (geom);


--
-- Name: visualisation_wms_gist_idx; Type: INDEX; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

CREATE INDEX visualisation_wms_gist_idx ON visualisation_wms USING gist (geom);


SET search_path = srs_sst, pg_catalog;

--
-- Name: file_harvest_file_id_idx; Type: INDEX; Schema: srs_sst; Owner: srs_sst
--

CREATE INDEX file_harvest_file_id_idx ON file_harvest USING btree (file_id);


--
-- Name: indexed_file_deleted_idx; Type: INDEX; Schema: srs_sst; Owner: srs_sst
--

CREATE INDEX indexed_file_deleted_idx ON indexed_file USING btree (deleted);


SET search_path = srs_oc_ljco_wws, pg_catalog;

--
-- Name: srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map _RETURN; Type: RULE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE RULE "_RETURN" AS
    ON SELECT TO srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map DO INSTEAD  SELECT indexed_file.id AS file_id,
    indexed_file.size,
    indexed_file.url,
    timezone('UTC'::text, min(measurements_daily_fv02_gridded."TIME")) AS time_coverage_start,
    timezone('UTC'::text, max(measurements_daily_fv02_gridded."TIME")) AS time_coverage_end,
    measurements_daily_fv02_gridded."LATITUDE",
    measurements_daily_fv02_gridded."LONGITUDE",
    measurements_daily_fv02_gridded.geom
   FROM (indexed_file
     LEFT JOIN measurements_daily_fv02_gridded ON ((indexed_file.id = measurements_daily_fv02_gridded.file_id)))
  WHERE ((indexed_file.url)::text ~~ '%FV02_BB9-daily%'::text)
  GROUP BY indexed_file.id, measurements_daily_fv02_gridded.geom, measurements_daily_fv02_gridded."LATITUDE", measurements_daily_fv02_gridded."LONGITUDE";


--
-- Name: srs_oc_ljco_wws_daily_acs_fv02_timeseries_map _RETURN; Type: RULE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE RULE "_RETURN" AS
    ON SELECT TO srs_oc_ljco_wws_daily_acs_fv02_timeseries_map DO INSTEAD  SELECT indexed_file.id AS file_id,
    indexed_file.size,
    indexed_file.url,
    timezone('UTC'::text, min(measurements_daily_fv02_gridded."TIME")) AS time_coverage_start,
    timezone('UTC'::text, max(measurements_daily_fv02_gridded."TIME")) AS time_coverage_end,
    measurements_daily_fv02_gridded."LATITUDE",
    measurements_daily_fv02_gridded."LONGITUDE",
    measurements_daily_fv02_gridded.geom
   FROM (indexed_file
     LEFT JOIN measurements_daily_fv02_gridded ON ((indexed_file.id = measurements_daily_fv02_gridded.file_id)))
  WHERE ((indexed_file.url)::text ~~ '%FV02_ACS-daily%'::text)
  GROUP BY indexed_file.id, measurements_daily_fv02_gridded.geom, measurements_daily_fv02_gridded."LATITUDE", measurements_daily_fv02_gridded."LONGITUDE";


--
-- Name: srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map _RETURN; Type: RULE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE RULE "_RETURN" AS
    ON SELECT TO srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map DO INSTEAD  SELECT indexed_file.id AS file_id,
    indexed_file.size,
    indexed_file.url,
    timezone('UTC'::text, min(measurements_daily_fv02_gridded."TIME")) AS time_coverage_start,
    timezone('UTC'::text, max(measurements_daily_fv02_gridded."TIME")) AS time_coverage_end,
    measurements_daily_fv02_gridded."LATITUDE",
    measurements_daily_fv02_gridded."LONGITUDE",
    measurements_daily_fv02_gridded.geom
   FROM (indexed_file
     LEFT JOIN measurements_daily_fv02_gridded ON ((indexed_file.id = measurements_daily_fv02_gridded.file_id)))
  WHERE ((indexed_file.url)::text ~~ '%FV02_HyperOCR-daily%'::text)
  GROUP BY indexed_file.id, measurements_daily_fv02_gridded.geom, measurements_daily_fv02_gridded."LATITUDE", measurements_daily_fv02_gridded."LONGITUDE";


--
-- Name: srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map _RETURN; Type: RULE; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

CREATE RULE "_RETURN" AS
    ON SELECT TO srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map DO INSTEAD  SELECT indexed_file.id AS file_id,
    indexed_file.size,
    indexed_file.url,
    timezone('UTC'::text, min(measurements_daily_ecotriplet_fv02."TIME")) AS time_coverage_start,
    timezone('UTC'::text, max(measurements_daily_ecotriplet_fv02."TIME")) AS time_coverage_end,
    measurements_daily_ecotriplet_fv02."LATITUDE",
    measurements_daily_ecotriplet_fv02."LONGITUDE",
    measurements_daily_ecotriplet_fv02.geom
   FROM (indexed_file
     LEFT JOIN measurements_daily_ecotriplet_fv02 ON ((indexed_file.id = measurements_daily_ecotriplet_fv02.file_id)))
  WHERE ((indexed_file.url)::text ~~ '%FV02_EcoTriplet-daily%'::text)
  GROUP BY indexed_file.id, measurements_daily_ecotriplet_fv02.geom, measurements_daily_ecotriplet_fv02."LATITUDE", measurements_daily_ecotriplet_fv02."LONGITUDE";


SET search_path = abos_sots, pg_catalog;

--
-- Name: timeseries timeseries_file_fk; Type: FK CONSTRAINT; Schema: abos_sots; Owner: abos_sots
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = anmn_acidification_nrt, pg_catalog;

--
-- Name: measurement measurement_timeseries_fk; Type: FK CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY measurement
    ADD CONSTRAINT measurement_timeseries_fk FOREIGN KEY (file_id) REFERENCES timeseries(file_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: timeseries timeseries_file_fk; Type: FK CONSTRAINT; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = anmn_am_dm, pg_catalog;

--
-- Name: measurements measurements_timeseries_fk; Type: FK CONSTRAINT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_timeseries_fk FOREIGN KEY (file_id) REFERENCES timeseries(file_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: timeseries timeseries_file_fk; Type: FK CONSTRAINT; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = anmn_burst_avg, pg_catalog;

--
-- Name: measurement measurement_ts_fk; Type: FK CONSTRAINT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY measurement
    ADD CONSTRAINT measurement_ts_fk FOREIGN KEY (ts_id) REFERENCES timeseries(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: timeseries timeseries_file_fk; Type: FK CONSTRAINT; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = anmn_metadata, pg_catalog;

--
-- Name: file_metadata file_metadata_file_fk; Type: FK CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY file_metadata
    ADD CONSTRAINT file_metadata_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: global_attribute global_attribute_file_fk; Type: FK CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY global_attribute
    ADD CONSTRAINT global_attribute_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: variable_attribute variable_attribute_file_fk; Type: FK CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY variable_attribute
    ADD CONSTRAINT variable_attribute_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: variable variable_file_fk; Type: FK CONSTRAINT; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER TABLE ONLY variable
    ADD CONSTRAINT variable_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = anmn_nrs_ctd_profiles, pg_catalog;

--
-- Name: deployments fk_file_id; Type: FK CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements fk_file_id; Type: FK CONSTRAINT; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = anmn_nrs_dar_yon, pg_catalog;

--
-- Name: global_attributes_file fk_file_id; Type: FK CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY global_attributes_file
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_noqaqc fk_file_id; Type: FK CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY measurements_noqaqc
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_qaqc fk_file_id; Type: FK CONSTRAINT; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER TABLE ONLY measurements_qaqc
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = anmn_nrs_rt_bio, pg_catalog;

--
-- Name: measurement measurement_ts_fk; Type: FK CONSTRAINT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY measurement
    ADD CONSTRAINT measurement_ts_fk FOREIGN KEY (ts_id) REFERENCES timeseries(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: timeseries timeseries_file_fk; Type: FK CONSTRAINT; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = anmn_nrs_rt_meteo, pg_catalog;

--
-- Name: measurement measurement_ts_fk; Type: FK CONSTRAINT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY measurement
    ADD CONSTRAINT measurement_ts_fk FOREIGN KEY (ts_id) REFERENCES timeseries(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: timeseries timeseries_file_fk; Type: FK CONSTRAINT; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = anmn_nrs_rt_wave, pg_catalog;

--
-- Name: measurement measurement_ts_fk; Type: FK CONSTRAINT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY measurement
    ADD CONSTRAINT measurement_ts_fk FOREIGN KEY (ts_id) REFERENCES timeseries(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: timeseries timeseries_file_fk; Type: FK CONSTRAINT; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = anmn_ts, pg_catalog;

--
-- Name: measurement measurement_ts_fk; Type: FK CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY measurement
    ADD CONSTRAINT measurement_ts_fk FOREIGN KEY (ts_id) REFERENCES timeseries(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: timeseries timeseries_file_fk; Type: FK CONSTRAINT; Schema: anmn_ts; Owner: anmn_ts
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = aodn_nsw_oeh, pg_catalog;

--
-- Name: survey_metadata survey_metadata_file_fk; Type: FK CONSTRAINT; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER TABLE ONLY survey_metadata
    ADD CONSTRAINT survey_metadata_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = aodn_wamsi_sediment, pg_catalog;

--
-- Name: aodn_wamsi_sediment_data aodn_wamsi_sediment_fkey; Type: FK CONSTRAINT; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER TABLE ONLY aodn_wamsi_sediment_data
    ADD CONSTRAINT aodn_wamsi_sediment_fkey FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = aus_phyto_db_ongoing, pg_catalog;

--
-- Name: apd_data apd_data_fkey; Type: FK CONSTRAINT; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

ALTER TABLE ONLY apd_data
    ADD CONSTRAINT apd_data_fkey FOREIGN KEY ("PROJECT_ID") REFERENCES apd_metadata("PROJECT_ID");


SET search_path = auv, pg_catalog;

--
-- Name: deployments fk_file_id; Type: FK CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_b fk_file_id; Type: FK CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY measurements_b
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_st fk_file_id; Type: FK CONSTRAINT; Schema: auv; Owner: auv
--

ALTER TABLE ONLY measurements_st
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = auv_viewer_track, pg_catalog;

--
-- Name: auv_images auv_image_file_fkey; Type: FK CONSTRAINT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY auv_images
    ADD CONSTRAINT auv_image_file_fkey FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: auv_images auv_track_dive_fkey; Type: FK CONSTRAINT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY auv_images
    ADD CONSTRAINT auv_track_dive_fkey FOREIGN KEY (fk_auv_tracks) REFERENCES auv_tracks(pkid) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: auv_tracks fkey_file_id; Type: FK CONSTRAINT; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER TABLE ONLY auv_tracks
    ADD CONSTRAINT fkey_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = faimms, pg_catalog;

--
-- Name: global_attributes_file fk_file_id; Type: FK CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY global_attributes_file
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_noqaqc fk_file_id; Type: FK CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY measurements_noqaqc
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_qaqc fk_file_id; Type: FK CONSTRAINT; Schema: faimms; Owner: faimms
--

ALTER TABLE ONLY measurements_qaqc
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = future_reef_map, pg_catalog;

--
-- Name: deployments fk_file_id; Type: FK CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements fk_file_id; Type: FK CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: visualisation_wms fk_file_id; Type: FK CONSTRAINT; Schema: future_reef_map; Owner: future_reef_map
--

ALTER TABLE ONLY visualisation_wms
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = generic_timestep, pg_catalog;

--
-- Name: timestep timestep_collection_fk; Type: FK CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY timestep
    ADD CONSTRAINT timestep_collection_fk FOREIGN KEY (collection_id) REFERENCES collection(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: timestep timestep_file_fk; Type: FK CONSTRAINT; Schema: generic_timestep; Owner: generic_timestep
--

ALTER TABLE ONLY timestep
    ADD CONSTRAINT timestep_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = soop_asf_fmt, pg_catalog;

--
-- Name: deployments fk_file_id; Type: FK CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements fk_file_id; Type: FK CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: visualisation_wms fk_file_id; Type: FK CONSTRAINT; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER TABLE ONLY visualisation_wms
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = soop_asf_mt, pg_catalog;

--
-- Name: deployments fk_file_id; Type: FK CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements fk_file_id; Type: FK CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: visualisation_wms fk_file_id; Type: FK CONSTRAINT; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER TABLE ONLY visualisation_wms
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = soop_ba, pg_catalog;

--
-- Name: deployments fk_file_id; Type: FK CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements fk_file_id; Type: FK CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: visualisation_wms fk_file_id; Type: FK CONSTRAINT; Schema: soop_ba; Owner: soop_ba
--

ALTER TABLE ONLY visualisation_wms
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = soop_co2, pg_catalog;

--
-- Name: deployments fk_file_id; Type: FK CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements fk_file_id; Type: FK CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: visualisation_wms fk_file_id; Type: FK CONSTRAINT; Schema: soop_co2; Owner: soop_co2
--

ALTER TABLE ONLY visualisation_wms
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = soop_sst, pg_catalog;

--
-- Name: measurements measurements_fkey; Type: FK CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT measurements_fkey FOREIGN KEY (trajectory_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: soop_sst_dm_trajectory_map soop_sst_dm_trajectory_map_fkey; Type: FK CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY soop_sst_dm_trajectory_map
    ADD CONSTRAINT soop_sst_dm_trajectory_map_fkey FOREIGN KEY (trajectory_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: soop_sst_nrt_trajectory_map soop_sst_nrt_trajectory_map_fkey; Type: FK CONSTRAINT; Schema: soop_sst; Owner: soop_sst
--

ALTER TABLE ONLY soop_sst_nrt_trajectory_map
    ADD CONSTRAINT soop_sst_nrt_trajectory_map_fkey FOREIGN KEY (trajectory_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = soop_tmv, pg_catalog;

--
-- Name: deployments fk_file_id; Type: FK CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements fk_file_id; Type: FK CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: visualisation_wms fk_file_id; Type: FK CONSTRAINT; Schema: soop_tmv; Owner: soop_tmv
--

ALTER TABLE ONLY visualisation_wms
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = soop_trv, pg_catalog;

--
-- Name: deployments fk_file_id; Type: FK CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_cphl fk_file_id; Type: FK CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_cphl
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_psal fk_file_id; Type: FK CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_psal
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_temp fk_file_id; Type: FK CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_temp
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_turb fk_file_id; Type: FK CONSTRAINT; Schema: soop_trv; Owner: soop_trv
--

ALTER TABLE ONLY measurements_turb
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = srs_altimetry, pg_catalog;

--
-- Name: deployments fk_file_id; Type: FK CONSTRAINT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements fk_file_id; Type: FK CONSTRAINT; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = srs_oc_bodbaw, pg_catalog;

--
-- Name: deployments fk_file_id; Type: FK CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements fk_file_id; Type: FK CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: srs_oc_bodbaw_trajectory_profile_map fk_file_id; Type: FK CONSTRAINT; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER TABLE ONLY srs_oc_bodbaw_trajectory_profile_map
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = srs_oc_ljco_wws, pg_catalog;

--
-- Name: deployments fk_file_id; Type: FK CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_mtw_water_monthly_fv01 fk_file_id; Type: FK CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_mtw_water_monthly_fv01
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_mtw_weather_monthly_fv01 fk_file_id; Type: FK CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_mtw_weather_monthly_fv01
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_hourly_wqm_fv01 fk_file_id; Type: FK CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_hourly_wqm_fv01
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_daily_wqm_fv02 fk_file_id; Type: FK CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_daily_wqm_fv02
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_daily_fv02_gridded fk_file_id; Type: FK CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_daily_fv02_gridded
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements_daily_ecotriplet_fv02 fk_file_id; Type: FK CONSTRAINT; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER TABLE ONLY measurements_daily_ecotriplet_fv02
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = srs_oc_soop_rad, pg_catalog;

--
-- Name: deployments fk_file_id; Type: FK CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY deployments
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: measurements fk_file_id; Type: FK CONSTRAINT; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER TABLE ONLY measurements
    ADD CONSTRAINT fk_file_id FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = srs_sst, pg_catalog;

--
-- Name: timeseries timeseries_file_fk; Type: FK CONSTRAINT; Schema: srs_sst; Owner: srs_sst
--

ALTER TABLE ONLY timeseries
    ADD CONSTRAINT timeseries_file_fk FOREIGN KEY (file_id) REFERENCES indexed_file(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: aatams_biologging_penguin; Type: ACL; Schema: -; Owner: aatams_biologging_penguin
--

GRANT ALL ON SCHEMA aatams_biologging_penguin TO harvest_write_group;
GRANT USAGE ON SCHEMA aatams_biologging_penguin TO harvest_read_group;


--
-- Name: aatams_biologging_shearwater; Type: ACL; Schema: -; Owner: aatams_biologging_shearwater
--

GRANT USAGE ON SCHEMA aatams_biologging_shearwater TO harvest_read_group;
GRANT ALL ON SCHEMA aatams_biologging_shearwater TO harvest_write_group;


--
-- Name: aatams_biologging_snowpetrel; Type: ACL; Schema: -; Owner: aatams_biologging_snowpetrel
--

GRANT ALL ON SCHEMA aatams_biologging_snowpetrel TO harvest_write_group;
GRANT USAGE ON SCHEMA aatams_biologging_snowpetrel TO harvest_read_group;


--
-- Name: aatams_sattag_dm; Type: ACL; Schema: -; Owner: aatams_sattag_dm
--

GRANT ALL ON SCHEMA aatams_sattag_dm TO harvest_write_group;
GRANT USAGE ON SCHEMA aatams_sattag_dm TO harvest_read_group;


--
-- Name: aatams_sattag_nrt; Type: ACL; Schema: -; Owner: aatams_sattag_nrt
--

GRANT ALL ON SCHEMA aatams_sattag_nrt TO harvest_write_group;
GRANT USAGE ON SCHEMA aatams_sattag_nrt TO harvest_read_group;


--
-- Name: aatams_sattag_qc_ctd; Type: ACL; Schema: -; Owner: aatams_sattag_qc_ctd
--

GRANT ALL ON SCHEMA aatams_sattag_qc_ctd TO harvest_write_group;
GRANT USAGE ON SCHEMA aatams_sattag_qc_ctd TO harvest_read_group;


--
-- Name: abos; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON SCHEMA abos TO harvest_write_group;
GRANT USAGE ON SCHEMA abos TO harvest_read_group;


--
-- Name: abos_currents; Type: ACL; Schema: -; Owner: abos_currents
--

GRANT ALL ON SCHEMA abos_currents TO harvest_write_group;
GRANT USAGE ON SCHEMA abos_currents TO harvest_read_group;


--
-- Name: abos_sofs_fl; Type: ACL; Schema: -; Owner: abos_sofs_fl
--

GRANT USAGE ON SCHEMA abos_sofs_fl TO harvest_read_group;
GRANT ALL ON SCHEMA abos_sofs_fl TO harvest_write_group;


--
-- Name: abos_sofs_sp; Type: ACL; Schema: -; Owner: abos_sofs_sp
--

GRANT ALL ON SCHEMA abos_sofs_sp TO harvest_write_group;
GRANT USAGE ON SCHEMA abos_sofs_sp TO harvest_read_group;


--
-- Name: abos_sots; Type: ACL; Schema: -; Owner: abos_sots
--

GRANT ALL ON SCHEMA abos_sots TO harvest_write_group;
GRANT USAGE ON SCHEMA abos_sots TO harvest_read_group;


--
-- Name: abos_ts; Type: ACL; Schema: -; Owner: abos_ts
--

GRANT USAGE ON SCHEMA abos_ts TO harvest_read_group;
GRANT ALL ON SCHEMA abos_ts TO harvest_write_group;


--
-- Name: acorn_hourly_avg_nonqc; Type: ACL; Schema: -; Owner: acorn_hourly_avg_nonqc
--

GRANT USAGE ON SCHEMA acorn_hourly_avg_nonqc TO harvest_read_group;
GRANT ALL ON SCHEMA acorn_hourly_avg_nonqc TO harvest_write_group;


--
-- Name: acorn_hourly_avg_qc; Type: ACL; Schema: -; Owner: acorn_hourly_avg_qc
--

GRANT USAGE ON SCHEMA acorn_hourly_avg_qc TO harvest_read_group;
GRANT ALL ON SCHEMA acorn_hourly_avg_qc TO harvest_write_group;


--
-- Name: acorn_radial_nonqc; Type: ACL; Schema: -; Owner: acorn_radial_nonqc
--

GRANT ALL ON SCHEMA acorn_radial_nonqc TO harvest_write_group;
GRANT USAGE ON SCHEMA acorn_radial_nonqc TO harvest_read_group;


--
-- Name: acorn_radial_qc; Type: ACL; Schema: -; Owner: acorn_radial_qc
--

GRANT USAGE ON SCHEMA acorn_radial_qc TO harvest_read_group;
GRANT ALL ON SCHEMA acorn_radial_qc TO harvest_write_group;


--
-- Name: anfog_dm; Type: ACL; Schema: -; Owner: anfog_dm
--

GRANT ALL ON SCHEMA anfog_dm TO harvest_write_group;
GRANT USAGE ON SCHEMA anfog_dm TO harvest_read_group;


--
-- Name: anfog_rt; Type: ACL; Schema: -; Owner: anfog_rt
--

GRANT USAGE ON SCHEMA anfog_rt TO harvest_read_group;
GRANT ALL ON SCHEMA anfog_rt TO harvest_write_group;


--
-- Name: anmn_acidification_nrt; Type: ACL; Schema: -; Owner: anmn_acidification_nrt
--

GRANT ALL ON SCHEMA anmn_acidification_nrt TO harvest_write_group;
GRANT USAGE ON SCHEMA anmn_acidification_nrt TO harvest_read_group;


--
-- Name: anmn_acoustics; Type: ACL; Schema: -; Owner: anmn_acoustics
--

GRANT USAGE ON SCHEMA anmn_acoustics TO harvest_read_group;
GRANT ALL ON SCHEMA anmn_acoustics TO harvest_write_group;
GRANT USAGE ON SCHEMA anmn_acoustics TO harvest_anmn_acoustics_read_group;
GRANT ALL ON SCHEMA anmn_acoustics TO harvest_anmn_acoustics_write_group;


--
-- Name: anmn_am_dm; Type: ACL; Schema: -; Owner: anmn_am_dm
--

GRANT USAGE ON SCHEMA anmn_am_dm TO harvest_read_group;
GRANT ALL ON SCHEMA anmn_am_dm TO harvest_write_group;


--
-- Name: anmn_burst_avg; Type: ACL; Schema: -; Owner: anmn_burst_avg
--

GRANT USAGE ON SCHEMA anmn_burst_avg TO harvest_read_group;
GRANT ALL ON SCHEMA anmn_burst_avg TO harvest_write_group;


--
-- Name: anmn_metadata; Type: ACL; Schema: -; Owner: anmn_metadata
--

GRANT ALL ON SCHEMA anmn_metadata TO harvest_write_group;
GRANT USAGE ON SCHEMA anmn_metadata TO harvest_read_group;


--
-- Name: anmn_mhlwave; Type: ACL; Schema: -; Owner: anmn_mhlwave
--

GRANT ALL ON SCHEMA anmn_mhlwave TO harvest_write_group;
GRANT USAGE ON SCHEMA anmn_mhlwave TO harvest_read_group;


--
-- Name: anmn_nrs_bgc; Type: ACL; Schema: -; Owner: anmn_nrs_bgc
--

GRANT ALL ON SCHEMA anmn_nrs_bgc TO harvest_write_group;
GRANT USAGE ON SCHEMA anmn_nrs_bgc TO harvest_read_group;


--
-- Name: anmn_nrs_ctd_profiles; Type: ACL; Schema: -; Owner: anmn_nrs_ctd_profiles
--

GRANT USAGE ON SCHEMA anmn_nrs_ctd_profiles TO harvest_read_group;
GRANT ALL ON SCHEMA anmn_nrs_ctd_profiles TO harvest_write_group;


--
-- Name: anmn_nrs_dar_yon; Type: ACL; Schema: -; Owner: anmn_nrs_dar_yon
--

GRANT ALL ON SCHEMA anmn_nrs_dar_yon TO harvest_write_group;
GRANT USAGE ON SCHEMA anmn_nrs_dar_yon TO harvest_read_group;


--
-- Name: anmn_nrs_long_ts; Type: ACL; Schema: -; Owner: anmn_nrs_long_ts
--

GRANT USAGE ON SCHEMA anmn_nrs_long_ts TO harvest_read_group;
GRANT ALL ON SCHEMA anmn_nrs_long_ts TO harvest_write_group;


--
-- Name: anmn_nrs_rt_bio; Type: ACL; Schema: -; Owner: anmn_nrs_rt_bio
--

GRANT USAGE ON SCHEMA anmn_nrs_rt_bio TO harvest_read_group;
GRANT ALL ON SCHEMA anmn_nrs_rt_bio TO harvest_write_group;


--
-- Name: anmn_nrs_rt_meteo; Type: ACL; Schema: -; Owner: anmn_nrs_rt_meteo
--

GRANT USAGE ON SCHEMA anmn_nrs_rt_meteo TO harvest_read_group;
GRANT ALL ON SCHEMA anmn_nrs_rt_meteo TO harvest_write_group;


--
-- Name: anmn_nrs_rt_wave; Type: ACL; Schema: -; Owner: anmn_nrs_rt_wave
--

GRANT ALL ON SCHEMA anmn_nrs_rt_wave TO harvest_write_group;
GRANT USAGE ON SCHEMA anmn_nrs_rt_wave TO harvest_read_group;


--
-- Name: anmn_t_regridded; Type: ACL; Schema: -; Owner: anmn_t_regridded
--

GRANT USAGE ON SCHEMA anmn_t_regridded TO harvest_read_group;
GRANT ALL ON SCHEMA anmn_t_regridded TO harvest_write_group;


--
-- Name: anmn_ts; Type: ACL; Schema: -; Owner: anmn_ts
--

GRANT USAGE ON SCHEMA anmn_ts TO harvest_read_group;
GRANT ALL ON SCHEMA anmn_ts TO harvest_write_group;


--
-- Name: anmn_velocity; Type: ACL; Schema: -; Owner: anmn_velocity
--

GRANT ALL ON SCHEMA anmn_velocity TO harvest_write_group;
GRANT USAGE ON SCHEMA anmn_velocity TO harvest_read_group;


--
-- Name: anmn_wave; Type: ACL; Schema: -; Owner: anmn_wave
--

GRANT ALL ON SCHEMA anmn_wave TO harvest_write_group;
GRANT USAGE ON SCHEMA anmn_wave TO harvest_read_group;


--
-- Name: aodn_aims_ctd; Type: ACL; Schema: -; Owner: aodn_aims_ctd
--

GRANT USAGE ON SCHEMA aodn_aims_ctd TO harvest_read_group;
GRANT ALL ON SCHEMA aodn_aims_ctd TO harvest_write_group;


--
-- Name: aodn_coastal_watch; Type: ACL; Schema: -; Owner: legacy
--

GRANT USAGE ON SCHEMA aodn_coastal_watch TO harvest_read_group;
GRANT ALL ON SCHEMA aodn_coastal_watch TO harvest_write_group;


--
-- Name: aodn_csiro_cmar; Type: ACL; Schema: -; Owner: aodn_csiro_cmar
--

GRANT ALL ON SCHEMA aodn_csiro_cmar TO harvest_write_group;
GRANT USAGE ON SCHEMA aodn_csiro_cmar TO harvest_read_group;


--
-- Name: aodn_dart; Type: ACL; Schema: -; Owner: aodn_dart
--

GRANT USAGE ON SCHEMA aodn_dart TO harvest_read_group;
GRANT ALL ON SCHEMA aodn_dart TO harvest_write_group;


--
-- Name: aodn_dsto; Type: ACL; Schema: -; Owner: aodn_dsto
--

GRANT USAGE ON SCHEMA aodn_dsto TO harvest_read_group;
GRANT ALL ON SCHEMA aodn_dsto TO harvest_write_group;


--
-- Name: aodn_imas_fluorometry; Type: ACL; Schema: -; Owner: aodn_imas_fluorometry
--

GRANT USAGE ON SCHEMA aodn_imas_fluorometry TO harvest_read_group;
GRANT ALL ON SCHEMA aodn_imas_fluorometry TO harvest_write_group;


--
-- Name: aodn_mhl_sst; Type: ACL; Schema: -; Owner: aodn_mhl_sst
--

GRANT USAGE ON SCHEMA aodn_mhl_sst TO harvest_read_group;
GRANT ALL ON SCHEMA aodn_mhl_sst TO harvest_write_group;


--
-- Name: aodn_nsw_oeh; Type: ACL; Schema: -; Owner: aodn_nsw_oeh
--

GRANT USAGE ON SCHEMA aodn_nsw_oeh TO harvest_read_group;
GRANT ALL ON SCHEMA aodn_nsw_oeh TO harvest_write_group;


--
-- Name: aodn_nt_sattag_hawksbill; Type: ACL; Schema: -; Owner: aodn_nt_sattag_hawksbill
--

GRANT ALL ON SCHEMA aodn_nt_sattag_hawksbill TO harvest_write_group;
GRANT USAGE ON SCHEMA aodn_nt_sattag_hawksbill TO harvest_read_group;


--
-- Name: aodn_nt_sattag_oliveridley; Type: ACL; Schema: -; Owner: aodn_nt_sattag_oliveridley
--

GRANT ALL ON SCHEMA aodn_nt_sattag_oliveridley TO harvest_write_group;
GRANT USAGE ON SCHEMA aodn_nt_sattag_oliveridley TO harvest_read_group;


--
-- Name: aodn_ran_ctd; Type: ACL; Schema: -; Owner: aodn_ran_ctd
--

GRANT USAGE ON SCHEMA aodn_ran_ctd TO harvest_read_group;
GRANT ALL ON SCHEMA aodn_ran_ctd TO harvest_write_group;


--
-- Name: aodn_wamsi_sediment; Type: ACL; Schema: -; Owner: aodn_wamsi_sediment
--

GRANT ALL ON SCHEMA aodn_wamsi_sediment TO harvest_write_group;
GRANT USAGE ON SCHEMA aodn_wamsi_sediment TO harvest_read_group;


--
-- Name: argo; Type: ACL; Schema: -; Owner: argo
--

GRANT USAGE ON SCHEMA argo TO harvest_read_group;
GRANT ALL ON SCHEMA argo TO harvest_write_group;


--
-- Name: aus_phyto_db; Type: ACL; Schema: -; Owner: aus_phyto_db
--

GRANT USAGE ON SCHEMA aus_phyto_db TO harvest_read_group;
GRANT ALL ON SCHEMA aus_phyto_db TO harvest_write_group;


--
-- Name: aus_phyto_db_ongoing; Type: ACL; Schema: -; Owner: aus_phyto_db_ongoing
--

GRANT ALL ON SCHEMA aus_phyto_db_ongoing TO harvest_write_group;
GRANT USAGE ON SCHEMA aus_phyto_db_ongoing TO harvest_read_group;


--
-- Name: auv; Type: ACL; Schema: -; Owner: auv
--

GRANT USAGE ON SCHEMA auv TO harvest_read_group;
GRANT ALL ON SCHEMA auv TO harvest_write_group;


--
-- Name: auv_viewer_track; Type: ACL; Schema: -; Owner: auv_viewer_track
--

GRANT ALL ON SCHEMA auv_viewer_track TO harvest_write_group;
GRANT USAGE ON SCHEMA auv_viewer_track TO harvest_read_group;


--
-- Name: contr_vocab_db; Type: ACL; Schema: -; Owner: contr_vocab_db
--

GRANT ALL ON SCHEMA contr_vocab_db TO harvest_contr_vocab_db_write_group;
GRANT USAGE ON SCHEMA contr_vocab_db TO harvest_read_group;
GRANT ALL ON SCHEMA contr_vocab_db TO harvest_write_group;


--
-- Name: dw_aatams_acoustic; Type: ACL; Schema: -; Owner: dw_aatams_acoustic
--

GRANT USAGE ON SCHEMA dw_aatams_acoustic TO harvest_read_group;
GRANT ALL ON SCHEMA dw_aatams_acoustic TO harvest_write_group;


--
-- Name: dw_abos; Type: ACL; Schema: -; Owner: dw_abos
--

GRANT USAGE ON SCHEMA dw_abos TO harvest_read_group;
GRANT ALL ON SCHEMA dw_abos TO harvest_write_group;


--
-- Name: faimms; Type: ACL; Schema: -; Owner: faimms
--

GRANT ALL ON SCHEMA faimms TO harvest_write_group;
GRANT USAGE ON SCHEMA faimms TO harvest_read_group;


--
-- Name: future_reef_map; Type: ACL; Schema: -; Owner: future_reef_map
--

GRANT ALL ON SCHEMA future_reef_map TO harvest_write_group;
GRANT USAGE ON SCHEMA future_reef_map TO harvest_read_group;


--
-- Name: generic_timestep; Type: ACL; Schema: -; Owner: generic_timestep
--

GRANT USAGE ON SCHEMA generic_timestep TO harvest_read_group;
GRANT ALL ON SCHEMA generic_timestep TO harvest_write_group;


--
-- Name: gsla_dm00; Type: ACL; Schema: -; Owner: gsla_dm00
--

GRANT USAGE ON SCHEMA gsla_dm00 TO harvest_read_group;
GRANT ALL ON SCHEMA gsla_dm00 TO harvest_write_group;


--
-- Name: gsla_nrt00; Type: ACL; Schema: -; Owner: gsla_nrt00
--

GRANT ALL ON SCHEMA gsla_nrt00 TO harvest_write_group;
GRANT USAGE ON SCHEMA gsla_nrt00 TO harvest_read_group;


--
-- Name: legacy_baselayer; Type: ACL; Schema: -; Owner: legacy
--

GRANT USAGE ON SCHEMA legacy_baselayer TO harvest_read_group;
GRANT ALL ON SCHEMA legacy_baselayer TO harvest_write_group;


--
-- Name: legacy_bathy; Type: ACL; Schema: -; Owner: legacy
--

GRANT USAGE ON SCHEMA legacy_bathy TO harvest_read_group;
GRANT ALL ON SCHEMA legacy_bathy TO harvest_write_group;


--
-- Name: legacy_bluenet_aodn; Type: ACL; Schema: -; Owner: legacy
--

GRANT USAGE ON SCHEMA legacy_bluenet_aodn TO harvest_read_group;
GRANT ALL ON SCHEMA legacy_bluenet_aodn TO harvest_write_group;
GRANT ALL ON SCHEMA legacy_bluenet_aodn TO harvest_legacy_bluenet_aodn_write_group;


--
-- Name: legacy_cpr; Type: ACL; Schema: -; Owner: legacy_cpr
--

GRANT ALL ON SCHEMA legacy_cpr TO harvest_write_group;
GRANT USAGE ON SCHEMA legacy_cpr TO harvest_read_group;


--
-- Name: marvl3; Type: ACL; Schema: -; Owner: marvl3
--

GRANT USAGE ON SCHEMA marvl3 TO harvest_read_group;


--
-- Name: noaa_drifters; Type: ACL; Schema: -; Owner: noaa_drifters
--

GRANT ALL ON SCHEMA noaa_drifters TO harvest_write_group;
GRANT USAGE ON SCHEMA noaa_drifters TO harvest_read_group;


--
-- Name: parameters_mapping; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA parameters_mapping TO harvest_read_group;
GRANT ALL ON SCHEMA parameters_mapping TO harvest_write_group;
GRANT ALL ON SCHEMA parameters_mapping TO harvest_parameters_mapping_write_group;


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

GRANT ALL ON SCHEMA public TO dw_aatams_acoustic;
GRANT ALL ON SCHEMA public TO harvest_write_group;
GRANT ALL ON SCHEMA public TO aatams_sattag_nrt;
GRANT ALL ON SCHEMA public TO soop;
GRANT ALL ON SCHEMA public TO aatams_biologging_penguin;
GRANT ALL ON SCHEMA public TO aodn_dart;
GRANT ALL ON SCHEMA public TO argo;
GRANT ALL ON SCHEMA public TO anmn_metadata;
GRANT USAGE ON SCHEMA public TO harvest_read_group;


--
-- Name: report; Type: ACL; Schema: -; Owner: report
--

GRANT ALL ON SCHEMA report TO harvest_report_write_group;
GRANT USAGE ON SCHEMA report TO harvest_read_group;
GRANT ALL ON SCHEMA report TO harvest_write_group;


--
-- Name: report_test; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA report_test TO harvest_read_group;
GRANT ALL ON SCHEMA report_test TO harvest_report_test_write_group;
GRANT ALL ON SCHEMA report_test TO harvest_write_group;


--
-- Name: soop; Type: ACL; Schema: -; Owner: soop
--

GRANT ALL ON SCHEMA soop TO harvest_write_group;
GRANT USAGE ON SCHEMA soop TO harvest_read_group;


--
-- Name: soop_asf_fmt; Type: ACL; Schema: -; Owner: soop_asf_fmt
--

GRANT ALL ON SCHEMA soop_asf_fmt TO harvest_write_group;
GRANT USAGE ON SCHEMA soop_asf_fmt TO harvest_read_group;


--
-- Name: soop_asf_mt; Type: ACL; Schema: -; Owner: soop_asf_mt
--

GRANT USAGE ON SCHEMA soop_asf_mt TO harvest_read_group;
GRANT ALL ON SCHEMA soop_asf_mt TO harvest_write_group;


--
-- Name: soop_auscpr; Type: ACL; Schema: -; Owner: soop_auscpr
--

GRANT ALL ON SCHEMA soop_auscpr TO harvest_write_group;
GRANT USAGE ON SCHEMA soop_auscpr TO harvest_read_group;


--
-- Name: soop_ba; Type: ACL; Schema: -; Owner: soop_ba
--

GRANT ALL ON SCHEMA soop_ba TO harvest_write_group;
GRANT USAGE ON SCHEMA soop_ba TO harvest_read_group;


--
-- Name: soop_co2; Type: ACL; Schema: -; Owner: soop_co2
--

GRANT USAGE ON SCHEMA soop_co2 TO harvest_read_group;
GRANT ALL ON SCHEMA soop_co2 TO harvest_write_group;


--
-- Name: soop_sst; Type: ACL; Schema: -; Owner: soop_sst
--

GRANT ALL ON SCHEMA soop_sst TO harvest_write_group;
GRANT USAGE ON SCHEMA soop_sst TO harvest_read_group;


--
-- Name: soop_tmv; Type: ACL; Schema: -; Owner: soop_tmv
--

GRANT ALL ON SCHEMA soop_tmv TO harvest_write_group;
GRANT USAGE ON SCHEMA soop_tmv TO harvest_read_group;


--
-- Name: soop_tmv_nrt; Type: ACL; Schema: -; Owner: soop_tmv_nrt
--

GRANT ALL ON SCHEMA soop_tmv_nrt TO harvest_write_group;
GRANT USAGE ON SCHEMA soop_tmv_nrt TO harvest_read_group;


--
-- Name: soop_trv; Type: ACL; Schema: -; Owner: soop_trv
--

GRANT USAGE ON SCHEMA soop_trv TO harvest_read_group;
GRANT ALL ON SCHEMA soop_trv TO harvest_write_group;


--
-- Name: soop_xbt_dm; Type: ACL; Schema: -; Owner: soop_xbt_dm
--

GRANT ALL ON SCHEMA soop_xbt_dm TO harvest_write_group;
GRANT USAGE ON SCHEMA soop_xbt_dm TO harvest_read_group;


--
-- Name: soop_xbt_nrt; Type: ACL; Schema: -; Owner: soop_xbt_nrt
--

GRANT USAGE ON SCHEMA soop_xbt_nrt TO harvest_read_group;
GRANT ALL ON SCHEMA soop_xbt_nrt TO harvest_write_group;


--
-- Name: srs_altimetry; Type: ACL; Schema: -; Owner: srs_altimetry
--

GRANT ALL ON SCHEMA srs_altimetry TO harvest_write_group;
GRANT USAGE ON SCHEMA srs_altimetry TO harvest_read_group;


--
-- Name: srs_oc; Type: ACL; Schema: -; Owner: srs_oc
--

GRANT USAGE ON SCHEMA srs_oc TO harvest_read_group;
GRANT ALL ON SCHEMA srs_oc TO harvest_write_group;


--
-- Name: srs_oc_bodbaw; Type: ACL; Schema: -; Owner: srs_oc_bodbaw
--

GRANT USAGE ON SCHEMA srs_oc_bodbaw TO harvest_read_group;
GRANT ALL ON SCHEMA srs_oc_bodbaw TO harvest_write_group;


--
-- Name: srs_oc_ljco_aeronet; Type: ACL; Schema: -; Owner: srs_oc_ljco_aeronet
--

GRANT ALL ON SCHEMA srs_oc_ljco_aeronet TO harvest_write_group;
GRANT USAGE ON SCHEMA srs_oc_ljco_aeronet TO harvest_read_group;


--
-- Name: srs_oc_ljco_wws; Type: ACL; Schema: -; Owner: srs_oc_ljco_wws
--

GRANT ALL ON SCHEMA srs_oc_ljco_wws TO harvest_write_group;
GRANT USAGE ON SCHEMA srs_oc_ljco_wws TO harvest_read_group;


--
-- Name: srs_oc_soop_rad; Type: ACL; Schema: -; Owner: srs_oc_soop_rad
--

GRANT ALL ON SCHEMA srs_oc_soop_rad TO harvest_write_group;
GRANT USAGE ON SCHEMA srs_oc_soop_rad TO harvest_read_group;


--
-- Name: srs_sst; Type: ACL; Schema: -; Owner: srs_sst
--

GRANT USAGE ON SCHEMA srs_sst TO harvest_read_group;
GRANT ALL ON SCHEMA srs_sst TO harvest_write_group;


--
-- Name: wodb; Type: ACL; Schema: -; Owner: wodb
--

GRANT USAGE ON SCHEMA wodb TO harvest_read_group;
GRANT ALL ON SCHEMA wodb TO harvest_write_group;


SET search_path = public, pg_catalog;

--
-- Name: raster_in(cstring); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_in(cstring) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_in(cstring) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_in(cstring) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_in(cstring) TO soop;
GRANT ALL ON FUNCTION raster_in(cstring) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_in(cstring) TO argo;
GRANT ALL ON FUNCTION raster_in(cstring) TO aodn_dart;
GRANT ALL ON FUNCTION raster_in(cstring) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_in(cstring) TO harvest_read_group;


--
-- Name: raster_out(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_out(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_out(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_out(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_out(raster) TO soop;
GRANT ALL ON FUNCTION raster_out(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_out(raster) TO argo;
GRANT ALL ON FUNCTION raster_out(raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_out(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_out(raster) TO harvest_read_group;


--
-- Name: box2d_in(cstring); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box2d_in(cstring) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box2d_in(cstring) TO harvest_write_group;
GRANT ALL ON FUNCTION box2d_in(cstring) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box2d_in(cstring) TO soop;
GRANT ALL ON FUNCTION box2d_in(cstring) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box2d_in(cstring) TO argo;
GRANT ALL ON FUNCTION box2d_in(cstring) TO aodn_dart;
GRANT ALL ON FUNCTION box2d_in(cstring) TO anmn_metadata;
GRANT ALL ON FUNCTION box2d_in(cstring) TO harvest_read_group;


--
-- Name: box2d_out(box2d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box2d_out(box2d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box2d_out(box2d) TO harvest_write_group;
GRANT ALL ON FUNCTION box2d_out(box2d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box2d_out(box2d) TO soop;
GRANT ALL ON FUNCTION box2d_out(box2d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box2d_out(box2d) TO argo;
GRANT ALL ON FUNCTION box2d_out(box2d) TO aodn_dart;
GRANT ALL ON FUNCTION box2d_out(box2d) TO anmn_metadata;
GRANT ALL ON FUNCTION box2d_out(box2d) TO harvest_read_group;


--
-- Name: box2df_in(cstring); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box2df_in(cstring) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box2df_in(cstring) TO harvest_write_group;
GRANT ALL ON FUNCTION box2df_in(cstring) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box2df_in(cstring) TO soop;
GRANT ALL ON FUNCTION box2df_in(cstring) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box2df_in(cstring) TO argo;
GRANT ALL ON FUNCTION box2df_in(cstring) TO aodn_dart;
GRANT ALL ON FUNCTION box2df_in(cstring) TO anmn_metadata;
GRANT ALL ON FUNCTION box2df_in(cstring) TO harvest_read_group;


--
-- Name: box2df_out(box2df); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box2df_out(box2df) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box2df_out(box2df) TO harvest_write_group;
GRANT ALL ON FUNCTION box2df_out(box2df) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box2df_out(box2df) TO soop;
GRANT ALL ON FUNCTION box2df_out(box2df) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box2df_out(box2df) TO argo;
GRANT ALL ON FUNCTION box2df_out(box2df) TO aodn_dart;
GRANT ALL ON FUNCTION box2df_out(box2df) TO anmn_metadata;
GRANT ALL ON FUNCTION box2df_out(box2df) TO harvest_read_group;


--
-- Name: box3d_in(cstring); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box3d_in(cstring) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box3d_in(cstring) TO harvest_write_group;
GRANT ALL ON FUNCTION box3d_in(cstring) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box3d_in(cstring) TO soop;
GRANT ALL ON FUNCTION box3d_in(cstring) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box3d_in(cstring) TO argo;
GRANT ALL ON FUNCTION box3d_in(cstring) TO aodn_dart;
GRANT ALL ON FUNCTION box3d_in(cstring) TO anmn_metadata;
GRANT ALL ON FUNCTION box3d_in(cstring) TO harvest_read_group;


--
-- Name: box3d_out(box3d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box3d_out(box3d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box3d_out(box3d) TO harvest_write_group;
GRANT ALL ON FUNCTION box3d_out(box3d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box3d_out(box3d) TO soop;
GRANT ALL ON FUNCTION box3d_out(box3d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box3d_out(box3d) TO argo;
GRANT ALL ON FUNCTION box3d_out(box3d) TO aodn_dart;
GRANT ALL ON FUNCTION box3d_out(box3d) TO anmn_metadata;
GRANT ALL ON FUNCTION box3d_out(box3d) TO harvest_read_group;


--
-- Name: geography_analyze(internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_analyze(internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_analyze(internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_analyze(internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_analyze(internal) TO soop;
GRANT ALL ON FUNCTION geography_analyze(internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_analyze(internal) TO argo;
GRANT ALL ON FUNCTION geography_analyze(internal) TO aodn_dart;
GRANT ALL ON FUNCTION geography_analyze(internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_analyze(internal) TO harvest_read_group;


--
-- Name: geography_in(cstring, oid, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_in(cstring, oid, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_in(cstring, oid, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_in(cstring, oid, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_in(cstring, oid, integer) TO soop;
GRANT ALL ON FUNCTION geography_in(cstring, oid, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_in(cstring, oid, integer) TO argo;
GRANT ALL ON FUNCTION geography_in(cstring, oid, integer) TO aodn_dart;
GRANT ALL ON FUNCTION geography_in(cstring, oid, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_in(cstring, oid, integer) TO harvest_read_group;


--
-- Name: geography_out(geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_out(geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_out(geography) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_out(geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_out(geography) TO soop;
GRANT ALL ON FUNCTION geography_out(geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_out(geography) TO argo;
GRANT ALL ON FUNCTION geography_out(geography) TO aodn_dart;
GRANT ALL ON FUNCTION geography_out(geography) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_out(geography) TO harvest_read_group;


--
-- Name: geography_recv(internal, oid, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_recv(internal, oid, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_recv(internal, oid, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_recv(internal, oid, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_recv(internal, oid, integer) TO soop;
GRANT ALL ON FUNCTION geography_recv(internal, oid, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_recv(internal, oid, integer) TO argo;
GRANT ALL ON FUNCTION geography_recv(internal, oid, integer) TO aodn_dart;
GRANT ALL ON FUNCTION geography_recv(internal, oid, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_recv(internal, oid, integer) TO harvest_read_group;


--
-- Name: geography_send(geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_send(geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_send(geography) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_send(geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_send(geography) TO soop;
GRANT ALL ON FUNCTION geography_send(geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_send(geography) TO argo;
GRANT ALL ON FUNCTION geography_send(geography) TO aodn_dart;
GRANT ALL ON FUNCTION geography_send(geography) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_send(geography) TO harvest_read_group;


--
-- Name: geography_typmod_in(cstring[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_typmod_in(cstring[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_typmod_in(cstring[]) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_typmod_in(cstring[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_typmod_in(cstring[]) TO soop;
GRANT ALL ON FUNCTION geography_typmod_in(cstring[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_typmod_in(cstring[]) TO argo;
GRANT ALL ON FUNCTION geography_typmod_in(cstring[]) TO aodn_dart;
GRANT ALL ON FUNCTION geography_typmod_in(cstring[]) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_typmod_in(cstring[]) TO harvest_read_group;


--
-- Name: geography_typmod_out(integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_typmod_out(integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_typmod_out(integer) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_typmod_out(integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_typmod_out(integer) TO soop;
GRANT ALL ON FUNCTION geography_typmod_out(integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_typmod_out(integer) TO argo;
GRANT ALL ON FUNCTION geography_typmod_out(integer) TO aodn_dart;
GRANT ALL ON FUNCTION geography_typmod_out(integer) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_typmod_out(integer) TO harvest_read_group;


--
-- Name: geometry_analyze(internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_analyze(internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_analyze(internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_analyze(internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_analyze(internal) TO soop;
GRANT ALL ON FUNCTION geometry_analyze(internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_analyze(internal) TO argo;
GRANT ALL ON FUNCTION geometry_analyze(internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_analyze(internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_analyze(internal) TO harvest_read_group;


--
-- Name: geometry_in(cstring); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_in(cstring) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_in(cstring) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_in(cstring) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_in(cstring) TO soop;
GRANT ALL ON FUNCTION geometry_in(cstring) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_in(cstring) TO argo;
GRANT ALL ON FUNCTION geometry_in(cstring) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_in(cstring) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_in(cstring) TO harvest_read_group;


--
-- Name: geometry_out(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_out(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_out(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_out(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_out(geometry) TO soop;
GRANT ALL ON FUNCTION geometry_out(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_out(geometry) TO argo;
GRANT ALL ON FUNCTION geometry_out(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_out(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_out(geometry) TO harvest_read_group;


--
-- Name: geometry_recv(internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_recv(internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_recv(internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_recv(internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_recv(internal) TO soop;
GRANT ALL ON FUNCTION geometry_recv(internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_recv(internal) TO argo;
GRANT ALL ON FUNCTION geometry_recv(internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_recv(internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_recv(internal) TO harvest_read_group;


--
-- Name: geometry_send(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_send(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_send(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_send(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_send(geometry) TO soop;
GRANT ALL ON FUNCTION geometry_send(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_send(geometry) TO argo;
GRANT ALL ON FUNCTION geometry_send(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_send(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_send(geometry) TO harvest_read_group;


--
-- Name: geometry_typmod_in(cstring[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_typmod_in(cstring[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_typmod_in(cstring[]) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_typmod_in(cstring[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_typmod_in(cstring[]) TO soop;
GRANT ALL ON FUNCTION geometry_typmod_in(cstring[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_typmod_in(cstring[]) TO argo;
GRANT ALL ON FUNCTION geometry_typmod_in(cstring[]) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_typmod_in(cstring[]) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_typmod_in(cstring[]) TO harvest_read_group;


--
-- Name: geometry_typmod_out(integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_typmod_out(integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_typmod_out(integer) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_typmod_out(integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_typmod_out(integer) TO soop;
GRANT ALL ON FUNCTION geometry_typmod_out(integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_typmod_out(integer) TO argo;
GRANT ALL ON FUNCTION geometry_typmod_out(integer) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_typmod_out(integer) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_typmod_out(integer) TO harvest_read_group;


--
-- Name: gidx_in(cstring); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION gidx_in(cstring) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION gidx_in(cstring) TO harvest_write_group;
GRANT ALL ON FUNCTION gidx_in(cstring) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION gidx_in(cstring) TO soop;
GRANT ALL ON FUNCTION gidx_in(cstring) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION gidx_in(cstring) TO argo;
GRANT ALL ON FUNCTION gidx_in(cstring) TO aodn_dart;
GRANT ALL ON FUNCTION gidx_in(cstring) TO anmn_metadata;
GRANT ALL ON FUNCTION gidx_in(cstring) TO harvest_read_group;


--
-- Name: gidx_out(gidx); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION gidx_out(gidx) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION gidx_out(gidx) TO harvest_write_group;
GRANT ALL ON FUNCTION gidx_out(gidx) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION gidx_out(gidx) TO soop;
GRANT ALL ON FUNCTION gidx_out(gidx) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION gidx_out(gidx) TO argo;
GRANT ALL ON FUNCTION gidx_out(gidx) TO aodn_dart;
GRANT ALL ON FUNCTION gidx_out(gidx) TO anmn_metadata;
GRANT ALL ON FUNCTION gidx_out(gidx) TO harvest_read_group;


--
-- Name: pgis_abs_in(cstring); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION pgis_abs_in(cstring) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION pgis_abs_in(cstring) TO harvest_write_group;
GRANT ALL ON FUNCTION pgis_abs_in(cstring) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION pgis_abs_in(cstring) TO soop;
GRANT ALL ON FUNCTION pgis_abs_in(cstring) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION pgis_abs_in(cstring) TO argo;
GRANT ALL ON FUNCTION pgis_abs_in(cstring) TO aodn_dart;
GRANT ALL ON FUNCTION pgis_abs_in(cstring) TO anmn_metadata;
GRANT ALL ON FUNCTION pgis_abs_in(cstring) TO harvest_read_group;


--
-- Name: pgis_abs_out(pgis_abs); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION pgis_abs_out(pgis_abs) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION pgis_abs_out(pgis_abs) TO harvest_write_group;
GRANT ALL ON FUNCTION pgis_abs_out(pgis_abs) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION pgis_abs_out(pgis_abs) TO soop;
GRANT ALL ON FUNCTION pgis_abs_out(pgis_abs) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION pgis_abs_out(pgis_abs) TO argo;
GRANT ALL ON FUNCTION pgis_abs_out(pgis_abs) TO aodn_dart;
GRANT ALL ON FUNCTION pgis_abs_out(pgis_abs) TO anmn_metadata;
GRANT ALL ON FUNCTION pgis_abs_out(pgis_abs) TO harvest_read_group;


--
-- Name: spheroid_in(cstring); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION spheroid_in(cstring) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION spheroid_in(cstring) TO harvest_write_group;
GRANT ALL ON FUNCTION spheroid_in(cstring) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION spheroid_in(cstring) TO soop;
GRANT ALL ON FUNCTION spheroid_in(cstring) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION spheroid_in(cstring) TO argo;
GRANT ALL ON FUNCTION spheroid_in(cstring) TO aodn_dart;
GRANT ALL ON FUNCTION spheroid_in(cstring) TO anmn_metadata;
GRANT ALL ON FUNCTION spheroid_in(cstring) TO harvest_read_group;


--
-- Name: spheroid_out(spheroid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION spheroid_out(spheroid) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION spheroid_out(spheroid) TO harvest_write_group;
GRANT ALL ON FUNCTION spheroid_out(spheroid) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION spheroid_out(spheroid) TO soop;
GRANT ALL ON FUNCTION spheroid_out(spheroid) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION spheroid_out(spheroid) TO argo;
GRANT ALL ON FUNCTION spheroid_out(spheroid) TO aodn_dart;
GRANT ALL ON FUNCTION spheroid_out(spheroid) TO anmn_metadata;
GRANT ALL ON FUNCTION spheroid_out(spheroid) TO harvest_read_group;


SET search_path = aatams_sattag_qc_ctd, pg_catalog;

--
-- Name: format_name(character); Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT ALL ON FUNCTION format_name(p_name character) TO harvest_write_group;
GRANT ALL ON FUNCTION format_name(p_name character) TO harvest_read_group;


--
-- Name: getendtoken(character, character, integer); Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT ALL ON FUNCTION getendtoken(p_string character, p_regexp character, p_n integer) TO harvest_write_group;
GRANT ALL ON FUNCTION getendtoken(p_string character, p_regexp character, p_n integer) TO harvest_read_group;


SET search_path = abos, pg_catalog;

--
-- Name: getglobalattribute(bigint, character); Type: ACL; Schema: abos; Owner: postgres
--

GRANT ALL ON FUNCTION getglobalattribute(p_id bigint, p_attribute_name character) TO harvest_read_group;
GRANT ALL ON FUNCTION getglobalattribute(p_id bigint, p_attribute_name character) TO harvest_write_group;


--
-- Name: getglobalattributeasdouble(bigint, character); Type: ACL; Schema: abos; Owner: postgres
--

GRANT ALL ON FUNCTION getglobalattributeasdouble(p_id bigint, p_attribute_name character) TO harvest_read_group;
GRANT ALL ON FUNCTION getglobalattributeasdouble(p_id bigint, p_attribute_name character) TO harvest_write_group;


--
-- Name: getglobalattributeastimestamp(bigint, character); Type: ACL; Schema: abos; Owner: postgres
--

GRANT ALL ON FUNCTION getglobalattributeastimestamp(p_id bigint, p_attribute_name character) TO harvest_read_group;
GRANT ALL ON FUNCTION getglobalattributeastimestamp(p_id bigint, p_attribute_name character) TO harvest_write_group;


SET search_path = anmn_metadata, pg_catalog;

--
-- Name: getglobalattribute(bigint, character); Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT ALL ON FUNCTION getglobalattribute(p_id bigint, p_attribute_name character) TO harvest_write_group;
GRANT ALL ON FUNCTION getglobalattribute(p_id bigint, p_attribute_name character) TO harvest_read_group;


--
-- Name: getglobalattributeasdouble(bigint, character); Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT ALL ON FUNCTION getglobalattributeasdouble(p_id bigint, p_attribute_name character) TO harvest_write_group;
GRANT ALL ON FUNCTION getglobalattributeasdouble(p_id bigint, p_attribute_name character) TO harvest_read_group;


--
-- Name: getglobalattributeastimestamp(bigint, character); Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT ALL ON FUNCTION getglobalattributeastimestamp(p_id bigint, p_attribute_name character) TO harvest_write_group;
GRANT ALL ON FUNCTION getglobalattributeastimestamp(p_id bigint, p_attribute_name character) TO harvest_read_group;


SET search_path = auv_viewer_track, pg_catalog;

--
-- Name: clean_dive_campaign(); Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT ALL ON FUNCTION clean_dive_campaign() TO harvest_read_group;
GRANT ALL ON FUNCTION clean_dive_campaign() TO harvest_write_group;


--
-- Name: expand_too_small_polygons(); Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT ALL ON FUNCTION expand_too_small_polygons() TO harvest_read_group;
GRANT ALL ON FUNCTION expand_too_small_polygons() TO harvest_write_group;


SET search_path = public, pg_catalog;

--
-- Name: __st_countagg_transfn(agg_count, raster, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION __st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION __st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION __st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION __st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION __st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION __st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION __st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION __st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION __st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_read_group;


--
-- Name: _add_overview_constraint(name, name, name, name, name, name, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer) TO soop;
GRANT ALL ON FUNCTION _add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer) TO argo;
GRANT ALL ON FUNCTION _add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer) TO aodn_dart;
GRANT ALL ON FUNCTION _add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer) TO harvest_read_group;


--
-- Name: _add_raster_constraint(name, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _add_raster_constraint(cn name, sql text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _add_raster_constraint(cn name, sql text) TO harvest_write_group;
GRANT ALL ON FUNCTION _add_raster_constraint(cn name, sql text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _add_raster_constraint(cn name, sql text) TO soop;
GRANT ALL ON FUNCTION _add_raster_constraint(cn name, sql text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _add_raster_constraint(cn name, sql text) TO argo;
GRANT ALL ON FUNCTION _add_raster_constraint(cn name, sql text) TO aodn_dart;
GRANT ALL ON FUNCTION _add_raster_constraint(cn name, sql text) TO anmn_metadata;
GRANT ALL ON FUNCTION _add_raster_constraint(cn name, sql text) TO harvest_read_group;


--
-- Name: _add_raster_constraint_alignment(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _add_raster_constraint_blocksize(name, name, name, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO harvest_write_group;
GRANT ALL ON FUNCTION _add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO soop;
GRANT ALL ON FUNCTION _add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO argo;
GRANT ALL ON FUNCTION _add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO aodn_dart;
GRANT ALL ON FUNCTION _add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO anmn_metadata;
GRANT ALL ON FUNCTION _add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO harvest_read_group;


--
-- Name: _add_raster_constraint_coverage_tile(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _add_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _add_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _add_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _add_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _add_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _add_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _add_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _add_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _add_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _add_raster_constraint_extent(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _add_raster_constraint_nodata_values(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _add_raster_constraint_num_bands(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _add_raster_constraint_out_db(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _add_raster_constraint_pixel_types(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _add_raster_constraint_scale(name, name, name, character); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO harvest_write_group;
GRANT ALL ON FUNCTION _add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO soop;
GRANT ALL ON FUNCTION _add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO argo;
GRANT ALL ON FUNCTION _add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO aodn_dart;
GRANT ALL ON FUNCTION _add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO anmn_metadata;
GRANT ALL ON FUNCTION _add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO harvest_read_group;


--
-- Name: _add_raster_constraint_spatially_unique(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _add_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _add_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _add_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _add_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _add_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _add_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _add_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _add_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _add_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _add_raster_constraint_srid(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _drop_overview_constraint(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_overview_constraint(ovschema name, ovtable name, ovcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_overview_constraint(ovschema name, ovtable name, ovcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_overview_constraint(ovschema name, ovtable name, ovcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_overview_constraint(ovschema name, ovtable name, ovcolumn name) TO soop;
GRANT ALL ON FUNCTION _drop_overview_constraint(ovschema name, ovtable name, ovcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_overview_constraint(ovschema name, ovtable name, ovcolumn name) TO argo;
GRANT ALL ON FUNCTION _drop_overview_constraint(ovschema name, ovtable name, ovcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_overview_constraint(ovschema name, ovtable name, ovcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_overview_constraint(ovschema name, ovtable name, ovcolumn name) TO harvest_read_group;


--
-- Name: _drop_raster_constraint(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_raster_constraint(rastschema name, rasttable name, cn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_raster_constraint(rastschema name, rasttable name, cn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_raster_constraint(rastschema name, rasttable name, cn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_raster_constraint(rastschema name, rasttable name, cn name) TO soop;
GRANT ALL ON FUNCTION _drop_raster_constraint(rastschema name, rasttable name, cn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_raster_constraint(rastschema name, rasttable name, cn name) TO argo;
GRANT ALL ON FUNCTION _drop_raster_constraint(rastschema name, rasttable name, cn name) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_raster_constraint(rastschema name, rasttable name, cn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_raster_constraint(rastschema name, rasttable name, cn name) TO harvest_read_group;


--
-- Name: _drop_raster_constraint_alignment(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _drop_raster_constraint_blocksize(name, name, name, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO soop;
GRANT ALL ON FUNCTION _drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO argo;
GRANT ALL ON FUNCTION _drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO harvest_read_group;


--
-- Name: _drop_raster_constraint_coverage_tile(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _drop_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _drop_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _drop_raster_constraint_extent(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _drop_raster_constraint_nodata_values(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _drop_raster_constraint_num_bands(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _drop_raster_constraint_out_db(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _drop_raster_constraint_pixel_types(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _drop_raster_constraint_regular_blocking(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _drop_raster_constraint_scale(name, name, name, character); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO soop;
GRANT ALL ON FUNCTION _drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO argo;
GRANT ALL ON FUNCTION _drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO harvest_read_group;


--
-- Name: _drop_raster_constraint_spatially_unique(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _drop_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _drop_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _drop_raster_constraint_srid(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _overview_constraint(raster, integer, name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _overview_constraint(ov raster, factor integer, refschema name, reftable name, refcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _overview_constraint(ov raster, factor integer, refschema name, reftable name, refcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _overview_constraint(ov raster, factor integer, refschema name, reftable name, refcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _overview_constraint(ov raster, factor integer, refschema name, reftable name, refcolumn name) TO soop;
GRANT ALL ON FUNCTION _overview_constraint(ov raster, factor integer, refschema name, reftable name, refcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _overview_constraint(ov raster, factor integer, refschema name, reftable name, refcolumn name) TO argo;
GRANT ALL ON FUNCTION _overview_constraint(ov raster, factor integer, refschema name, reftable name, refcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _overview_constraint(ov raster, factor integer, refschema name, reftable name, refcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _overview_constraint(ov raster, factor integer, refschema name, reftable name, refcolumn name) TO harvest_read_group;


--
-- Name: _overview_constraint_info(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer) TO soop;
GRANT ALL ON FUNCTION _overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer) TO argo;
GRANT ALL ON FUNCTION _overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer) TO aodn_dart;
GRANT ALL ON FUNCTION _overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer) TO harvest_read_group;


--
-- Name: _postgis_deprecate(text, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _postgis_deprecate(oldname text, newname text, version text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _postgis_deprecate(oldname text, newname text, version text) TO harvest_write_group;
GRANT ALL ON FUNCTION _postgis_deprecate(oldname text, newname text, version text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _postgis_deprecate(oldname text, newname text, version text) TO soop;
GRANT ALL ON FUNCTION _postgis_deprecate(oldname text, newname text, version text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _postgis_deprecate(oldname text, newname text, version text) TO argo;
GRANT ALL ON FUNCTION _postgis_deprecate(oldname text, newname text, version text) TO aodn_dart;
GRANT ALL ON FUNCTION _postgis_deprecate(oldname text, newname text, version text) TO anmn_metadata;
GRANT ALL ON FUNCTION _postgis_deprecate(oldname text, newname text, version text) TO harvest_read_group;


--
-- Name: _postgis_join_selectivity(regclass, text, regclass, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _postgis_join_selectivity(regclass, text, regclass, text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _postgis_join_selectivity(regclass, text, regclass, text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION _postgis_join_selectivity(regclass, text, regclass, text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _postgis_join_selectivity(regclass, text, regclass, text, text) TO soop;
GRANT ALL ON FUNCTION _postgis_join_selectivity(regclass, text, regclass, text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _postgis_join_selectivity(regclass, text, regclass, text, text) TO argo;
GRANT ALL ON FUNCTION _postgis_join_selectivity(regclass, text, regclass, text, text) TO aodn_dart;
GRANT ALL ON FUNCTION _postgis_join_selectivity(regclass, text, regclass, text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION _postgis_join_selectivity(regclass, text, regclass, text, text) TO harvest_read_group;


--
-- Name: _postgis_selectivity(regclass, text, geometry, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _postgis_selectivity(tbl regclass, att_name text, geom geometry, mode text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _postgis_selectivity(tbl regclass, att_name text, geom geometry, mode text) TO harvest_write_group;
GRANT ALL ON FUNCTION _postgis_selectivity(tbl regclass, att_name text, geom geometry, mode text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _postgis_selectivity(tbl regclass, att_name text, geom geometry, mode text) TO soop;
GRANT ALL ON FUNCTION _postgis_selectivity(tbl regclass, att_name text, geom geometry, mode text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _postgis_selectivity(tbl regclass, att_name text, geom geometry, mode text) TO argo;
GRANT ALL ON FUNCTION _postgis_selectivity(tbl regclass, att_name text, geom geometry, mode text) TO aodn_dart;
GRANT ALL ON FUNCTION _postgis_selectivity(tbl regclass, att_name text, geom geometry, mode text) TO anmn_metadata;
GRANT ALL ON FUNCTION _postgis_selectivity(tbl regclass, att_name text, geom geometry, mode text) TO harvest_read_group;


--
-- Name: _postgis_stats(regclass, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _postgis_stats(tbl regclass, att_name text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _postgis_stats(tbl regclass, att_name text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION _postgis_stats(tbl regclass, att_name text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _postgis_stats(tbl regclass, att_name text, text) TO soop;
GRANT ALL ON FUNCTION _postgis_stats(tbl regclass, att_name text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _postgis_stats(tbl regclass, att_name text, text) TO argo;
GRANT ALL ON FUNCTION _postgis_stats(tbl regclass, att_name text, text) TO aodn_dart;
GRANT ALL ON FUNCTION _postgis_stats(tbl regclass, att_name text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION _postgis_stats(tbl regclass, att_name text, text) TO harvest_read_group;


--
-- Name: _raster_constraint_info_alignment(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _raster_constraint_info_blocksize(name, name, name, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text) TO harvest_read_group;


--
-- Name: _raster_constraint_info_coverage_tile(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_info_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_info_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_info_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_info_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_info_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_info_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_info_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_info_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_info_coverage_tile(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _raster_constraint_info_extent(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _raster_constraint_info_index(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_info_index(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_info_index(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_info_index(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_info_index(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_info_index(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_info_index(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_info_index(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_info_index(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_info_index(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _raster_constraint_info_nodata_values(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _raster_constraint_info_num_bands(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _raster_constraint_info_out_db(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _raster_constraint_info_pixel_types(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _raster_constraint_info_regular_blocking(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _raster_constraint_info_scale(name, name, name, character); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character) TO harvest_read_group;


--
-- Name: _raster_constraint_info_spatially_unique(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_info_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_info_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_info_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_info_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_info_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_info_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_info_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_info_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_info_spatially_unique(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _raster_constraint_info_srid(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name) TO harvest_read_group;


--
-- Name: _raster_constraint_nodata_values(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_nodata_values(rast raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_nodata_values(rast raster) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_nodata_values(rast raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_nodata_values(rast raster) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_nodata_values(rast raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_nodata_values(rast raster) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_nodata_values(rast raster) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_nodata_values(rast raster) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_nodata_values(rast raster) TO harvest_read_group;


--
-- Name: _raster_constraint_out_db(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_out_db(rast raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_out_db(rast raster) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_out_db(rast raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_out_db(rast raster) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_out_db(rast raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_out_db(rast raster) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_out_db(rast raster) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_out_db(rast raster) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_out_db(rast raster) TO harvest_read_group;


--
-- Name: _raster_constraint_pixel_types(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _raster_constraint_pixel_types(rast raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _raster_constraint_pixel_types(rast raster) TO harvest_write_group;
GRANT ALL ON FUNCTION _raster_constraint_pixel_types(rast raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _raster_constraint_pixel_types(rast raster) TO soop;
GRANT ALL ON FUNCTION _raster_constraint_pixel_types(rast raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _raster_constraint_pixel_types(rast raster) TO argo;
GRANT ALL ON FUNCTION _raster_constraint_pixel_types(rast raster) TO aodn_dart;
GRANT ALL ON FUNCTION _raster_constraint_pixel_types(rast raster) TO anmn_metadata;
GRANT ALL ON FUNCTION _raster_constraint_pixel_types(rast raster) TO harvest_read_group;


--
-- Name: _st_3ddfullywithin(geometry, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO soop;
GRANT ALL ON FUNCTION _st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO argo;
GRANT ALL ON FUNCTION _st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO harvest_read_group;


--
-- Name: _st_3ddwithin(geometry, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO soop;
GRANT ALL ON FUNCTION _st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO argo;
GRANT ALL ON FUNCTION _st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO harvest_read_group;


--
-- Name: _st_3dintersects(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_3dintersects(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_3dintersects(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_3dintersects(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_3dintersects(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_3dintersects(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_3dintersects(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_3dintersects(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_3dintersects(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_3dintersects(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_asgeojson(integer, geography, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_asgeojson(integer, geography, integer, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geography, integer, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geography, integer, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geography, integer, integer) TO soop;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geography, integer, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geography, integer, integer) TO argo;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geography, integer, integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geography, integer, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geography, integer, integer) TO harvest_read_group;


--
-- Name: _st_asgeojson(integer, geometry, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_asgeojson(integer, geometry, integer, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geometry, integer, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geometry, integer, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geometry, integer, integer) TO soop;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geometry, integer, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geometry, integer, integer) TO argo;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geometry, integer, integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geometry, integer, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_asgeojson(integer, geometry, integer, integer) TO harvest_read_group;


--
-- Name: _st_asgml(integer, geography, integer, integer, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_asgml(integer, geography, integer, integer, text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_asgml(integer, geography, integer, integer, text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_asgml(integer, geography, integer, integer, text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_asgml(integer, geography, integer, integer, text, text) TO soop;
GRANT ALL ON FUNCTION _st_asgml(integer, geography, integer, integer, text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_asgml(integer, geography, integer, integer, text, text) TO argo;
GRANT ALL ON FUNCTION _st_asgml(integer, geography, integer, integer, text, text) TO aodn_dart;
GRANT ALL ON FUNCTION _st_asgml(integer, geography, integer, integer, text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_asgml(integer, geography, integer, integer, text, text) TO harvest_read_group;


--
-- Name: _st_asgml(integer, geometry, integer, integer, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_asgml(integer, geometry, integer, integer, text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_asgml(integer, geometry, integer, integer, text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_asgml(integer, geometry, integer, integer, text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_asgml(integer, geometry, integer, integer, text, text) TO soop;
GRANT ALL ON FUNCTION _st_asgml(integer, geometry, integer, integer, text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_asgml(integer, geometry, integer, integer, text, text) TO argo;
GRANT ALL ON FUNCTION _st_asgml(integer, geometry, integer, integer, text, text) TO aodn_dart;
GRANT ALL ON FUNCTION _st_asgml(integer, geometry, integer, integer, text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_asgml(integer, geometry, integer, integer, text, text) TO harvest_read_group;


--
-- Name: _st_askml(integer, geography, integer, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_askml(integer, geography, integer, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_askml(integer, geography, integer, text) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_askml(integer, geography, integer, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_askml(integer, geography, integer, text) TO soop;
GRANT ALL ON FUNCTION _st_askml(integer, geography, integer, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_askml(integer, geography, integer, text) TO argo;
GRANT ALL ON FUNCTION _st_askml(integer, geography, integer, text) TO aodn_dart;
GRANT ALL ON FUNCTION _st_askml(integer, geography, integer, text) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_askml(integer, geography, integer, text) TO harvest_read_group;


--
-- Name: _st_askml(integer, geometry, integer, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_askml(integer, geometry, integer, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_askml(integer, geometry, integer, text) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_askml(integer, geometry, integer, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_askml(integer, geometry, integer, text) TO soop;
GRANT ALL ON FUNCTION _st_askml(integer, geometry, integer, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_askml(integer, geometry, integer, text) TO argo;
GRANT ALL ON FUNCTION _st_askml(integer, geometry, integer, text) TO aodn_dart;
GRANT ALL ON FUNCTION _st_askml(integer, geometry, integer, text) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_askml(integer, geometry, integer, text) TO harvest_read_group;


--
-- Name: _st_aspect4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_aspect4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_aspect4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_aspect4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_aspect4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION _st_aspect4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_aspect4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION _st_aspect4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION _st_aspect4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_aspect4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: _st_asraster(geometry, double precision, double precision, integer, integer, text[], double precision[], double precision[], double precision, double precision, double precision, double precision, double precision, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_asraster(geom geometry, scalex double precision, scaley double precision, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, touched boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_asraster(geom geometry, scalex double precision, scaley double precision, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_asraster(geom geometry, scalex double precision, scaley double precision, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_asraster(geom geometry, scalex double precision, scaley double precision, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, touched boolean) TO soop;
GRANT ALL ON FUNCTION _st_asraster(geom geometry, scalex double precision, scaley double precision, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_asraster(geom geometry, scalex double precision, scaley double precision, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, touched boolean) TO argo;
GRANT ALL ON FUNCTION _st_asraster(geom geometry, scalex double precision, scaley double precision, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, touched boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_asraster(geom geometry, scalex double precision, scaley double precision, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, touched boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_asraster(geom geometry, scalex double precision, scaley double precision, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_read_group;


--
-- Name: _st_asx3d(integer, geometry, integer, integer, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_asx3d(integer, geometry, integer, integer, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_asx3d(integer, geometry, integer, integer, text) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_asx3d(integer, geometry, integer, integer, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_asx3d(integer, geometry, integer, integer, text) TO soop;
GRANT ALL ON FUNCTION _st_asx3d(integer, geometry, integer, integer, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_asx3d(integer, geometry, integer, integer, text) TO argo;
GRANT ALL ON FUNCTION _st_asx3d(integer, geometry, integer, integer, text) TO aodn_dart;
GRANT ALL ON FUNCTION _st_asx3d(integer, geometry, integer, integer, text) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_asx3d(integer, geometry, integer, integer, text) TO harvest_read_group;


--
-- Name: _st_bestsrid(geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_bestsrid(geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_bestsrid(geography) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_bestsrid(geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_bestsrid(geography) TO soop;
GRANT ALL ON FUNCTION _st_bestsrid(geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_bestsrid(geography) TO argo;
GRANT ALL ON FUNCTION _st_bestsrid(geography) TO aodn_dart;
GRANT ALL ON FUNCTION _st_bestsrid(geography) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_bestsrid(geography) TO harvest_read_group;


--
-- Name: _st_bestsrid(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_bestsrid(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_bestsrid(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_bestsrid(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_bestsrid(geography, geography) TO soop;
GRANT ALL ON FUNCTION _st_bestsrid(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_bestsrid(geography, geography) TO argo;
GRANT ALL ON FUNCTION _st_bestsrid(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION _st_bestsrid(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_bestsrid(geography, geography) TO harvest_read_group;


--
-- Name: _st_buffer(geometry, double precision, cstring); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_buffer(geometry, double precision, cstring) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_buffer(geometry, double precision, cstring) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_buffer(geometry, double precision, cstring) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_buffer(geometry, double precision, cstring) TO soop;
GRANT ALL ON FUNCTION _st_buffer(geometry, double precision, cstring) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_buffer(geometry, double precision, cstring) TO argo;
GRANT ALL ON FUNCTION _st_buffer(geometry, double precision, cstring) TO aodn_dart;
GRANT ALL ON FUNCTION _st_buffer(geometry, double precision, cstring) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_buffer(geometry, double precision, cstring) TO harvest_read_group;


--
-- Name: _st_clip(raster, integer[], geometry, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO soop;
GRANT ALL ON FUNCTION _st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO argo;
GRANT ALL ON FUNCTION _st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO harvest_read_group;


--
-- Name: _st_colormap(raster, integer, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_colormap(rast raster, nband integer, colormap text, method text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_colormap(rast raster, nband integer, colormap text, method text) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_colormap(rast raster, nband integer, colormap text, method text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_colormap(rast raster, nband integer, colormap text, method text) TO soop;
GRANT ALL ON FUNCTION _st_colormap(rast raster, nband integer, colormap text, method text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_colormap(rast raster, nband integer, colormap text, method text) TO argo;
GRANT ALL ON FUNCTION _st_colormap(rast raster, nband integer, colormap text, method text) TO aodn_dart;
GRANT ALL ON FUNCTION _st_colormap(rast raster, nband integer, colormap text, method text) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_colormap(rast raster, nband integer, colormap text, method text) TO harvest_read_group;


--
-- Name: _st_concavehull(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_concavehull(param_inputgeom geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_concavehull(param_inputgeom geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_concavehull(param_inputgeom geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_concavehull(param_inputgeom geometry) TO soop;
GRANT ALL ON FUNCTION _st_concavehull(param_inputgeom geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_concavehull(param_inputgeom geometry) TO argo;
GRANT ALL ON FUNCTION _st_concavehull(param_inputgeom geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_concavehull(param_inputgeom geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_concavehull(param_inputgeom geometry) TO harvest_read_group;


--
-- Name: _st_contains(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_contains(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_contains(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_contains(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_contains(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_contains(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_contains(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_contains(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_contains(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_contains(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_contains(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION _st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION _st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: _st_containsproperly(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_containsproperly(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_containsproperly(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_containsproperly(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_containsproperly(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_containsproperly(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_containsproperly(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_containsproperly(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_containsproperly(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_containsproperly(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_containsproperly(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION _st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION _st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: _st_convertarray4ma(double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_convertarray4ma(value double precision[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_convertarray4ma(value double precision[]) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_convertarray4ma(value double precision[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_convertarray4ma(value double precision[]) TO soop;
GRANT ALL ON FUNCTION _st_convertarray4ma(value double precision[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_convertarray4ma(value double precision[]) TO argo;
GRANT ALL ON FUNCTION _st_convertarray4ma(value double precision[]) TO aodn_dart;
GRANT ALL ON FUNCTION _st_convertarray4ma(value double precision[]) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_convertarray4ma(value double precision[]) TO harvest_read_group;


--
-- Name: _st_count(raster, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_count(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_count(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_count(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_count(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION _st_count(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_count(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION _st_count(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_count(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_count(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_read_group;


--
-- Name: _st_count(text, text, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION _st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION _st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_read_group;


--
-- Name: _st_countagg_finalfn(agg_count); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_countagg_finalfn(agg agg_count) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_countagg_finalfn(agg agg_count) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_countagg_finalfn(agg agg_count) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_countagg_finalfn(agg agg_count) TO soop;
GRANT ALL ON FUNCTION _st_countagg_finalfn(agg agg_count) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_countagg_finalfn(agg agg_count) TO argo;
GRANT ALL ON FUNCTION _st_countagg_finalfn(agg agg_count) TO aodn_dart;
GRANT ALL ON FUNCTION _st_countagg_finalfn(agg agg_count) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_countagg_finalfn(agg agg_count) TO harvest_read_group;


--
-- Name: _st_countagg_transfn(agg_count, raster, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: _st_countagg_transfn(agg_count, raster, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: _st_countagg_transfn(agg_count, raster, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_countagg_transfn(agg agg_count, rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_read_group;


--
-- Name: _st_coveredby(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_coveredby(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_coveredby(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_coveredby(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_coveredby(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_coveredby(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_coveredby(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_coveredby(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_coveredby(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_coveredby(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_coveredby(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION _st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION _st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: _st_covers(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_covers(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_covers(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_covers(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_covers(geography, geography) TO soop;
GRANT ALL ON FUNCTION _st_covers(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_covers(geography, geography) TO argo;
GRANT ALL ON FUNCTION _st_covers(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION _st_covers(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_covers(geography, geography) TO harvest_read_group;


--
-- Name: _st_covers(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_covers(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_covers(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_covers(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_covers(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_covers(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_covers(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_covers(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_covers(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_covers(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_covers(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION _st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION _st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: _st_crosses(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_crosses(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_crosses(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_crosses(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_crosses(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_crosses(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_crosses(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_crosses(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_crosses(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_crosses(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_dfullywithin(geometry, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO soop;
GRANT ALL ON FUNCTION _st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO argo;
GRANT ALL ON FUNCTION _st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO harvest_read_group;


--
-- Name: _st_dfullywithin(raster, integer, raster, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO soop;
GRANT ALL ON FUNCTION _st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO argo;
GRANT ALL ON FUNCTION _st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO harvest_read_group;


--
-- Name: _st_distance(geography, geography, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_distance(geography, geography, double precision, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_distance(geography, geography, double precision, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_distance(geography, geography, double precision, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_distance(geography, geography, double precision, boolean) TO soop;
GRANT ALL ON FUNCTION _st_distance(geography, geography, double precision, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_distance(geography, geography, double precision, boolean) TO argo;
GRANT ALL ON FUNCTION _st_distance(geography, geography, double precision, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_distance(geography, geography, double precision, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_distance(geography, geography, double precision, boolean) TO harvest_read_group;


--
-- Name: _st_distancetree(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_distancetree(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography) TO soop;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography) TO argo;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography) TO harvest_read_group;


--
-- Name: _st_distancetree(geography, geography, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_distancetree(geography, geography, double precision, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography, double precision, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography, double precision, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography, double precision, boolean) TO soop;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography, double precision, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography, double precision, boolean) TO argo;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography, double precision, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography, double precision, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_distancetree(geography, geography, double precision, boolean) TO harvest_read_group;


--
-- Name: _st_distanceuncached(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography) TO soop;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography) TO argo;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography) TO harvest_read_group;


--
-- Name: _st_distanceuncached(geography, geography, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, boolean) TO soop;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, boolean) TO argo;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, boolean) TO harvest_read_group;


--
-- Name: _st_distanceuncached(geography, geography, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, double precision, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, double precision, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, double precision, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, double precision, boolean) TO soop;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, double precision, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, double precision, boolean) TO argo;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, double precision, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, double precision, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_distanceuncached(geography, geography, double precision, boolean) TO harvest_read_group;


--
-- Name: _st_dumppoints(geometry, integer[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_dumppoints(the_geom geometry, cur_path integer[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_dumppoints(the_geom geometry, cur_path integer[]) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_dumppoints(the_geom geometry, cur_path integer[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_dumppoints(the_geom geometry, cur_path integer[]) TO soop;
GRANT ALL ON FUNCTION _st_dumppoints(the_geom geometry, cur_path integer[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_dumppoints(the_geom geometry, cur_path integer[]) TO argo;
GRANT ALL ON FUNCTION _st_dumppoints(the_geom geometry, cur_path integer[]) TO aodn_dart;
GRANT ALL ON FUNCTION _st_dumppoints(the_geom geometry, cur_path integer[]) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_dumppoints(the_geom geometry, cur_path integer[]) TO harvest_read_group;


--
-- Name: _st_dwithin(geometry, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_dwithin(geom1 geometry, geom2 geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_dwithin(geom1 geometry, geom2 geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_dwithin(geom1 geometry, geom2 geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_dwithin(geom1 geometry, geom2 geometry, double precision) TO soop;
GRANT ALL ON FUNCTION _st_dwithin(geom1 geometry, geom2 geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_dwithin(geom1 geometry, geom2 geometry, double precision) TO argo;
GRANT ALL ON FUNCTION _st_dwithin(geom1 geometry, geom2 geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_dwithin(geom1 geometry, geom2 geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_dwithin(geom1 geometry, geom2 geometry, double precision) TO harvest_read_group;


--
-- Name: _st_dwithin(geography, geography, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_dwithin(geography, geography, double precision, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_dwithin(geography, geography, double precision, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_dwithin(geography, geography, double precision, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_dwithin(geography, geography, double precision, boolean) TO soop;
GRANT ALL ON FUNCTION _st_dwithin(geography, geography, double precision, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_dwithin(geography, geography, double precision, boolean) TO argo;
GRANT ALL ON FUNCTION _st_dwithin(geography, geography, double precision, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_dwithin(geography, geography, double precision, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_dwithin(geography, geography, double precision, boolean) TO harvest_read_group;


--
-- Name: _st_dwithin(raster, integer, raster, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO soop;
GRANT ALL ON FUNCTION _st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO argo;
GRANT ALL ON FUNCTION _st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO harvest_read_group;


--
-- Name: _st_dwithinuncached(geography, geography, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision) TO soop;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision) TO argo;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision) TO harvest_read_group;


--
-- Name: _st_dwithinuncached(geography, geography, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision, boolean) TO soop;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision, boolean) TO argo;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_dwithinuncached(geography, geography, double precision, boolean) TO harvest_read_group;


--
-- Name: _st_equals(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_equals(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_equals(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_equals(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_equals(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_equals(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_equals(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_equals(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_equals(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_equals(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_expand(geography, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_expand(geography, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_expand(geography, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_expand(geography, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_expand(geography, double precision) TO soop;
GRANT ALL ON FUNCTION _st_expand(geography, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_expand(geography, double precision) TO argo;
GRANT ALL ON FUNCTION _st_expand(geography, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_expand(geography, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_expand(geography, double precision) TO harvest_read_group;


--
-- Name: _st_gdalwarp(raster, text, double precision, integer, double precision, double precision, double precision, double precision, double precision, double precision, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_gdalwarp(rast raster, algorithm text, maxerr double precision, srid integer, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, width integer, height integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_gdalwarp(rast raster, algorithm text, maxerr double precision, srid integer, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, width integer, height integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_gdalwarp(rast raster, algorithm text, maxerr double precision, srid integer, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, width integer, height integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_gdalwarp(rast raster, algorithm text, maxerr double precision, srid integer, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, width integer, height integer) TO soop;
GRANT ALL ON FUNCTION _st_gdalwarp(rast raster, algorithm text, maxerr double precision, srid integer, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, width integer, height integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_gdalwarp(rast raster, algorithm text, maxerr double precision, srid integer, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, width integer, height integer) TO argo;
GRANT ALL ON FUNCTION _st_gdalwarp(rast raster, algorithm text, maxerr double precision, srid integer, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, width integer, height integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_gdalwarp(rast raster, algorithm text, maxerr double precision, srid integer, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, width integer, height integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_gdalwarp(rast raster, algorithm text, maxerr double precision, srid integer, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, width integer, height integer) TO harvest_read_group;


--
-- Name: _st_geomfromgml(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_geomfromgml(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_geomfromgml(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_geomfromgml(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_geomfromgml(text, integer) TO soop;
GRANT ALL ON FUNCTION _st_geomfromgml(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_geomfromgml(text, integer) TO argo;
GRANT ALL ON FUNCTION _st_geomfromgml(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_geomfromgml(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_geomfromgml(text, integer) TO harvest_read_group;


--
-- Name: _st_hillshade4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_hillshade4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_hillshade4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_hillshade4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_hillshade4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION _st_hillshade4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_hillshade4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION _st_hillshade4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION _st_hillshade4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_hillshade4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: _st_histogram(text, text, integer, boolean, double precision, integer, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION _st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION _st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: _st_histogram(raster, integer, boolean, double precision, integer, double precision[], boolean, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_histogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, min double precision, max double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_histogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, min double precision, max double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_histogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, min double precision, max double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_histogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, min double precision, max double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION _st_histogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, min double precision, max double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_histogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, min double precision, max double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION _st_histogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, min double precision, max double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_histogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, min double precision, max double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_histogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, min double precision, max double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: _st_intersects(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_intersects(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_intersects(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_intersects(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_intersects(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_intersects(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_intersects(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_intersects(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_intersects(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_intersects(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_intersects(geometry, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_intersects(geom geometry, rast raster, nband integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_intersects(geom geometry, rast raster, nband integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_intersects(geom geometry, rast raster, nband integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_intersects(geom geometry, rast raster, nband integer) TO soop;
GRANT ALL ON FUNCTION _st_intersects(geom geometry, rast raster, nband integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_intersects(geom geometry, rast raster, nband integer) TO argo;
GRANT ALL ON FUNCTION _st_intersects(geom geometry, rast raster, nband integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_intersects(geom geometry, rast raster, nband integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_intersects(geom geometry, rast raster, nband integer) TO harvest_read_group;


--
-- Name: _st_intersects(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION _st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION _st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: _st_linecrossingdirection(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_linecrossingdirection(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_linecrossingdirection(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_linecrossingdirection(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_linecrossingdirection(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_linecrossingdirection(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_linecrossingdirection(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_linecrossingdirection(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_linecrossingdirection(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_linecrossingdirection(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_longestline(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_longestline(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_longestline(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_longestline(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_longestline(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_longestline(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_longestline(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_longestline(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_longestline(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_longestline(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_mapalgebra(rastbandarg[], text, text, text, text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO soop;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO argo;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO harvest_read_group;


--
-- Name: _st_mapalgebra(rastbandarg[], regprocedure, text, integer, integer, text, raster, double precision[], boolean, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, distancex integer, distancey integer, extenttype text, customextent raster, mask double precision[], weighted boolean, VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, distancex integer, distancey integer, extenttype text, customextent raster, mask double precision[], weighted boolean, VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, distancex integer, distancey integer, extenttype text, customextent raster, mask double precision[], weighted boolean, VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, distancex integer, distancey integer, extenttype text, customextent raster, mask double precision[], weighted boolean, VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, distancex integer, distancey integer, extenttype text, customextent raster, mask double precision[], weighted boolean, VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, distancex integer, distancey integer, extenttype text, customextent raster, mask double precision[], weighted boolean, VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, distancex integer, distancey integer, extenttype text, customextent raster, mask double precision[], weighted boolean, VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, distancex integer, distancey integer, extenttype text, customextent raster, mask double precision[], weighted boolean, VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, distancex integer, distancey integer, extenttype text, customextent raster, mask double precision[], weighted boolean, VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: _st_maxdistance(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_maxdistance(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_maxdistance(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_maxdistance(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_maxdistance(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_maxdistance(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_maxdistance(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_maxdistance(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_maxdistance(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_maxdistance(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_neighborhood(raster, integer, integer, integer, integer, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION _st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION _st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: _st_orderingequals(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_orderingequals(geometrya geometry, geometryb geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_orderingequals(geometrya geometry, geometryb geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_orderingequals(geometrya geometry, geometryb geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_orderingequals(geometrya geometry, geometryb geometry) TO soop;
GRANT ALL ON FUNCTION _st_orderingequals(geometrya geometry, geometryb geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_orderingequals(geometrya geometry, geometryb geometry) TO argo;
GRANT ALL ON FUNCTION _st_orderingequals(geometrya geometry, geometryb geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_orderingequals(geometrya geometry, geometryb geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_orderingequals(geometrya geometry, geometryb geometry) TO harvest_read_group;


--
-- Name: _st_overlaps(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_overlaps(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_overlaps(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_overlaps(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_overlaps(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_overlaps(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_overlaps(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_overlaps(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_overlaps(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_overlaps(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_overlaps(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION _st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION _st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: _st_pixelaspolygons(raster, integer, integer, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_pixelaspolygons(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_pixelaspolygons(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_pixelaspolygons(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_pixelaspolygons(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO soop;
GRANT ALL ON FUNCTION _st_pixelaspolygons(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_pixelaspolygons(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO argo;
GRANT ALL ON FUNCTION _st_pixelaspolygons(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_pixelaspolygons(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_pixelaspolygons(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO harvest_read_group;


--
-- Name: _st_pointoutside(geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_pointoutside(geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_pointoutside(geography) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_pointoutside(geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_pointoutside(geography) TO soop;
GRANT ALL ON FUNCTION _st_pointoutside(geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_pointoutside(geography) TO argo;
GRANT ALL ON FUNCTION _st_pointoutside(geography) TO aodn_dart;
GRANT ALL ON FUNCTION _st_pointoutside(geography) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_pointoutside(geography) TO harvest_read_group;


--
-- Name: _st_quantile(raster, integer, boolean, double precision, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_quantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_quantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_quantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_quantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION _st_quantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_quantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION _st_quantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_quantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_quantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: _st_quantile(text, text, integer, boolean, double precision, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION _st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION _st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: _st_rastertoworldcoord(raster, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO soop;
GRANT ALL ON FUNCTION _st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO argo;
GRANT ALL ON FUNCTION _st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO harvest_read_group;


--
-- Name: _st_reclass(raster, reclassarg[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO soop;
GRANT ALL ON FUNCTION _st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO argo;
GRANT ALL ON FUNCTION _st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO aodn_dart;
GRANT ALL ON FUNCTION _st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO harvest_read_group;


--
-- Name: _st_roughness4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_roughness4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_roughness4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_roughness4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_roughness4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION _st_roughness4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_roughness4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION _st_roughness4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION _st_roughness4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_roughness4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: _st_samealignment_finalfn(agg_samealignment); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_samealignment_finalfn(agg agg_samealignment) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_samealignment_finalfn(agg agg_samealignment) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_samealignment_finalfn(agg agg_samealignment) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_samealignment_finalfn(agg agg_samealignment) TO soop;
GRANT ALL ON FUNCTION _st_samealignment_finalfn(agg agg_samealignment) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_samealignment_finalfn(agg agg_samealignment) TO argo;
GRANT ALL ON FUNCTION _st_samealignment_finalfn(agg agg_samealignment) TO aodn_dart;
GRANT ALL ON FUNCTION _st_samealignment_finalfn(agg agg_samealignment) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_samealignment_finalfn(agg agg_samealignment) TO harvest_read_group;


--
-- Name: _st_samealignment_transfn(agg_samealignment, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_samealignment_transfn(agg agg_samealignment, rast raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_samealignment_transfn(agg agg_samealignment, rast raster) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_samealignment_transfn(agg agg_samealignment, rast raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_samealignment_transfn(agg agg_samealignment, rast raster) TO soop;
GRANT ALL ON FUNCTION _st_samealignment_transfn(agg agg_samealignment, rast raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_samealignment_transfn(agg agg_samealignment, rast raster) TO argo;
GRANT ALL ON FUNCTION _st_samealignment_transfn(agg agg_samealignment, rast raster) TO aodn_dart;
GRANT ALL ON FUNCTION _st_samealignment_transfn(agg agg_samealignment, rast raster) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_samealignment_transfn(agg agg_samealignment, rast raster) TO harvest_read_group;


--
-- Name: _st_setvalues(raster, integer, integer, integer, double precision[], boolean[], boolean, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], hasnosetvalue boolean, nosetvalue double precision, keepnodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], hasnosetvalue boolean, nosetvalue double precision, keepnodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], hasnosetvalue boolean, nosetvalue double precision, keepnodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], hasnosetvalue boolean, nosetvalue double precision, keepnodata boolean) TO soop;
GRANT ALL ON FUNCTION _st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], hasnosetvalue boolean, nosetvalue double precision, keepnodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], hasnosetvalue boolean, nosetvalue double precision, keepnodata boolean) TO argo;
GRANT ALL ON FUNCTION _st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], hasnosetvalue boolean, nosetvalue double precision, keepnodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], hasnosetvalue boolean, nosetvalue double precision, keepnodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], hasnosetvalue boolean, nosetvalue double precision, keepnodata boolean) TO harvest_read_group;


--
-- Name: _st_slope4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_slope4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_slope4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_slope4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_slope4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION _st_slope4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_slope4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION _st_slope4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION _st_slope4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_slope4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: _st_summarystats(raster, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_summarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_summarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_summarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_summarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION _st_summarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_summarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION _st_summarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_summarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_summarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_read_group;


--
-- Name: _st_summarystats(text, text, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION _st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION _st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_read_group;


--
-- Name: _st_summarystats_finalfn(internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_summarystats_finalfn(internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_summarystats_finalfn(internal) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_summarystats_finalfn(internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_summarystats_finalfn(internal) TO soop;
GRANT ALL ON FUNCTION _st_summarystats_finalfn(internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_summarystats_finalfn(internal) TO argo;
GRANT ALL ON FUNCTION _st_summarystats_finalfn(internal) TO aodn_dart;
GRANT ALL ON FUNCTION _st_summarystats_finalfn(internal) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_summarystats_finalfn(internal) TO harvest_read_group;


--
-- Name: _st_summarystats_transfn(internal, raster, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, boolean, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, boolean, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, boolean, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, boolean, double precision) TO soop;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, boolean, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, boolean, double precision) TO argo;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, boolean, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, boolean, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, boolean, double precision) TO harvest_read_group;


--
-- Name: _st_summarystats_transfn(internal, raster, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean) TO soop;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean) TO argo;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean) TO harvest_read_group;


--
-- Name: _st_summarystats_transfn(internal, raster, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean, double precision) TO soop;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean, double precision) TO argo;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_summarystats_transfn(internal, raster, integer, boolean, double precision) TO harvest_read_group;


--
-- Name: _st_tile(raster, integer, integer, integer[], boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_tile(rast raster, width integer, height integer, nband integer[], padwithnodata boolean, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_tile(rast raster, width integer, height integer, nband integer[], padwithnodata boolean, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_tile(rast raster, width integer, height integer, nband integer[], padwithnodata boolean, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_tile(rast raster, width integer, height integer, nband integer[], padwithnodata boolean, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION _st_tile(rast raster, width integer, height integer, nband integer[], padwithnodata boolean, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_tile(rast raster, width integer, height integer, nband integer[], padwithnodata boolean, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION _st_tile(rast raster, width integer, height integer, nband integer[], padwithnodata boolean, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_tile(rast raster, width integer, height integer, nband integer[], padwithnodata boolean, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_tile(rast raster, width integer, height integer, nband integer[], padwithnodata boolean, nodataval double precision) TO harvest_read_group;


--
-- Name: _st_touches(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_touches(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_touches(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_touches(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_touches(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_touches(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_touches(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_touches(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_touches(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_touches(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_touches(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION _st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION _st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: _st_tpi4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_tpi4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_tpi4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_tpi4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_tpi4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION _st_tpi4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_tpi4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION _st_tpi4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION _st_tpi4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_tpi4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: _st_tri4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_tri4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_tri4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_tri4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_tri4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION _st_tri4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_tri4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION _st_tri4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION _st_tri4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_tri4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: _st_union_finalfn(internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_union_finalfn(internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_union_finalfn(internal) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_union_finalfn(internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_union_finalfn(internal) TO soop;
GRANT ALL ON FUNCTION _st_union_finalfn(internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_union_finalfn(internal) TO argo;
GRANT ALL ON FUNCTION _st_union_finalfn(internal) TO aodn_dart;
GRANT ALL ON FUNCTION _st_union_finalfn(internal) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_union_finalfn(internal) TO harvest_read_group;


--
-- Name: _st_union_transfn(internal, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_union_transfn(internal, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster) TO soop;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster) TO argo;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster) TO aodn_dart;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster) TO harvest_read_group;


--
-- Name: _st_union_transfn(internal, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer) TO soop;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer) TO argo;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer) TO harvest_read_group;


--
-- Name: _st_union_transfn(internal, raster, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, text) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, text) TO soop;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, text) TO argo;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, text) TO aodn_dart;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, text) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, text) TO harvest_read_group;


--
-- Name: _st_union_transfn(internal, raster, unionarg[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, unionarg[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, unionarg[]) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, unionarg[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, unionarg[]) TO soop;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, unionarg[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, unionarg[]) TO argo;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, unionarg[]) TO aodn_dart;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, unionarg[]) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, unionarg[]) TO harvest_read_group;


--
-- Name: _st_union_transfn(internal, raster, integer, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer, text) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer, text) TO soop;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer, text) TO argo;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer, text) TO aodn_dart;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer, text) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_union_transfn(internal, raster, integer, text) TO harvest_read_group;


--
-- Name: _st_valuecount(raster, integer, boolean, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION _st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION _st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO harvest_read_group;


--
-- Name: _st_valuecount(text, text, integer, boolean, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION _st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION _st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION _st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer, OUT percent double precision) TO harvest_read_group;


--
-- Name: _st_voronoi(geometry, geometry, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_voronoi(g1 geometry, clip geometry, tolerance double precision, return_polygons boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_voronoi(g1 geometry, clip geometry, tolerance double precision, return_polygons boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_voronoi(g1 geometry, clip geometry, tolerance double precision, return_polygons boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_voronoi(g1 geometry, clip geometry, tolerance double precision, return_polygons boolean) TO soop;
GRANT ALL ON FUNCTION _st_voronoi(g1 geometry, clip geometry, tolerance double precision, return_polygons boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_voronoi(g1 geometry, clip geometry, tolerance double precision, return_polygons boolean) TO argo;
GRANT ALL ON FUNCTION _st_voronoi(g1 geometry, clip geometry, tolerance double precision, return_polygons boolean) TO aodn_dart;
GRANT ALL ON FUNCTION _st_voronoi(g1 geometry, clip geometry, tolerance double precision, return_polygons boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_voronoi(g1 geometry, clip geometry, tolerance double precision, return_polygons boolean) TO harvest_read_group;


--
-- Name: _st_within(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_within(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_within(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_within(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_within(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION _st_within(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_within(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION _st_within(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION _st_within(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_within(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: _st_within(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION _st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION _st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: _st_worldtorastercoord(raster, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO soop;
GRANT ALL ON FUNCTION _st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO argo;
GRANT ALL ON FUNCTION _st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO aodn_dart;
GRANT ALL ON FUNCTION _st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO harvest_read_group;


--
-- Name: _updaterastersrid(name, name, name, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION _updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION _updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO harvest_write_group;
GRANT ALL ON FUNCTION _updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION _updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO soop;
GRANT ALL ON FUNCTION _updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION _updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO argo;
GRANT ALL ON FUNCTION _updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO aodn_dart;
GRANT ALL ON FUNCTION _updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO anmn_metadata;
GRANT ALL ON FUNCTION _updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO harvest_read_group;


--
-- Name: add_id_to_polygons(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION add_id_to_polygons(p_gml text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION add_id_to_polygons(p_gml text) TO harvest_write_group;
GRANT ALL ON FUNCTION add_id_to_polygons(p_gml text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION add_id_to_polygons(p_gml text) TO soop;
GRANT ALL ON FUNCTION add_id_to_polygons(p_gml text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION add_id_to_polygons(p_gml text) TO argo;
GRANT ALL ON FUNCTION add_id_to_polygons(p_gml text) TO aodn_dart;
GRANT ALL ON FUNCTION add_id_to_polygons(p_gml text) TO anmn_metadata;
GRANT ALL ON FUNCTION add_id_to_polygons(p_gml text) TO harvest_read_group;


--
-- Name: add_point_shortest(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION add_point_shortest(linestring geometry, point geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION add_point_shortest(linestring geometry, point geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION add_point_shortest(linestring geometry, point geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION add_point_shortest(linestring geometry, point geometry) TO soop;
GRANT ALL ON FUNCTION add_point_shortest(linestring geometry, point geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION add_point_shortest(linestring geometry, point geometry) TO argo;
GRANT ALL ON FUNCTION add_point_shortest(linestring geometry, point geometry) TO aodn_dart;
GRANT ALL ON FUNCTION add_point_shortest(linestring geometry, point geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION add_point_shortest(linestring geometry, point geometry) TO harvest_read_group;


--
-- Name: addauth(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION addauth(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION addauth(text) TO harvest_write_group;
GRANT ALL ON FUNCTION addauth(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION addauth(text) TO soop;
GRANT ALL ON FUNCTION addauth(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION addauth(text) TO argo;
GRANT ALL ON FUNCTION addauth(text) TO aodn_dart;
GRANT ALL ON FUNCTION addauth(text) TO anmn_metadata;
GRANT ALL ON FUNCTION addauth(text) TO harvest_read_group;


--
-- Name: addgeometrycolumn(character varying, character varying, integer, character varying, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO soop;
GRANT ALL ON FUNCTION addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO argo;
GRANT ALL ON FUNCTION addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO aodn_dart;
GRANT ALL ON FUNCTION addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO harvest_read_group;


--
-- Name: addgeometrycolumn(character varying, character varying, character varying, integer, character varying, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO soop;
GRANT ALL ON FUNCTION addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO argo;
GRANT ALL ON FUNCTION addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO aodn_dart;
GRANT ALL ON FUNCTION addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean) TO harvest_read_group;


--
-- Name: addgeometrycolumn(character varying, character varying, character varying, character varying, integer, character varying, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean) TO soop;
GRANT ALL ON FUNCTION addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean) TO argo;
GRANT ALL ON FUNCTION addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean) TO aodn_dart;
GRANT ALL ON FUNCTION addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean) TO harvest_read_group;


--
-- Name: addoverviewconstraints(name, name, name, name, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer) TO harvest_write_group;
GRANT ALL ON FUNCTION addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer) TO soop;
GRANT ALL ON FUNCTION addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer) TO argo;
GRANT ALL ON FUNCTION addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer) TO aodn_dart;
GRANT ALL ON FUNCTION addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer) TO anmn_metadata;
GRANT ALL ON FUNCTION addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer) TO harvest_read_group;


--
-- Name: addoverviewconstraints(name, name, name, name, name, name, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer) TO harvest_write_group;
GRANT ALL ON FUNCTION addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer) TO soop;
GRANT ALL ON FUNCTION addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer) TO argo;
GRANT ALL ON FUNCTION addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer) TO aodn_dart;
GRANT ALL ON FUNCTION addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer) TO anmn_metadata;
GRANT ALL ON FUNCTION addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer) TO harvest_read_group;


--
-- Name: addrasterconstraints(name, name, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO soop;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO argo;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO aodn_dart;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO harvest_read_group;


--
-- Name: addrasterconstraints(name, name, name, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO soop;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO argo;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO aodn_dart;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO harvest_read_group;


--
-- Name: addrasterconstraints(name, name, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO soop;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO argo;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO aodn_dart;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION addrasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO harvest_read_group;


--
-- Name: addrasterconstraints(name, name, name, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO soop;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO argo;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO aodn_dart;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO harvest_read_group;


--
-- Name: boundingpolygon(text, text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION boundingpolygon(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION boundingpolygon(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION boundingpolygon(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION boundingpolygon(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO soop;
GRANT ALL ON FUNCTION boundingpolygon(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION boundingpolygon(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO argo;
GRANT ALL ON FUNCTION boundingpolygon(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO aodn_dart;
GRANT ALL ON FUNCTION boundingpolygon(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION boundingpolygon(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO harvest_read_group;


--
-- Name: boundingpolygonasgml3(text, text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION boundingpolygonasgml3(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION boundingpolygonasgml3(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION boundingpolygonasgml3(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION boundingpolygonasgml3(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO soop;
GRANT ALL ON FUNCTION boundingpolygonasgml3(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION boundingpolygonasgml3(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO argo;
GRANT ALL ON FUNCTION boundingpolygonasgml3(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO aodn_dart;
GRANT ALL ON FUNCTION boundingpolygonasgml3(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION boundingpolygonasgml3(p_schema_name text, p_table_name text, p_column_name text, p_resolution double precision) TO harvest_read_group;


--
-- Name: box(box3d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box(box3d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box(box3d) TO harvest_write_group;
GRANT ALL ON FUNCTION box(box3d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box(box3d) TO soop;
GRANT ALL ON FUNCTION box(box3d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box(box3d) TO argo;
GRANT ALL ON FUNCTION box(box3d) TO aodn_dart;
GRANT ALL ON FUNCTION box(box3d) TO anmn_metadata;
GRANT ALL ON FUNCTION box(box3d) TO harvest_read_group;


--
-- Name: box(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION box(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box(geometry) TO soop;
GRANT ALL ON FUNCTION box(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box(geometry) TO argo;
GRANT ALL ON FUNCTION box(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION box(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION box(geometry) TO harvest_read_group;


--
-- Name: box2d(box3d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box2d(box3d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box2d(box3d) TO harvest_write_group;
GRANT ALL ON FUNCTION box2d(box3d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box2d(box3d) TO soop;
GRANT ALL ON FUNCTION box2d(box3d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box2d(box3d) TO argo;
GRANT ALL ON FUNCTION box2d(box3d) TO aodn_dart;
GRANT ALL ON FUNCTION box2d(box3d) TO anmn_metadata;
GRANT ALL ON FUNCTION box2d(box3d) TO harvest_read_group;


--
-- Name: box2d(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box2d(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box2d(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION box2d(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box2d(geometry) TO soop;
GRANT ALL ON FUNCTION box2d(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box2d(geometry) TO argo;
GRANT ALL ON FUNCTION box2d(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION box2d(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION box2d(geometry) TO harvest_read_group;


--
-- Name: box3d(box2d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box3d(box2d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box3d(box2d) TO harvest_write_group;
GRANT ALL ON FUNCTION box3d(box2d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box3d(box2d) TO soop;
GRANT ALL ON FUNCTION box3d(box2d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box3d(box2d) TO argo;
GRANT ALL ON FUNCTION box3d(box2d) TO aodn_dart;
GRANT ALL ON FUNCTION box3d(box2d) TO anmn_metadata;
GRANT ALL ON FUNCTION box3d(box2d) TO harvest_read_group;


--
-- Name: box3d(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box3d(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box3d(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION box3d(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box3d(geometry) TO soop;
GRANT ALL ON FUNCTION box3d(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box3d(geometry) TO argo;
GRANT ALL ON FUNCTION box3d(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION box3d(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION box3d(geometry) TO harvest_read_group;


--
-- Name: box3d(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box3d(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box3d(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION box3d(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box3d(raster) TO soop;
GRANT ALL ON FUNCTION box3d(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box3d(raster) TO argo;
GRANT ALL ON FUNCTION box3d(raster) TO aodn_dart;
GRANT ALL ON FUNCTION box3d(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION box3d(raster) TO harvest_read_group;


--
-- Name: box3dtobox(box3d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION box3dtobox(box3d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION box3dtobox(box3d) TO harvest_write_group;
GRANT ALL ON FUNCTION box3dtobox(box3d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION box3dtobox(box3d) TO soop;
GRANT ALL ON FUNCTION box3dtobox(box3d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION box3dtobox(box3d) TO argo;
GRANT ALL ON FUNCTION box3dtobox(box3d) TO aodn_dart;
GRANT ALL ON FUNCTION box3dtobox(box3d) TO anmn_metadata;
GRANT ALL ON FUNCTION box3dtobox(box3d) TO harvest_read_group;


--
-- Name: bytea(geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION bytea(geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION bytea(geography) TO harvest_write_group;
GRANT ALL ON FUNCTION bytea(geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION bytea(geography) TO soop;
GRANT ALL ON FUNCTION bytea(geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION bytea(geography) TO argo;
GRANT ALL ON FUNCTION bytea(geography) TO aodn_dart;
GRANT ALL ON FUNCTION bytea(geography) TO anmn_metadata;
GRANT ALL ON FUNCTION bytea(geography) TO harvest_read_group;


--
-- Name: bytea(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION bytea(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION bytea(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION bytea(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION bytea(geometry) TO soop;
GRANT ALL ON FUNCTION bytea(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION bytea(geometry) TO argo;
GRANT ALL ON FUNCTION bytea(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION bytea(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION bytea(geometry) TO harvest_read_group;


--
-- Name: bytea(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION bytea(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION bytea(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION bytea(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION bytea(raster) TO soop;
GRANT ALL ON FUNCTION bytea(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION bytea(raster) TO argo;
GRANT ALL ON FUNCTION bytea(raster) TO aodn_dart;
GRANT ALL ON FUNCTION bytea(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION bytea(raster) TO harvest_read_group;


--
-- Name: checkauth(text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION checkauth(text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION checkauth(text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION checkauth(text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION checkauth(text, text) TO soop;
GRANT ALL ON FUNCTION checkauth(text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION checkauth(text, text) TO argo;
GRANT ALL ON FUNCTION checkauth(text, text) TO aodn_dart;
GRANT ALL ON FUNCTION checkauth(text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION checkauth(text, text) TO harvest_read_group;


--
-- Name: checkauth(text, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION checkauth(text, text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION checkauth(text, text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION checkauth(text, text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION checkauth(text, text, text) TO soop;
GRANT ALL ON FUNCTION checkauth(text, text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION checkauth(text, text, text) TO argo;
GRANT ALL ON FUNCTION checkauth(text, text, text) TO aodn_dart;
GRANT ALL ON FUNCTION checkauth(text, text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION checkauth(text, text, text) TO harvest_read_group;


--
-- Name: checkauthtrigger(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION checkauthtrigger() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION checkauthtrigger() TO harvest_write_group;
GRANT ALL ON FUNCTION checkauthtrigger() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION checkauthtrigger() TO soop;
GRANT ALL ON FUNCTION checkauthtrigger() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION checkauthtrigger() TO argo;
GRANT ALL ON FUNCTION checkauthtrigger() TO aodn_dart;
GRANT ALL ON FUNCTION checkauthtrigger() TO anmn_metadata;
GRANT ALL ON FUNCTION checkauthtrigger() TO harvest_read_group;


--
-- Name: contains_2d(box2df, box2df); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION contains_2d(box2df, box2df) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION contains_2d(box2df, box2df) TO harvest_write_group;
GRANT ALL ON FUNCTION contains_2d(box2df, box2df) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION contains_2d(box2df, box2df) TO soop;
GRANT ALL ON FUNCTION contains_2d(box2df, box2df) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION contains_2d(box2df, box2df) TO argo;
GRANT ALL ON FUNCTION contains_2d(box2df, box2df) TO aodn_dart;
GRANT ALL ON FUNCTION contains_2d(box2df, box2df) TO anmn_metadata;
GRANT ALL ON FUNCTION contains_2d(box2df, box2df) TO harvest_read_group;


--
-- Name: contains_2d(box2df, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION contains_2d(box2df, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION contains_2d(box2df, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION contains_2d(box2df, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION contains_2d(box2df, geometry) TO soop;
GRANT ALL ON FUNCTION contains_2d(box2df, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION contains_2d(box2df, geometry) TO argo;
GRANT ALL ON FUNCTION contains_2d(box2df, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION contains_2d(box2df, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION contains_2d(box2df, geometry) TO harvest_read_group;


--
-- Name: contains_2d(geometry, box2df); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION contains_2d(geometry, box2df) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION contains_2d(geometry, box2df) TO harvest_write_group;
GRANT ALL ON FUNCTION contains_2d(geometry, box2df) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION contains_2d(geometry, box2df) TO soop;
GRANT ALL ON FUNCTION contains_2d(geometry, box2df) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION contains_2d(geometry, box2df) TO argo;
GRANT ALL ON FUNCTION contains_2d(geometry, box2df) TO aodn_dart;
GRANT ALL ON FUNCTION contains_2d(geometry, box2df) TO anmn_metadata;
GRANT ALL ON FUNCTION contains_2d(geometry, box2df) TO harvest_read_group;


--
-- Name: create_grid_cells(double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION create_grid_cells(p_resolution double precision, OUT "row" integer, OUT col integer, OUT cell geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION create_grid_cells(p_resolution double precision, OUT "row" integer, OUT col integer, OUT cell geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION create_grid_cells(p_resolution double precision, OUT "row" integer, OUT col integer, OUT cell geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION create_grid_cells(p_resolution double precision, OUT "row" integer, OUT col integer, OUT cell geometry) TO soop;
GRANT ALL ON FUNCTION create_grid_cells(p_resolution double precision, OUT "row" integer, OUT col integer, OUT cell geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION create_grid_cells(p_resolution double precision, OUT "row" integer, OUT col integer, OUT cell geometry) TO argo;
GRANT ALL ON FUNCTION create_grid_cells(p_resolution double precision, OUT "row" integer, OUT col integer, OUT cell geometry) TO aodn_dart;
GRANT ALL ON FUNCTION create_grid_cells(p_resolution double precision, OUT "row" integer, OUT col integer, OUT cell geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION create_grid_cells(p_resolution double precision, OUT "row" integer, OUT col integer, OUT cell geometry) TO harvest_read_group;


--
-- Name: disablelongtransactions(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION disablelongtransactions() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION disablelongtransactions() TO harvest_write_group;
GRANT ALL ON FUNCTION disablelongtransactions() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION disablelongtransactions() TO soop;
GRANT ALL ON FUNCTION disablelongtransactions() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION disablelongtransactions() TO argo;
GRANT ALL ON FUNCTION disablelongtransactions() TO aodn_dart;
GRANT ALL ON FUNCTION disablelongtransactions() TO anmn_metadata;
GRANT ALL ON FUNCTION disablelongtransactions() TO harvest_read_group;


--
-- Name: drop_objects_in_schema(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION drop_objects_in_schema(schema text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION drop_objects_in_schema(schema text) TO harvest_write_group;
GRANT ALL ON FUNCTION drop_objects_in_schema(schema text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION drop_objects_in_schema(schema text) TO soop;
GRANT ALL ON FUNCTION drop_objects_in_schema(schema text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION drop_objects_in_schema(schema text) TO argo;
GRANT ALL ON FUNCTION drop_objects_in_schema(schema text) TO aodn_dart;
GRANT ALL ON FUNCTION drop_objects_in_schema(schema text) TO anmn_metadata;
GRANT ALL ON FUNCTION drop_objects_in_schema(schema text) TO harvest_read_group;


--
-- Name: dropgeometrycolumn(character varying, character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION dropgeometrycolumn(table_name character varying, column_name character varying) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION dropgeometrycolumn(table_name character varying, column_name character varying) TO harvest_write_group;
GRANT ALL ON FUNCTION dropgeometrycolumn(table_name character varying, column_name character varying) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION dropgeometrycolumn(table_name character varying, column_name character varying) TO soop;
GRANT ALL ON FUNCTION dropgeometrycolumn(table_name character varying, column_name character varying) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION dropgeometrycolumn(table_name character varying, column_name character varying) TO argo;
GRANT ALL ON FUNCTION dropgeometrycolumn(table_name character varying, column_name character varying) TO aodn_dart;
GRANT ALL ON FUNCTION dropgeometrycolumn(table_name character varying, column_name character varying) TO anmn_metadata;
GRANT ALL ON FUNCTION dropgeometrycolumn(table_name character varying, column_name character varying) TO harvest_read_group;


--
-- Name: dropgeometrycolumn(character varying, character varying, character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying) TO harvest_write_group;
GRANT ALL ON FUNCTION dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying) TO soop;
GRANT ALL ON FUNCTION dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying) TO argo;
GRANT ALL ON FUNCTION dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying) TO aodn_dart;
GRANT ALL ON FUNCTION dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying) TO anmn_metadata;
GRANT ALL ON FUNCTION dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying) TO harvest_read_group;


--
-- Name: dropgeometrycolumn(character varying, character varying, character varying, character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying) TO harvest_write_group;
GRANT ALL ON FUNCTION dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying) TO soop;
GRANT ALL ON FUNCTION dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying) TO argo;
GRANT ALL ON FUNCTION dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying) TO aodn_dart;
GRANT ALL ON FUNCTION dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying) TO anmn_metadata;
GRANT ALL ON FUNCTION dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying) TO harvest_read_group;


--
-- Name: dropgeometrytable(character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION dropgeometrytable(table_name character varying) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION dropgeometrytable(table_name character varying) TO harvest_write_group;
GRANT ALL ON FUNCTION dropgeometrytable(table_name character varying) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION dropgeometrytable(table_name character varying) TO soop;
GRANT ALL ON FUNCTION dropgeometrytable(table_name character varying) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION dropgeometrytable(table_name character varying) TO argo;
GRANT ALL ON FUNCTION dropgeometrytable(table_name character varying) TO aodn_dart;
GRANT ALL ON FUNCTION dropgeometrytable(table_name character varying) TO anmn_metadata;
GRANT ALL ON FUNCTION dropgeometrytable(table_name character varying) TO harvest_read_group;


--
-- Name: dropgeometrytable(character varying, character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION dropgeometrytable(schema_name character varying, table_name character varying) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION dropgeometrytable(schema_name character varying, table_name character varying) TO harvest_write_group;
GRANT ALL ON FUNCTION dropgeometrytable(schema_name character varying, table_name character varying) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION dropgeometrytable(schema_name character varying, table_name character varying) TO soop;
GRANT ALL ON FUNCTION dropgeometrytable(schema_name character varying, table_name character varying) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION dropgeometrytable(schema_name character varying, table_name character varying) TO argo;
GRANT ALL ON FUNCTION dropgeometrytable(schema_name character varying, table_name character varying) TO aodn_dart;
GRANT ALL ON FUNCTION dropgeometrytable(schema_name character varying, table_name character varying) TO anmn_metadata;
GRANT ALL ON FUNCTION dropgeometrytable(schema_name character varying, table_name character varying) TO harvest_read_group;


--
-- Name: dropgeometrytable(character varying, character varying, character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying) TO harvest_write_group;
GRANT ALL ON FUNCTION dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying) TO soop;
GRANT ALL ON FUNCTION dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying) TO argo;
GRANT ALL ON FUNCTION dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying) TO aodn_dart;
GRANT ALL ON FUNCTION dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying) TO anmn_metadata;
GRANT ALL ON FUNCTION dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying) TO harvest_read_group;


--
-- Name: dropoverviewconstraints(name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION dropoverviewconstraints(ovtable name, ovcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovtable name, ovcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovtable name, ovcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovtable name, ovcolumn name) TO soop;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovtable name, ovcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovtable name, ovcolumn name) TO argo;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovtable name, ovcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovtable name, ovcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovtable name, ovcolumn name) TO harvest_read_group;


--
-- Name: dropoverviewconstraints(name, name, name); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name) TO harvest_write_group;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name) TO soop;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name) TO argo;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name) TO aodn_dart;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name) TO anmn_metadata;
GRANT ALL ON FUNCTION dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name) TO harvest_read_group;


--
-- Name: droprasterconstraints(name, name, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO soop;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO argo;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO aodn_dart;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[]) TO harvest_read_group;


--
-- Name: droprasterconstraints(name, name, name, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO soop;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO argo;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO aodn_dart;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[]) TO harvest_read_group;


--
-- Name: droprasterconstraints(name, name, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO soop;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO argo;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO aodn_dart;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION droprasterconstraints(rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO harvest_read_group;


--
-- Name: droprasterconstraints(name, name, name, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO soop;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO argo;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO aodn_dart;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean, scale_x boolean, scale_y boolean, blocksize_x boolean, blocksize_y boolean, same_alignment boolean, regular_blocking boolean, num_bands boolean, pixel_types boolean, nodata_values boolean, out_db boolean, extent boolean) TO harvest_read_group;


--
-- Name: enablelongtransactions(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION enablelongtransactions() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION enablelongtransactions() TO harvest_write_group;
GRANT ALL ON FUNCTION enablelongtransactions() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION enablelongtransactions() TO soop;
GRANT ALL ON FUNCTION enablelongtransactions() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION enablelongtransactions() TO argo;
GRANT ALL ON FUNCTION enablelongtransactions() TO aodn_dart;
GRANT ALL ON FUNCTION enablelongtransactions() TO anmn_metadata;
GRANT ALL ON FUNCTION enablelongtransactions() TO harvest_read_group;


--
-- Name: equals(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION equals(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION equals(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION equals(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION equals(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION equals(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION equals(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION equals(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION equals(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION equals(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: find_srid(character varying, character varying, character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION find_srid(character varying, character varying, character varying) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION find_srid(character varying, character varying, character varying) TO harvest_write_group;
GRANT ALL ON FUNCTION find_srid(character varying, character varying, character varying) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION find_srid(character varying, character varying, character varying) TO soop;
GRANT ALL ON FUNCTION find_srid(character varying, character varying, character varying) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION find_srid(character varying, character varying, character varying) TO argo;
GRANT ALL ON FUNCTION find_srid(character varying, character varying, character varying) TO aodn_dart;
GRANT ALL ON FUNCTION find_srid(character varying, character varying, character varying) TO anmn_metadata;
GRANT ALL ON FUNCTION find_srid(character varying, character varying, character varying) TO harvest_read_group;


--
-- Name: format_name(character); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION format_name(p_name character) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION format_name(p_name character) TO harvest_write_group;
GRANT ALL ON FUNCTION format_name(p_name character) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION format_name(p_name character) TO soop;
GRANT ALL ON FUNCTION format_name(p_name character) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION format_name(p_name character) TO argo;
GRANT ALL ON FUNCTION format_name(p_name character) TO aodn_dart;
GRANT ALL ON FUNCTION format_name(p_name character) TO anmn_metadata;
GRANT ALL ON FUNCTION format_name(p_name character) TO harvest_read_group;


--
-- Name: geog_brin_inclusion_add_value(internal, internal, internal, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geog_brin_inclusion_add_value(internal, internal, internal, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geog_brin_inclusion_add_value(internal, internal, internal, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geog_brin_inclusion_add_value(internal, internal, internal, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geog_brin_inclusion_add_value(internal, internal, internal, internal) TO soop;
GRANT ALL ON FUNCTION geog_brin_inclusion_add_value(internal, internal, internal, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geog_brin_inclusion_add_value(internal, internal, internal, internal) TO argo;
GRANT ALL ON FUNCTION geog_brin_inclusion_add_value(internal, internal, internal, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geog_brin_inclusion_add_value(internal, internal, internal, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geog_brin_inclusion_add_value(internal, internal, internal, internal) TO harvest_read_group;


--
-- Name: geography(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION geography(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography(bytea) TO soop;
GRANT ALL ON FUNCTION geography(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography(bytea) TO argo;
GRANT ALL ON FUNCTION geography(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION geography(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION geography(bytea) TO harvest_read_group;


--
-- Name: geography(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geography(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography(geometry) TO soop;
GRANT ALL ON FUNCTION geography(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography(geometry) TO argo;
GRANT ALL ON FUNCTION geography(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geography(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geography(geometry) TO harvest_read_group;


--
-- Name: geography(geography, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography(geography, integer, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography(geography, integer, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION geography(geography, integer, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography(geography, integer, boolean) TO soop;
GRANT ALL ON FUNCTION geography(geography, integer, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography(geography, integer, boolean) TO argo;
GRANT ALL ON FUNCTION geography(geography, integer, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION geography(geography, integer, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION geography(geography, integer, boolean) TO harvest_read_group;


--
-- Name: geography_cmp(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_cmp(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_cmp(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_cmp(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_cmp(geography, geography) TO soop;
GRANT ALL ON FUNCTION geography_cmp(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_cmp(geography, geography) TO argo;
GRANT ALL ON FUNCTION geography_cmp(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION geography_cmp(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_cmp(geography, geography) TO harvest_read_group;


--
-- Name: geography_distance_knn(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_distance_knn(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_distance_knn(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_distance_knn(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_distance_knn(geography, geography) TO soop;
GRANT ALL ON FUNCTION geography_distance_knn(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_distance_knn(geography, geography) TO argo;
GRANT ALL ON FUNCTION geography_distance_knn(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION geography_distance_knn(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_distance_knn(geography, geography) TO harvest_read_group;


--
-- Name: geography_eq(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_eq(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_eq(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_eq(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_eq(geography, geography) TO soop;
GRANT ALL ON FUNCTION geography_eq(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_eq(geography, geography) TO argo;
GRANT ALL ON FUNCTION geography_eq(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION geography_eq(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_eq(geography, geography) TO harvest_read_group;


--
-- Name: geography_ge(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_ge(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_ge(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_ge(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_ge(geography, geography) TO soop;
GRANT ALL ON FUNCTION geography_ge(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_ge(geography, geography) TO argo;
GRANT ALL ON FUNCTION geography_ge(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION geography_ge(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_ge(geography, geography) TO harvest_read_group;


--
-- Name: geography_gist_compress(internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_gist_compress(internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_gist_compress(internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_gist_compress(internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_gist_compress(internal) TO soop;
GRANT ALL ON FUNCTION geography_gist_compress(internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_gist_compress(internal) TO argo;
GRANT ALL ON FUNCTION geography_gist_compress(internal) TO aodn_dart;
GRANT ALL ON FUNCTION geography_gist_compress(internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_gist_compress(internal) TO harvest_read_group;


--
-- Name: geography_gist_consistent(internal, geography, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_gist_consistent(internal, geography, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_gist_consistent(internal, geography, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_gist_consistent(internal, geography, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_gist_consistent(internal, geography, integer) TO soop;
GRANT ALL ON FUNCTION geography_gist_consistent(internal, geography, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_gist_consistent(internal, geography, integer) TO argo;
GRANT ALL ON FUNCTION geography_gist_consistent(internal, geography, integer) TO aodn_dart;
GRANT ALL ON FUNCTION geography_gist_consistent(internal, geography, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_gist_consistent(internal, geography, integer) TO harvest_read_group;


--
-- Name: geography_gist_decompress(internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_gist_decompress(internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_gist_decompress(internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_gist_decompress(internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_gist_decompress(internal) TO soop;
GRANT ALL ON FUNCTION geography_gist_decompress(internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_gist_decompress(internal) TO argo;
GRANT ALL ON FUNCTION geography_gist_decompress(internal) TO aodn_dart;
GRANT ALL ON FUNCTION geography_gist_decompress(internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_gist_decompress(internal) TO harvest_read_group;


--
-- Name: geography_gist_distance(internal, geography, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_gist_distance(internal, geography, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_gist_distance(internal, geography, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_gist_distance(internal, geography, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_gist_distance(internal, geography, integer) TO soop;
GRANT ALL ON FUNCTION geography_gist_distance(internal, geography, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_gist_distance(internal, geography, integer) TO argo;
GRANT ALL ON FUNCTION geography_gist_distance(internal, geography, integer) TO aodn_dart;
GRANT ALL ON FUNCTION geography_gist_distance(internal, geography, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_gist_distance(internal, geography, integer) TO harvest_read_group;


--
-- Name: geography_gist_penalty(internal, internal, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_gist_penalty(internal, internal, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_gist_penalty(internal, internal, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_gist_penalty(internal, internal, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_gist_penalty(internal, internal, internal) TO soop;
GRANT ALL ON FUNCTION geography_gist_penalty(internal, internal, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_gist_penalty(internal, internal, internal) TO argo;
GRANT ALL ON FUNCTION geography_gist_penalty(internal, internal, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geography_gist_penalty(internal, internal, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_gist_penalty(internal, internal, internal) TO harvest_read_group;


--
-- Name: geography_gist_picksplit(internal, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_gist_picksplit(internal, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_gist_picksplit(internal, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_gist_picksplit(internal, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_gist_picksplit(internal, internal) TO soop;
GRANT ALL ON FUNCTION geography_gist_picksplit(internal, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_gist_picksplit(internal, internal) TO argo;
GRANT ALL ON FUNCTION geography_gist_picksplit(internal, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geography_gist_picksplit(internal, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_gist_picksplit(internal, internal) TO harvest_read_group;


--
-- Name: geography_gist_same(box2d, box2d, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_gist_same(box2d, box2d, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_gist_same(box2d, box2d, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_gist_same(box2d, box2d, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_gist_same(box2d, box2d, internal) TO soop;
GRANT ALL ON FUNCTION geography_gist_same(box2d, box2d, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_gist_same(box2d, box2d, internal) TO argo;
GRANT ALL ON FUNCTION geography_gist_same(box2d, box2d, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geography_gist_same(box2d, box2d, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_gist_same(box2d, box2d, internal) TO harvest_read_group;


--
-- Name: geography_gist_union(bytea, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_gist_union(bytea, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_gist_union(bytea, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_gist_union(bytea, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_gist_union(bytea, internal) TO soop;
GRANT ALL ON FUNCTION geography_gist_union(bytea, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_gist_union(bytea, internal) TO argo;
GRANT ALL ON FUNCTION geography_gist_union(bytea, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geography_gist_union(bytea, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_gist_union(bytea, internal) TO harvest_read_group;


--
-- Name: geography_gt(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_gt(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_gt(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_gt(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_gt(geography, geography) TO soop;
GRANT ALL ON FUNCTION geography_gt(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_gt(geography, geography) TO argo;
GRANT ALL ON FUNCTION geography_gt(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION geography_gt(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_gt(geography, geography) TO harvest_read_group;


--
-- Name: geography_le(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_le(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_le(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_le(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_le(geography, geography) TO soop;
GRANT ALL ON FUNCTION geography_le(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_le(geography, geography) TO argo;
GRANT ALL ON FUNCTION geography_le(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION geography_le(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_le(geography, geography) TO harvest_read_group;


--
-- Name: geography_lt(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_lt(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_lt(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_lt(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_lt(geography, geography) TO soop;
GRANT ALL ON FUNCTION geography_lt(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_lt(geography, geography) TO argo;
GRANT ALL ON FUNCTION geography_lt(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION geography_lt(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_lt(geography, geography) TO harvest_read_group;


--
-- Name: geography_overlaps(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geography_overlaps(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geography_overlaps(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION geography_overlaps(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geography_overlaps(geography, geography) TO soop;
GRANT ALL ON FUNCTION geography_overlaps(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geography_overlaps(geography, geography) TO argo;
GRANT ALL ON FUNCTION geography_overlaps(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION geography_overlaps(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION geography_overlaps(geography, geography) TO harvest_read_group;


--
-- Name: geom2d_brin_inclusion_add_value(internal, internal, internal, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geom2d_brin_inclusion_add_value(internal, internal, internal, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geom2d_brin_inclusion_add_value(internal, internal, internal, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geom2d_brin_inclusion_add_value(internal, internal, internal, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geom2d_brin_inclusion_add_value(internal, internal, internal, internal) TO soop;
GRANT ALL ON FUNCTION geom2d_brin_inclusion_add_value(internal, internal, internal, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geom2d_brin_inclusion_add_value(internal, internal, internal, internal) TO argo;
GRANT ALL ON FUNCTION geom2d_brin_inclusion_add_value(internal, internal, internal, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geom2d_brin_inclusion_add_value(internal, internal, internal, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geom2d_brin_inclusion_add_value(internal, internal, internal, internal) TO harvest_read_group;


--
-- Name: geom3d_brin_inclusion_add_value(internal, internal, internal, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geom3d_brin_inclusion_add_value(internal, internal, internal, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geom3d_brin_inclusion_add_value(internal, internal, internal, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geom3d_brin_inclusion_add_value(internal, internal, internal, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geom3d_brin_inclusion_add_value(internal, internal, internal, internal) TO soop;
GRANT ALL ON FUNCTION geom3d_brin_inclusion_add_value(internal, internal, internal, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geom3d_brin_inclusion_add_value(internal, internal, internal, internal) TO argo;
GRANT ALL ON FUNCTION geom3d_brin_inclusion_add_value(internal, internal, internal, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geom3d_brin_inclusion_add_value(internal, internal, internal, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geom3d_brin_inclusion_add_value(internal, internal, internal, internal) TO harvest_read_group;


--
-- Name: geom4d_brin_inclusion_add_value(internal, internal, internal, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geom4d_brin_inclusion_add_value(internal, internal, internal, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geom4d_brin_inclusion_add_value(internal, internal, internal, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geom4d_brin_inclusion_add_value(internal, internal, internal, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geom4d_brin_inclusion_add_value(internal, internal, internal, internal) TO soop;
GRANT ALL ON FUNCTION geom4d_brin_inclusion_add_value(internal, internal, internal, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geom4d_brin_inclusion_add_value(internal, internal, internal, internal) TO argo;
GRANT ALL ON FUNCTION geom4d_brin_inclusion_add_value(internal, internal, internal, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geom4d_brin_inclusion_add_value(internal, internal, internal, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geom4d_brin_inclusion_add_value(internal, internal, internal, internal) TO harvest_read_group;


--
-- Name: geometry(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry(bytea) TO soop;
GRANT ALL ON FUNCTION geometry(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry(bytea) TO argo;
GRANT ALL ON FUNCTION geometry(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION geometry(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry(bytea) TO harvest_read_group;


--
-- Name: geometry(path); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry(path) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry(path) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry(path) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry(path) TO soop;
GRANT ALL ON FUNCTION geometry(path) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry(path) TO argo;
GRANT ALL ON FUNCTION geometry(path) TO aodn_dart;
GRANT ALL ON FUNCTION geometry(path) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry(path) TO harvest_read_group;


--
-- Name: geometry(point); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry(point) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry(point) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry(point) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry(point) TO soop;
GRANT ALL ON FUNCTION geometry(point) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry(point) TO argo;
GRANT ALL ON FUNCTION geometry(point) TO aodn_dart;
GRANT ALL ON FUNCTION geometry(point) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry(point) TO harvest_read_group;


--
-- Name: geometry(polygon); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry(polygon) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry(polygon) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry(polygon) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry(polygon) TO soop;
GRANT ALL ON FUNCTION geometry(polygon) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry(polygon) TO argo;
GRANT ALL ON FUNCTION geometry(polygon) TO aodn_dart;
GRANT ALL ON FUNCTION geometry(polygon) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry(polygon) TO harvest_read_group;


--
-- Name: geometry(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry(text) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry(text) TO soop;
GRANT ALL ON FUNCTION geometry(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry(text) TO argo;
GRANT ALL ON FUNCTION geometry(text) TO aodn_dart;
GRANT ALL ON FUNCTION geometry(text) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry(text) TO harvest_read_group;


--
-- Name: geometry(box2d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry(box2d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry(box2d) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry(box2d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry(box2d) TO soop;
GRANT ALL ON FUNCTION geometry(box2d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry(box2d) TO argo;
GRANT ALL ON FUNCTION geometry(box2d) TO aodn_dart;
GRANT ALL ON FUNCTION geometry(box2d) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry(box2d) TO harvest_read_group;


--
-- Name: geometry(box3d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry(box3d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry(box3d) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry(box3d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry(box3d) TO soop;
GRANT ALL ON FUNCTION geometry(box3d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry(box3d) TO argo;
GRANT ALL ON FUNCTION geometry(box3d) TO aodn_dart;
GRANT ALL ON FUNCTION geometry(box3d) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry(box3d) TO harvest_read_group;


--
-- Name: geometry(geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry(geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry(geography) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry(geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry(geography) TO soop;
GRANT ALL ON FUNCTION geometry(geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry(geography) TO argo;
GRANT ALL ON FUNCTION geometry(geography) TO aodn_dart;
GRANT ALL ON FUNCTION geometry(geography) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry(geography) TO harvest_read_group;


--
-- Name: geometry(geometry, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry(geometry, integer, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry(geometry, integer, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry(geometry, integer, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry(geometry, integer, boolean) TO soop;
GRANT ALL ON FUNCTION geometry(geometry, integer, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry(geometry, integer, boolean) TO argo;
GRANT ALL ON FUNCTION geometry(geometry, integer, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION geometry(geometry, integer, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry(geometry, integer, boolean) TO harvest_read_group;


--
-- Name: geometry_above(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_above(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_above(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_above(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_above(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_above(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_above(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_above(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_above(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_above(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_below(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_below(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_below(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_below(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_below(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_below(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_below(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_below(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_below(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_below(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_cmp(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_cmp(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_cmp(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_cmp(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_cmp(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_cmp(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_cmp(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_cmp(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_cmp(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_cmp(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_contained_by_raster(geometry, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_contained_by_raster(geometry, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_contained_by_raster(geometry, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_contained_by_raster(geometry, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_contained_by_raster(geometry, raster) TO soop;
GRANT ALL ON FUNCTION geometry_contained_by_raster(geometry, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_contained_by_raster(geometry, raster) TO argo;
GRANT ALL ON FUNCTION geometry_contained_by_raster(geometry, raster) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_contained_by_raster(geometry, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_contained_by_raster(geometry, raster) TO harvest_read_group;


--
-- Name: geometry_contains(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_contains(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_contains(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_contains(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_contains(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_contains(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_contains(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_contains(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_contains(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_contains(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_distance_box(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_distance_box(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_distance_box(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_distance_box(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_distance_box(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_distance_box(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_distance_box(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_distance_box(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_distance_box(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_distance_box(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_distance_centroid(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_distance_centroid(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_distance_centroid(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_distance_centroid(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_distance_centroid(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_distance_centroid(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_distance_centroid(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_distance_centroid(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_distance_centroid(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_distance_centroid(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_distance_centroid_nd(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_distance_centroid_nd(geometry, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_distance_centroid_nd(geometry, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_distance_centroid_nd(geometry, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_distance_centroid_nd(geometry, geometry) TO soop;
GRANT ALL ON FUNCTION geometry_distance_centroid_nd(geometry, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_distance_centroid_nd(geometry, geometry) TO argo;
GRANT ALL ON FUNCTION geometry_distance_centroid_nd(geometry, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_distance_centroid_nd(geometry, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_distance_centroid_nd(geometry, geometry) TO harvest_read_group;


--
-- Name: geometry_distance_cpa(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_distance_cpa(geometry, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_distance_cpa(geometry, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_distance_cpa(geometry, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_distance_cpa(geometry, geometry) TO soop;
GRANT ALL ON FUNCTION geometry_distance_cpa(geometry, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_distance_cpa(geometry, geometry) TO argo;
GRANT ALL ON FUNCTION geometry_distance_cpa(geometry, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_distance_cpa(geometry, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_distance_cpa(geometry, geometry) TO harvest_read_group;


--
-- Name: geometry_eq(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_eq(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_eq(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_eq(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_eq(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_eq(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_eq(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_eq(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_eq(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_eq(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_ge(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_ge(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_ge(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_ge(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_ge(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_ge(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_ge(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_ge(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_ge(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_ge(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_gist_compress_2d(internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_compress_2d(internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_compress_2d(internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_compress_2d(internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_compress_2d(internal) TO soop;
GRANT ALL ON FUNCTION geometry_gist_compress_2d(internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_compress_2d(internal) TO argo;
GRANT ALL ON FUNCTION geometry_gist_compress_2d(internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_compress_2d(internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_compress_2d(internal) TO harvest_read_group;


--
-- Name: geometry_gist_compress_nd(internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_compress_nd(internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_compress_nd(internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_compress_nd(internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_compress_nd(internal) TO soop;
GRANT ALL ON FUNCTION geometry_gist_compress_nd(internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_compress_nd(internal) TO argo;
GRANT ALL ON FUNCTION geometry_gist_compress_nd(internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_compress_nd(internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_compress_nd(internal) TO harvest_read_group;


--
-- Name: geometry_gist_consistent_2d(internal, geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_consistent_2d(internal, geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_consistent_2d(internal, geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_consistent_2d(internal, geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_consistent_2d(internal, geometry, integer) TO soop;
GRANT ALL ON FUNCTION geometry_gist_consistent_2d(internal, geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_consistent_2d(internal, geometry, integer) TO argo;
GRANT ALL ON FUNCTION geometry_gist_consistent_2d(internal, geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_consistent_2d(internal, geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_consistent_2d(internal, geometry, integer) TO harvest_read_group;


--
-- Name: geometry_gist_consistent_nd(internal, geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_consistent_nd(internal, geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_consistent_nd(internal, geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_consistent_nd(internal, geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_consistent_nd(internal, geometry, integer) TO soop;
GRANT ALL ON FUNCTION geometry_gist_consistent_nd(internal, geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_consistent_nd(internal, geometry, integer) TO argo;
GRANT ALL ON FUNCTION geometry_gist_consistent_nd(internal, geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_consistent_nd(internal, geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_consistent_nd(internal, geometry, integer) TO harvest_read_group;


--
-- Name: geometry_gist_decompress_2d(internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_decompress_2d(internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_decompress_2d(internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_decompress_2d(internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_decompress_2d(internal) TO soop;
GRANT ALL ON FUNCTION geometry_gist_decompress_2d(internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_decompress_2d(internal) TO argo;
GRANT ALL ON FUNCTION geometry_gist_decompress_2d(internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_decompress_2d(internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_decompress_2d(internal) TO harvest_read_group;


--
-- Name: geometry_gist_decompress_nd(internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_decompress_nd(internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_decompress_nd(internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_decompress_nd(internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_decompress_nd(internal) TO soop;
GRANT ALL ON FUNCTION geometry_gist_decompress_nd(internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_decompress_nd(internal) TO argo;
GRANT ALL ON FUNCTION geometry_gist_decompress_nd(internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_decompress_nd(internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_decompress_nd(internal) TO harvest_read_group;


--
-- Name: geometry_gist_distance_2d(internal, geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_distance_2d(internal, geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_distance_2d(internal, geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_distance_2d(internal, geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_distance_2d(internal, geometry, integer) TO soop;
GRANT ALL ON FUNCTION geometry_gist_distance_2d(internal, geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_distance_2d(internal, geometry, integer) TO argo;
GRANT ALL ON FUNCTION geometry_gist_distance_2d(internal, geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_distance_2d(internal, geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_distance_2d(internal, geometry, integer) TO harvest_read_group;


--
-- Name: geometry_gist_distance_nd(internal, geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_distance_nd(internal, geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_distance_nd(internal, geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_distance_nd(internal, geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_distance_nd(internal, geometry, integer) TO soop;
GRANT ALL ON FUNCTION geometry_gist_distance_nd(internal, geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_distance_nd(internal, geometry, integer) TO argo;
GRANT ALL ON FUNCTION geometry_gist_distance_nd(internal, geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_distance_nd(internal, geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_distance_nd(internal, geometry, integer) TO harvest_read_group;


--
-- Name: geometry_gist_penalty_2d(internal, internal, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_penalty_2d(internal, internal, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_penalty_2d(internal, internal, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_penalty_2d(internal, internal, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_penalty_2d(internal, internal, internal) TO soop;
GRANT ALL ON FUNCTION geometry_gist_penalty_2d(internal, internal, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_penalty_2d(internal, internal, internal) TO argo;
GRANT ALL ON FUNCTION geometry_gist_penalty_2d(internal, internal, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_penalty_2d(internal, internal, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_penalty_2d(internal, internal, internal) TO harvest_read_group;


--
-- Name: geometry_gist_penalty_nd(internal, internal, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_penalty_nd(internal, internal, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_penalty_nd(internal, internal, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_penalty_nd(internal, internal, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_penalty_nd(internal, internal, internal) TO soop;
GRANT ALL ON FUNCTION geometry_gist_penalty_nd(internal, internal, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_penalty_nd(internal, internal, internal) TO argo;
GRANT ALL ON FUNCTION geometry_gist_penalty_nd(internal, internal, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_penalty_nd(internal, internal, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_penalty_nd(internal, internal, internal) TO harvest_read_group;


--
-- Name: geometry_gist_picksplit_2d(internal, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_picksplit_2d(internal, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_picksplit_2d(internal, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_picksplit_2d(internal, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_picksplit_2d(internal, internal) TO soop;
GRANT ALL ON FUNCTION geometry_gist_picksplit_2d(internal, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_picksplit_2d(internal, internal) TO argo;
GRANT ALL ON FUNCTION geometry_gist_picksplit_2d(internal, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_picksplit_2d(internal, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_picksplit_2d(internal, internal) TO harvest_read_group;


--
-- Name: geometry_gist_picksplit_nd(internal, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_picksplit_nd(internal, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_picksplit_nd(internal, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_picksplit_nd(internal, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_picksplit_nd(internal, internal) TO soop;
GRANT ALL ON FUNCTION geometry_gist_picksplit_nd(internal, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_picksplit_nd(internal, internal) TO argo;
GRANT ALL ON FUNCTION geometry_gist_picksplit_nd(internal, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_picksplit_nd(internal, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_picksplit_nd(internal, internal) TO harvest_read_group;


--
-- Name: geometry_gist_same_2d(geometry, geometry, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal) TO soop;
GRANT ALL ON FUNCTION geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal) TO argo;
GRANT ALL ON FUNCTION geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal) TO harvest_read_group;


--
-- Name: geometry_gist_same_nd(geometry, geometry, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_same_nd(geometry, geometry, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_same_nd(geometry, geometry, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_same_nd(geometry, geometry, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_same_nd(geometry, geometry, internal) TO soop;
GRANT ALL ON FUNCTION geometry_gist_same_nd(geometry, geometry, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_same_nd(geometry, geometry, internal) TO argo;
GRANT ALL ON FUNCTION geometry_gist_same_nd(geometry, geometry, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_same_nd(geometry, geometry, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_same_nd(geometry, geometry, internal) TO harvest_read_group;


--
-- Name: geometry_gist_union_2d(bytea, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_union_2d(bytea, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_union_2d(bytea, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_union_2d(bytea, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_union_2d(bytea, internal) TO soop;
GRANT ALL ON FUNCTION geometry_gist_union_2d(bytea, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_union_2d(bytea, internal) TO argo;
GRANT ALL ON FUNCTION geometry_gist_union_2d(bytea, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_union_2d(bytea, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_union_2d(bytea, internal) TO harvest_read_group;


--
-- Name: geometry_gist_union_nd(bytea, internal); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gist_union_nd(bytea, internal) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gist_union_nd(bytea, internal) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gist_union_nd(bytea, internal) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gist_union_nd(bytea, internal) TO soop;
GRANT ALL ON FUNCTION geometry_gist_union_nd(bytea, internal) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gist_union_nd(bytea, internal) TO argo;
GRANT ALL ON FUNCTION geometry_gist_union_nd(bytea, internal) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gist_union_nd(bytea, internal) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gist_union_nd(bytea, internal) TO harvest_read_group;


--
-- Name: geometry_gt(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_gt(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_gt(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_gt(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_gt(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_gt(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_gt(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_gt(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_gt(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_gt(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_le(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_le(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_le(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_le(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_le(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_le(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_le(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_le(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_le(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_le(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_left(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_left(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_left(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_left(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_left(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_left(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_left(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_left(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_left(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_left(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_lt(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_lt(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_lt(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_lt(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_lt(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_lt(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_lt(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_lt(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_lt(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_lt(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_overabove(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_overabove(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_overabove(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_overabove(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_overabove(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_overabove(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_overabove(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_overabove(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_overabove(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_overabove(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_overbelow(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_overbelow(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_overbelow(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_overbelow(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_overbelow(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_overbelow(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_overbelow(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_overbelow(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_overbelow(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_overbelow(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_overlaps(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_overlaps(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_overlaps(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_overlaps(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_overlaps(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_overlaps(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_overlaps(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_overlaps(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_overlaps(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_overlaps(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_overlaps_nd(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_overlaps_nd(geometry, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_overlaps_nd(geometry, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_overlaps_nd(geometry, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_overlaps_nd(geometry, geometry) TO soop;
GRANT ALL ON FUNCTION geometry_overlaps_nd(geometry, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_overlaps_nd(geometry, geometry) TO argo;
GRANT ALL ON FUNCTION geometry_overlaps_nd(geometry, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_overlaps_nd(geometry, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_overlaps_nd(geometry, geometry) TO harvest_read_group;


--
-- Name: geometry_overleft(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_overleft(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_overleft(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_overleft(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_overleft(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_overleft(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_overleft(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_overleft(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_overleft(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_overleft(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_overright(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_overright(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_overright(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_overright(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_overright(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_overright(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_overright(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_overright(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_overright(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_overright(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_raster_contain(geometry, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_raster_contain(geometry, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_raster_contain(geometry, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_raster_contain(geometry, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_raster_contain(geometry, raster) TO soop;
GRANT ALL ON FUNCTION geometry_raster_contain(geometry, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_raster_contain(geometry, raster) TO argo;
GRANT ALL ON FUNCTION geometry_raster_contain(geometry, raster) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_raster_contain(geometry, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_raster_contain(geometry, raster) TO harvest_read_group;


--
-- Name: geometry_raster_overlap(geometry, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_raster_overlap(geometry, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_raster_overlap(geometry, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_raster_overlap(geometry, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_raster_overlap(geometry, raster) TO soop;
GRANT ALL ON FUNCTION geometry_raster_overlap(geometry, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_raster_overlap(geometry, raster) TO argo;
GRANT ALL ON FUNCTION geometry_raster_overlap(geometry, raster) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_raster_overlap(geometry, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_raster_overlap(geometry, raster) TO harvest_read_group;


--
-- Name: geometry_right(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_right(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_right(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_right(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_right(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_right(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_right(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_right(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_right(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_right(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_same(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_same(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_same(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_same(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_same(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_same(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_same(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_same(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_same(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_same(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometry_within(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometry_within(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometry_within(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometry_within(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometry_within(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION geometry_within(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometry_within(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION geometry_within(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometry_within(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometry_within(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: geometrytype(geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometrytype(geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometrytype(geography) TO harvest_write_group;
GRANT ALL ON FUNCTION geometrytype(geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometrytype(geography) TO soop;
GRANT ALL ON FUNCTION geometrytype(geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometrytype(geography) TO argo;
GRANT ALL ON FUNCTION geometrytype(geography) TO aodn_dart;
GRANT ALL ON FUNCTION geometrytype(geography) TO anmn_metadata;
GRANT ALL ON FUNCTION geometrytype(geography) TO harvest_read_group;


--
-- Name: geometrytype(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geometrytype(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geometrytype(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION geometrytype(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geometrytype(geometry) TO soop;
GRANT ALL ON FUNCTION geometrytype(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geometrytype(geometry) TO argo;
GRANT ALL ON FUNCTION geometrytype(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION geometrytype(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION geometrytype(geometry) TO harvest_read_group;


--
-- Name: geomfromewkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geomfromewkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geomfromewkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION geomfromewkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geomfromewkb(bytea) TO soop;
GRANT ALL ON FUNCTION geomfromewkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geomfromewkb(bytea) TO argo;
GRANT ALL ON FUNCTION geomfromewkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION geomfromewkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION geomfromewkb(bytea) TO harvest_read_group;


--
-- Name: geomfromewkt(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geomfromewkt(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geomfromewkt(text) TO harvest_write_group;
GRANT ALL ON FUNCTION geomfromewkt(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geomfromewkt(text) TO soop;
GRANT ALL ON FUNCTION geomfromewkt(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geomfromewkt(text) TO argo;
GRANT ALL ON FUNCTION geomfromewkt(text) TO aodn_dart;
GRANT ALL ON FUNCTION geomfromewkt(text) TO anmn_metadata;
GRANT ALL ON FUNCTION geomfromewkt(text) TO harvest_read_group;


--
-- Name: geomfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geomfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geomfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION geomfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geomfromtext(text) TO soop;
GRANT ALL ON FUNCTION geomfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geomfromtext(text) TO argo;
GRANT ALL ON FUNCTION geomfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION geomfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION geomfromtext(text) TO harvest_read_group;


--
-- Name: geomfromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION geomfromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION geomfromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION geomfromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION geomfromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION geomfromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION geomfromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION geomfromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION geomfromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION geomfromtext(text, integer) TO harvest_read_group;


--
-- Name: get_proj4_from_srid(integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION get_proj4_from_srid(integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION get_proj4_from_srid(integer) TO harvest_write_group;
GRANT ALL ON FUNCTION get_proj4_from_srid(integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION get_proj4_from_srid(integer) TO soop;
GRANT ALL ON FUNCTION get_proj4_from_srid(integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION get_proj4_from_srid(integer) TO argo;
GRANT ALL ON FUNCTION get_proj4_from_srid(integer) TO aodn_dart;
GRANT ALL ON FUNCTION get_proj4_from_srid(integer) TO anmn_metadata;
GRANT ALL ON FUNCTION get_proj4_from_srid(integer) TO harvest_read_group;


--
-- Name: getendtoken(character, character, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION getendtoken(p_string character, p_regexp character, p_n integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION getendtoken(p_string character, p_regexp character, p_n integer) TO harvest_write_group;
GRANT ALL ON FUNCTION getendtoken(p_string character, p_regexp character, p_n integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION getendtoken(p_string character, p_regexp character, p_n integer) TO soop;
GRANT ALL ON FUNCTION getendtoken(p_string character, p_regexp character, p_n integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION getendtoken(p_string character, p_regexp character, p_n integer) TO argo;
GRANT ALL ON FUNCTION getendtoken(p_string character, p_regexp character, p_n integer) TO aodn_dart;
GRANT ALL ON FUNCTION getendtoken(p_string character, p_regexp character, p_n integer) TO anmn_metadata;
GRANT ALL ON FUNCTION getendtoken(p_string character, p_regexp character, p_n integer) TO harvest_read_group;


--
-- Name: gettransactionid(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION gettransactionid() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION gettransactionid() TO harvest_write_group;
GRANT ALL ON FUNCTION gettransactionid() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION gettransactionid() TO soop;
GRANT ALL ON FUNCTION gettransactionid() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION gettransactionid() TO argo;
GRANT ALL ON FUNCTION gettransactionid() TO aodn_dart;
GRANT ALL ON FUNCTION gettransactionid() TO anmn_metadata;
GRANT ALL ON FUNCTION gettransactionid() TO harvest_read_group;


--
-- Name: gserialized_gist_joinsel_2d(internal, oid, internal, smallint); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION gserialized_gist_joinsel_2d(internal, oid, internal, smallint) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_2d(internal, oid, internal, smallint) TO harvest_write_group;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_2d(internal, oid, internal, smallint) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_2d(internal, oid, internal, smallint) TO soop;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_2d(internal, oid, internal, smallint) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_2d(internal, oid, internal, smallint) TO argo;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_2d(internal, oid, internal, smallint) TO aodn_dart;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_2d(internal, oid, internal, smallint) TO anmn_metadata;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_2d(internal, oid, internal, smallint) TO harvest_read_group;


--
-- Name: gserialized_gist_joinsel_nd(internal, oid, internal, smallint); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION gserialized_gist_joinsel_nd(internal, oid, internal, smallint) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_nd(internal, oid, internal, smallint) TO harvest_write_group;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_nd(internal, oid, internal, smallint) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_nd(internal, oid, internal, smallint) TO soop;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_nd(internal, oid, internal, smallint) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_nd(internal, oid, internal, smallint) TO argo;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_nd(internal, oid, internal, smallint) TO aodn_dart;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_nd(internal, oid, internal, smallint) TO anmn_metadata;
GRANT ALL ON FUNCTION gserialized_gist_joinsel_nd(internal, oid, internal, smallint) TO harvest_read_group;


--
-- Name: gserialized_gist_sel_2d(internal, oid, internal, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION gserialized_gist_sel_2d(internal, oid, internal, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION gserialized_gist_sel_2d(internal, oid, internal, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION gserialized_gist_sel_2d(internal, oid, internal, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION gserialized_gist_sel_2d(internal, oid, internal, integer) TO soop;
GRANT ALL ON FUNCTION gserialized_gist_sel_2d(internal, oid, internal, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION gserialized_gist_sel_2d(internal, oid, internal, integer) TO argo;
GRANT ALL ON FUNCTION gserialized_gist_sel_2d(internal, oid, internal, integer) TO aodn_dart;
GRANT ALL ON FUNCTION gserialized_gist_sel_2d(internal, oid, internal, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION gserialized_gist_sel_2d(internal, oid, internal, integer) TO harvest_read_group;


--
-- Name: gserialized_gist_sel_nd(internal, oid, internal, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION gserialized_gist_sel_nd(internal, oid, internal, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION gserialized_gist_sel_nd(internal, oid, internal, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION gserialized_gist_sel_nd(internal, oid, internal, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION gserialized_gist_sel_nd(internal, oid, internal, integer) TO soop;
GRANT ALL ON FUNCTION gserialized_gist_sel_nd(internal, oid, internal, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION gserialized_gist_sel_nd(internal, oid, internal, integer) TO argo;
GRANT ALL ON FUNCTION gserialized_gist_sel_nd(internal, oid, internal, integer) TO aodn_dart;
GRANT ALL ON FUNCTION gserialized_gist_sel_nd(internal, oid, internal, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION gserialized_gist_sel_nd(internal, oid, internal, integer) TO harvest_read_group;


--
-- Name: is_contained_2d(box2df, box2df); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION is_contained_2d(box2df, box2df) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION is_contained_2d(box2df, box2df) TO harvest_write_group;
GRANT ALL ON FUNCTION is_contained_2d(box2df, box2df) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION is_contained_2d(box2df, box2df) TO soop;
GRANT ALL ON FUNCTION is_contained_2d(box2df, box2df) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION is_contained_2d(box2df, box2df) TO argo;
GRANT ALL ON FUNCTION is_contained_2d(box2df, box2df) TO aodn_dart;
GRANT ALL ON FUNCTION is_contained_2d(box2df, box2df) TO anmn_metadata;
GRANT ALL ON FUNCTION is_contained_2d(box2df, box2df) TO harvest_read_group;


--
-- Name: is_contained_2d(box2df, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION is_contained_2d(box2df, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION is_contained_2d(box2df, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION is_contained_2d(box2df, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION is_contained_2d(box2df, geometry) TO soop;
GRANT ALL ON FUNCTION is_contained_2d(box2df, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION is_contained_2d(box2df, geometry) TO argo;
GRANT ALL ON FUNCTION is_contained_2d(box2df, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION is_contained_2d(box2df, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION is_contained_2d(box2df, geometry) TO harvest_read_group;


--
-- Name: is_contained_2d(geometry, box2df); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION is_contained_2d(geometry, box2df) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION is_contained_2d(geometry, box2df) TO harvest_write_group;
GRANT ALL ON FUNCTION is_contained_2d(geometry, box2df) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION is_contained_2d(geometry, box2df) TO soop;
GRANT ALL ON FUNCTION is_contained_2d(geometry, box2df) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION is_contained_2d(geometry, box2df) TO argo;
GRANT ALL ON FUNCTION is_contained_2d(geometry, box2df) TO aodn_dart;
GRANT ALL ON FUNCTION is_contained_2d(geometry, box2df) TO anmn_metadata;
GRANT ALL ON FUNCTION is_contained_2d(geometry, box2df) TO harvest_read_group;


--
-- Name: is_valid_point(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION is_valid_point(point geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION is_valid_point(point geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION is_valid_point(point geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION is_valid_point(point geometry) TO soop;
GRANT ALL ON FUNCTION is_valid_point(point geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION is_valid_point(point geometry) TO argo;
GRANT ALL ON FUNCTION is_valid_point(point geometry) TO aodn_dart;
GRANT ALL ON FUNCTION is_valid_point(point geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION is_valid_point(point geometry) TO harvest_read_group;


--
-- Name: lockrow(text, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION lockrow(text, text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION lockrow(text, text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION lockrow(text, text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION lockrow(text, text, text) TO soop;
GRANT ALL ON FUNCTION lockrow(text, text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION lockrow(text, text, text) TO argo;
GRANT ALL ON FUNCTION lockrow(text, text, text) TO aodn_dart;
GRANT ALL ON FUNCTION lockrow(text, text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION lockrow(text, text, text) TO harvest_read_group;


--
-- Name: lockrow(text, text, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION lockrow(text, text, text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION lockrow(text, text, text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION lockrow(text, text, text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION lockrow(text, text, text, text) TO soop;
GRANT ALL ON FUNCTION lockrow(text, text, text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION lockrow(text, text, text, text) TO argo;
GRANT ALL ON FUNCTION lockrow(text, text, text, text) TO aodn_dart;
GRANT ALL ON FUNCTION lockrow(text, text, text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION lockrow(text, text, text, text) TO harvest_read_group;


--
-- Name: lockrow(text, text, text, timestamp without time zone); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION lockrow(text, text, text, timestamp without time zone) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION lockrow(text, text, text, timestamp without time zone) TO harvest_write_group;
GRANT ALL ON FUNCTION lockrow(text, text, text, timestamp without time zone) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION lockrow(text, text, text, timestamp without time zone) TO soop;
GRANT ALL ON FUNCTION lockrow(text, text, text, timestamp without time zone) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION lockrow(text, text, text, timestamp without time zone) TO argo;
GRANT ALL ON FUNCTION lockrow(text, text, text, timestamp without time zone) TO aodn_dart;
GRANT ALL ON FUNCTION lockrow(text, text, text, timestamp without time zone) TO anmn_metadata;
GRANT ALL ON FUNCTION lockrow(text, text, text, timestamp without time zone) TO harvest_read_group;


--
-- Name: lockrow(text, text, text, text, timestamp without time zone); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION lockrow(text, text, text, text, timestamp without time zone) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION lockrow(text, text, text, text, timestamp without time zone) TO harvest_write_group;
GRANT ALL ON FUNCTION lockrow(text, text, text, text, timestamp without time zone) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION lockrow(text, text, text, text, timestamp without time zone) TO soop;
GRANT ALL ON FUNCTION lockrow(text, text, text, text, timestamp without time zone) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION lockrow(text, text, text, text, timestamp without time zone) TO argo;
GRANT ALL ON FUNCTION lockrow(text, text, text, text, timestamp without time zone) TO aodn_dart;
GRANT ALL ON FUNCTION lockrow(text, text, text, text, timestamp without time zone) TO anmn_metadata;
GRANT ALL ON FUNCTION lockrow(text, text, text, text, timestamp without time zone) TO harvest_read_group;


--
-- Name: longtransactionsenabled(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION longtransactionsenabled() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION longtransactionsenabled() TO harvest_write_group;
GRANT ALL ON FUNCTION longtransactionsenabled() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION longtransactionsenabled() TO soop;
GRANT ALL ON FUNCTION longtransactionsenabled() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION longtransactionsenabled() TO argo;
GRANT ALL ON FUNCTION longtransactionsenabled() TO aodn_dart;
GRANT ALL ON FUNCTION longtransactionsenabled() TO anmn_metadata;
GRANT ALL ON FUNCTION longtransactionsenabled() TO harvest_read_group;


--
-- Name: make_line_crossing_antimeridian(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION make_line_crossing_antimeridian(pointa geometry, pointb geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION make_line_crossing_antimeridian(pointa geometry, pointb geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION make_line_crossing_antimeridian(pointa geometry, pointb geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION make_line_crossing_antimeridian(pointa geometry, pointb geometry) TO soop;
GRANT ALL ON FUNCTION make_line_crossing_antimeridian(pointa geometry, pointb geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION make_line_crossing_antimeridian(pointa geometry, pointb geometry) TO argo;
GRANT ALL ON FUNCTION make_line_crossing_antimeridian(pointa geometry, pointb geometry) TO aodn_dart;
GRANT ALL ON FUNCTION make_line_crossing_antimeridian(pointa geometry, pointb geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION make_line_crossing_antimeridian(pointa geometry, pointb geometry) TO harvest_read_group;


--
-- Name: make_point_or_shortest_line(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION make_point_or_shortest_line(pointa geometry, pointb geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION make_point_or_shortest_line(pointa geometry, pointb geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION make_point_or_shortest_line(pointa geometry, pointb geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION make_point_or_shortest_line(pointa geometry, pointb geometry) TO soop;
GRANT ALL ON FUNCTION make_point_or_shortest_line(pointa geometry, pointb geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION make_point_or_shortest_line(pointa geometry, pointb geometry) TO argo;
GRANT ALL ON FUNCTION make_point_or_shortest_line(pointa geometry, pointb geometry) TO aodn_dart;
GRANT ALL ON FUNCTION make_point_or_shortest_line(pointa geometry, pointb geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION make_point_or_shortest_line(pointa geometry, pointb geometry) TO harvest_read_group;


--
-- Name: make_shortest_line(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION make_shortest_line(pointa geometry, pointb geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION make_shortest_line(pointa geometry, pointb geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION make_shortest_line(pointa geometry, pointb geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION make_shortest_line(pointa geometry, pointb geometry) TO soop;
GRANT ALL ON FUNCTION make_shortest_line(pointa geometry, pointb geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION make_shortest_line(pointa geometry, pointb geometry) TO argo;
GRANT ALL ON FUNCTION make_shortest_line(pointa geometry, pointb geometry) TO aodn_dart;
GRANT ALL ON FUNCTION make_shortest_line(pointa geometry, pointb geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION make_shortest_line(pointa geometry, pointb geometry) TO harvest_read_group;


--
-- Name: make_trajectory(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION make_trajectory(accum geometry, point geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION make_trajectory(accum geometry, point geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION make_trajectory(accum geometry, point geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION make_trajectory(accum geometry, point geometry) TO soop;
GRANT ALL ON FUNCTION make_trajectory(accum geometry, point geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION make_trajectory(accum geometry, point geometry) TO argo;
GRANT ALL ON FUNCTION make_trajectory(accum geometry, point geometry) TO aodn_dart;
GRANT ALL ON FUNCTION make_trajectory(accum geometry, point geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION make_trajectory(accum geometry, point geometry) TO harvest_read_group;


--
-- Name: makepoint(double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION makepoint(double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION makepoint(double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION makepoint(double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION makepoint(double precision, double precision) TO soop;
GRANT ALL ON FUNCTION makepoint(double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION makepoint(double precision, double precision) TO argo;
GRANT ALL ON FUNCTION makepoint(double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION makepoint(double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION makepoint(double precision, double precision) TO harvest_read_group;


--
-- Name: makepoint(double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: makepoint(double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION makepoint(double precision, double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: overlaps_2d(box2df, box2df); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION overlaps_2d(box2df, box2df) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION overlaps_2d(box2df, box2df) TO harvest_write_group;
GRANT ALL ON FUNCTION overlaps_2d(box2df, box2df) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION overlaps_2d(box2df, box2df) TO soop;
GRANT ALL ON FUNCTION overlaps_2d(box2df, box2df) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION overlaps_2d(box2df, box2df) TO argo;
GRANT ALL ON FUNCTION overlaps_2d(box2df, box2df) TO aodn_dart;
GRANT ALL ON FUNCTION overlaps_2d(box2df, box2df) TO anmn_metadata;
GRANT ALL ON FUNCTION overlaps_2d(box2df, box2df) TO harvest_read_group;


--
-- Name: overlaps_2d(box2df, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION overlaps_2d(box2df, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION overlaps_2d(box2df, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION overlaps_2d(box2df, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION overlaps_2d(box2df, geometry) TO soop;
GRANT ALL ON FUNCTION overlaps_2d(box2df, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION overlaps_2d(box2df, geometry) TO argo;
GRANT ALL ON FUNCTION overlaps_2d(box2df, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION overlaps_2d(box2df, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION overlaps_2d(box2df, geometry) TO harvest_read_group;


--
-- Name: overlaps_2d(geometry, box2df); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION overlaps_2d(geometry, box2df) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION overlaps_2d(geometry, box2df) TO harvest_write_group;
GRANT ALL ON FUNCTION overlaps_2d(geometry, box2df) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION overlaps_2d(geometry, box2df) TO soop;
GRANT ALL ON FUNCTION overlaps_2d(geometry, box2df) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION overlaps_2d(geometry, box2df) TO argo;
GRANT ALL ON FUNCTION overlaps_2d(geometry, box2df) TO aodn_dart;
GRANT ALL ON FUNCTION overlaps_2d(geometry, box2df) TO anmn_metadata;
GRANT ALL ON FUNCTION overlaps_2d(geometry, box2df) TO harvest_read_group;


--
-- Name: overlaps_geog(geography, gidx); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION overlaps_geog(geography, gidx) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION overlaps_geog(geography, gidx) TO harvest_write_group;
GRANT ALL ON FUNCTION overlaps_geog(geography, gidx) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION overlaps_geog(geography, gidx) TO soop;
GRANT ALL ON FUNCTION overlaps_geog(geography, gidx) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION overlaps_geog(geography, gidx) TO argo;
GRANT ALL ON FUNCTION overlaps_geog(geography, gidx) TO aodn_dart;
GRANT ALL ON FUNCTION overlaps_geog(geography, gidx) TO anmn_metadata;
GRANT ALL ON FUNCTION overlaps_geog(geography, gidx) TO harvest_read_group;


--
-- Name: overlaps_geog(gidx, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION overlaps_geog(gidx, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION overlaps_geog(gidx, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION overlaps_geog(gidx, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION overlaps_geog(gidx, geography) TO soop;
GRANT ALL ON FUNCTION overlaps_geog(gidx, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION overlaps_geog(gidx, geography) TO argo;
GRANT ALL ON FUNCTION overlaps_geog(gidx, geography) TO aodn_dart;
GRANT ALL ON FUNCTION overlaps_geog(gidx, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION overlaps_geog(gidx, geography) TO harvest_read_group;


--
-- Name: overlaps_geog(gidx, gidx); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION overlaps_geog(gidx, gidx) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION overlaps_geog(gidx, gidx) TO harvest_write_group;
GRANT ALL ON FUNCTION overlaps_geog(gidx, gidx) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION overlaps_geog(gidx, gidx) TO soop;
GRANT ALL ON FUNCTION overlaps_geog(gidx, gidx) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION overlaps_geog(gidx, gidx) TO argo;
GRANT ALL ON FUNCTION overlaps_geog(gidx, gidx) TO aodn_dart;
GRANT ALL ON FUNCTION overlaps_geog(gidx, gidx) TO anmn_metadata;
GRANT ALL ON FUNCTION overlaps_geog(gidx, gidx) TO harvest_read_group;


--
-- Name: overlaps_nd(geometry, gidx); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION overlaps_nd(geometry, gidx) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION overlaps_nd(geometry, gidx) TO harvest_write_group;
GRANT ALL ON FUNCTION overlaps_nd(geometry, gidx) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION overlaps_nd(geometry, gidx) TO soop;
GRANT ALL ON FUNCTION overlaps_nd(geometry, gidx) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION overlaps_nd(geometry, gidx) TO argo;
GRANT ALL ON FUNCTION overlaps_nd(geometry, gidx) TO aodn_dart;
GRANT ALL ON FUNCTION overlaps_nd(geometry, gidx) TO anmn_metadata;
GRANT ALL ON FUNCTION overlaps_nd(geometry, gidx) TO harvest_read_group;


--
-- Name: overlaps_nd(gidx, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION overlaps_nd(gidx, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION overlaps_nd(gidx, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION overlaps_nd(gidx, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION overlaps_nd(gidx, geometry) TO soop;
GRANT ALL ON FUNCTION overlaps_nd(gidx, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION overlaps_nd(gidx, geometry) TO argo;
GRANT ALL ON FUNCTION overlaps_nd(gidx, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION overlaps_nd(gidx, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION overlaps_nd(gidx, geometry) TO harvest_read_group;


--
-- Name: overlaps_nd(gidx, gidx); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION overlaps_nd(gidx, gidx) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION overlaps_nd(gidx, gidx) TO harvest_write_group;
GRANT ALL ON FUNCTION overlaps_nd(gidx, gidx) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION overlaps_nd(gidx, gidx) TO soop;
GRANT ALL ON FUNCTION overlaps_nd(gidx, gidx) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION overlaps_nd(gidx, gidx) TO argo;
GRANT ALL ON FUNCTION overlaps_nd(gidx, gidx) TO aodn_dart;
GRANT ALL ON FUNCTION overlaps_nd(gidx, gidx) TO anmn_metadata;
GRANT ALL ON FUNCTION overlaps_nd(gidx, gidx) TO harvest_read_group;


--
-- Name: path(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION path(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION path(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION path(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION path(geometry) TO soop;
GRANT ALL ON FUNCTION path(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION path(geometry) TO argo;
GRANT ALL ON FUNCTION path(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION path(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION path(geometry) TO harvest_read_group;


--
-- Name: pgis_geometry_accum_finalfn(pgis_abs); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION pgis_geometry_accum_finalfn(pgis_abs) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION pgis_geometry_accum_finalfn(pgis_abs) TO harvest_write_group;
GRANT ALL ON FUNCTION pgis_geometry_accum_finalfn(pgis_abs) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION pgis_geometry_accum_finalfn(pgis_abs) TO soop;
GRANT ALL ON FUNCTION pgis_geometry_accum_finalfn(pgis_abs) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION pgis_geometry_accum_finalfn(pgis_abs) TO argo;
GRANT ALL ON FUNCTION pgis_geometry_accum_finalfn(pgis_abs) TO aodn_dart;
GRANT ALL ON FUNCTION pgis_geometry_accum_finalfn(pgis_abs) TO anmn_metadata;
GRANT ALL ON FUNCTION pgis_geometry_accum_finalfn(pgis_abs) TO harvest_read_group;


--
-- Name: pgis_geometry_accum_transfn(pgis_abs, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry) TO soop;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry) TO argo;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry) TO harvest_read_group;


--
-- Name: pgis_geometry_accum_transfn(pgis_abs, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision) TO soop;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision) TO argo;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision) TO harvest_read_group;


--
-- Name: pgis_geometry_accum_transfn(pgis_abs, geometry, double precision, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision, integer) TO soop;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision, integer) TO argo;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision, integer) TO aodn_dart;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION pgis_geometry_accum_transfn(pgis_abs, geometry, double precision, integer) TO harvest_read_group;


--
-- Name: pgis_geometry_clusterintersecting_finalfn(pgis_abs); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION pgis_geometry_clusterintersecting_finalfn(pgis_abs) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION pgis_geometry_clusterintersecting_finalfn(pgis_abs) TO harvest_write_group;
GRANT ALL ON FUNCTION pgis_geometry_clusterintersecting_finalfn(pgis_abs) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION pgis_geometry_clusterintersecting_finalfn(pgis_abs) TO soop;
GRANT ALL ON FUNCTION pgis_geometry_clusterintersecting_finalfn(pgis_abs) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION pgis_geometry_clusterintersecting_finalfn(pgis_abs) TO argo;
GRANT ALL ON FUNCTION pgis_geometry_clusterintersecting_finalfn(pgis_abs) TO aodn_dart;
GRANT ALL ON FUNCTION pgis_geometry_clusterintersecting_finalfn(pgis_abs) TO anmn_metadata;
GRANT ALL ON FUNCTION pgis_geometry_clusterintersecting_finalfn(pgis_abs) TO harvest_read_group;


--
-- Name: pgis_geometry_clusterwithin_finalfn(pgis_abs); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION pgis_geometry_clusterwithin_finalfn(pgis_abs) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION pgis_geometry_clusterwithin_finalfn(pgis_abs) TO harvest_write_group;
GRANT ALL ON FUNCTION pgis_geometry_clusterwithin_finalfn(pgis_abs) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION pgis_geometry_clusterwithin_finalfn(pgis_abs) TO soop;
GRANT ALL ON FUNCTION pgis_geometry_clusterwithin_finalfn(pgis_abs) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION pgis_geometry_clusterwithin_finalfn(pgis_abs) TO argo;
GRANT ALL ON FUNCTION pgis_geometry_clusterwithin_finalfn(pgis_abs) TO aodn_dart;
GRANT ALL ON FUNCTION pgis_geometry_clusterwithin_finalfn(pgis_abs) TO anmn_metadata;
GRANT ALL ON FUNCTION pgis_geometry_clusterwithin_finalfn(pgis_abs) TO harvest_read_group;


--
-- Name: pgis_geometry_collect_finalfn(pgis_abs); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION pgis_geometry_collect_finalfn(pgis_abs) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION pgis_geometry_collect_finalfn(pgis_abs) TO harvest_write_group;
GRANT ALL ON FUNCTION pgis_geometry_collect_finalfn(pgis_abs) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION pgis_geometry_collect_finalfn(pgis_abs) TO soop;
GRANT ALL ON FUNCTION pgis_geometry_collect_finalfn(pgis_abs) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION pgis_geometry_collect_finalfn(pgis_abs) TO argo;
GRANT ALL ON FUNCTION pgis_geometry_collect_finalfn(pgis_abs) TO aodn_dart;
GRANT ALL ON FUNCTION pgis_geometry_collect_finalfn(pgis_abs) TO anmn_metadata;
GRANT ALL ON FUNCTION pgis_geometry_collect_finalfn(pgis_abs) TO harvest_read_group;


--
-- Name: pgis_geometry_makeline_finalfn(pgis_abs); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION pgis_geometry_makeline_finalfn(pgis_abs) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION pgis_geometry_makeline_finalfn(pgis_abs) TO harvest_write_group;
GRANT ALL ON FUNCTION pgis_geometry_makeline_finalfn(pgis_abs) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION pgis_geometry_makeline_finalfn(pgis_abs) TO soop;
GRANT ALL ON FUNCTION pgis_geometry_makeline_finalfn(pgis_abs) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION pgis_geometry_makeline_finalfn(pgis_abs) TO argo;
GRANT ALL ON FUNCTION pgis_geometry_makeline_finalfn(pgis_abs) TO aodn_dart;
GRANT ALL ON FUNCTION pgis_geometry_makeline_finalfn(pgis_abs) TO anmn_metadata;
GRANT ALL ON FUNCTION pgis_geometry_makeline_finalfn(pgis_abs) TO harvest_read_group;


--
-- Name: pgis_geometry_polygonize_finalfn(pgis_abs); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION pgis_geometry_polygonize_finalfn(pgis_abs) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION pgis_geometry_polygonize_finalfn(pgis_abs) TO harvest_write_group;
GRANT ALL ON FUNCTION pgis_geometry_polygonize_finalfn(pgis_abs) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION pgis_geometry_polygonize_finalfn(pgis_abs) TO soop;
GRANT ALL ON FUNCTION pgis_geometry_polygonize_finalfn(pgis_abs) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION pgis_geometry_polygonize_finalfn(pgis_abs) TO argo;
GRANT ALL ON FUNCTION pgis_geometry_polygonize_finalfn(pgis_abs) TO aodn_dart;
GRANT ALL ON FUNCTION pgis_geometry_polygonize_finalfn(pgis_abs) TO anmn_metadata;
GRANT ALL ON FUNCTION pgis_geometry_polygonize_finalfn(pgis_abs) TO harvest_read_group;


--
-- Name: pgis_geometry_union_finalfn(pgis_abs); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION pgis_geometry_union_finalfn(pgis_abs) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION pgis_geometry_union_finalfn(pgis_abs) TO harvest_write_group;
GRANT ALL ON FUNCTION pgis_geometry_union_finalfn(pgis_abs) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION pgis_geometry_union_finalfn(pgis_abs) TO soop;
GRANT ALL ON FUNCTION pgis_geometry_union_finalfn(pgis_abs) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION pgis_geometry_union_finalfn(pgis_abs) TO argo;
GRANT ALL ON FUNCTION pgis_geometry_union_finalfn(pgis_abs) TO aodn_dart;
GRANT ALL ON FUNCTION pgis_geometry_union_finalfn(pgis_abs) TO anmn_metadata;
GRANT ALL ON FUNCTION pgis_geometry_union_finalfn(pgis_abs) TO harvest_read_group;


--
-- Name: point(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION point(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION point(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION point(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION point(geometry) TO soop;
GRANT ALL ON FUNCTION point(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION point(geometry) TO argo;
GRANT ALL ON FUNCTION point(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION point(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION point(geometry) TO harvest_read_group;


--
-- Name: polygon(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION polygon(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION polygon(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION polygon(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION polygon(geometry) TO soop;
GRANT ALL ON FUNCTION polygon(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION polygon(geometry) TO argo;
GRANT ALL ON FUNCTION polygon(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION polygon(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION polygon(geometry) TO harvest_read_group;


--
-- Name: populate_geometry_columns(boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION populate_geometry_columns(use_typmod boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION populate_geometry_columns(use_typmod boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION populate_geometry_columns(use_typmod boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION populate_geometry_columns(use_typmod boolean) TO soop;
GRANT ALL ON FUNCTION populate_geometry_columns(use_typmod boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION populate_geometry_columns(use_typmod boolean) TO argo;
GRANT ALL ON FUNCTION populate_geometry_columns(use_typmod boolean) TO aodn_dart;
GRANT ALL ON FUNCTION populate_geometry_columns(use_typmod boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION populate_geometry_columns(use_typmod boolean) TO harvest_read_group;


--
-- Name: populate_geometry_columns(oid, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION populate_geometry_columns(tbl_oid oid, use_typmod boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION populate_geometry_columns(tbl_oid oid, use_typmod boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION populate_geometry_columns(tbl_oid oid, use_typmod boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION populate_geometry_columns(tbl_oid oid, use_typmod boolean) TO soop;
GRANT ALL ON FUNCTION populate_geometry_columns(tbl_oid oid, use_typmod boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION populate_geometry_columns(tbl_oid oid, use_typmod boolean) TO argo;
GRANT ALL ON FUNCTION populate_geometry_columns(tbl_oid oid, use_typmod boolean) TO aodn_dart;
GRANT ALL ON FUNCTION populate_geometry_columns(tbl_oid oid, use_typmod boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION populate_geometry_columns(tbl_oid oid, use_typmod boolean) TO harvest_read_group;


--
-- Name: postgis_addbbox(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_addbbox(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_addbbox(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_addbbox(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_addbbox(geometry) TO soop;
GRANT ALL ON FUNCTION postgis_addbbox(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_addbbox(geometry) TO argo;
GRANT ALL ON FUNCTION postgis_addbbox(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_addbbox(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_addbbox(geometry) TO harvest_read_group;


--
-- Name: postgis_cache_bbox(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_cache_bbox() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_cache_bbox() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_cache_bbox() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_cache_bbox() TO soop;
GRANT ALL ON FUNCTION postgis_cache_bbox() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_cache_bbox() TO argo;
GRANT ALL ON FUNCTION postgis_cache_bbox() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_cache_bbox() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_cache_bbox() TO harvest_read_group;


--
-- Name: postgis_constraint_dims(text, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text) TO soop;
GRANT ALL ON FUNCTION postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text) TO argo;
GRANT ALL ON FUNCTION postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text) TO harvest_read_group;


--
-- Name: postgis_constraint_srid(text, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text) TO soop;
GRANT ALL ON FUNCTION postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text) TO argo;
GRANT ALL ON FUNCTION postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text) TO harvest_read_group;


--
-- Name: postgis_constraint_type(text, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_constraint_type(geomschema text, geomtable text, geomcolumn text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_constraint_type(geomschema text, geomtable text, geomcolumn text) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_constraint_type(geomschema text, geomtable text, geomcolumn text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_constraint_type(geomschema text, geomtable text, geomcolumn text) TO soop;
GRANT ALL ON FUNCTION postgis_constraint_type(geomschema text, geomtable text, geomcolumn text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_constraint_type(geomschema text, geomtable text, geomcolumn text) TO argo;
GRANT ALL ON FUNCTION postgis_constraint_type(geomschema text, geomtable text, geomcolumn text) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_constraint_type(geomschema text, geomtable text, geomcolumn text) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_constraint_type(geomschema text, geomtable text, geomcolumn text) TO harvest_read_group;


--
-- Name: postgis_dropbbox(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_dropbbox(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_dropbbox(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_dropbbox(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_dropbbox(geometry) TO soop;
GRANT ALL ON FUNCTION postgis_dropbbox(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_dropbbox(geometry) TO argo;
GRANT ALL ON FUNCTION postgis_dropbbox(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_dropbbox(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_dropbbox(geometry) TO harvest_read_group;


--
-- Name: postgis_full_version(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_full_version() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_full_version() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_full_version() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_full_version() TO soop;
GRANT ALL ON FUNCTION postgis_full_version() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_full_version() TO argo;
GRANT ALL ON FUNCTION postgis_full_version() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_full_version() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_full_version() TO harvest_read_group;


--
-- Name: postgis_gdal_version(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_gdal_version() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_gdal_version() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_gdal_version() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_gdal_version() TO soop;
GRANT ALL ON FUNCTION postgis_gdal_version() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_gdal_version() TO argo;
GRANT ALL ON FUNCTION postgis_gdal_version() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_gdal_version() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_gdal_version() TO harvest_read_group;


--
-- Name: postgis_geos_version(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_geos_version() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_geos_version() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_geos_version() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_geos_version() TO soop;
GRANT ALL ON FUNCTION postgis_geos_version() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_geos_version() TO argo;
GRANT ALL ON FUNCTION postgis_geos_version() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_geos_version() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_geos_version() TO harvest_read_group;


--
-- Name: postgis_getbbox(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_getbbox(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_getbbox(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_getbbox(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_getbbox(geometry) TO soop;
GRANT ALL ON FUNCTION postgis_getbbox(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_getbbox(geometry) TO argo;
GRANT ALL ON FUNCTION postgis_getbbox(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_getbbox(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_getbbox(geometry) TO harvest_read_group;


--
-- Name: postgis_hasbbox(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_hasbbox(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_hasbbox(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_hasbbox(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_hasbbox(geometry) TO soop;
GRANT ALL ON FUNCTION postgis_hasbbox(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_hasbbox(geometry) TO argo;
GRANT ALL ON FUNCTION postgis_hasbbox(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_hasbbox(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_hasbbox(geometry) TO harvest_read_group;


--
-- Name: postgis_lib_build_date(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_lib_build_date() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_lib_build_date() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_lib_build_date() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_lib_build_date() TO soop;
GRANT ALL ON FUNCTION postgis_lib_build_date() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_lib_build_date() TO argo;
GRANT ALL ON FUNCTION postgis_lib_build_date() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_lib_build_date() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_lib_build_date() TO harvest_read_group;


--
-- Name: postgis_lib_version(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_lib_version() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_lib_version() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_lib_version() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_lib_version() TO soop;
GRANT ALL ON FUNCTION postgis_lib_version() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_lib_version() TO argo;
GRANT ALL ON FUNCTION postgis_lib_version() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_lib_version() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_lib_version() TO harvest_read_group;


--
-- Name: postgis_libjson_version(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_libjson_version() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_libjson_version() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_libjson_version() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_libjson_version() TO soop;
GRANT ALL ON FUNCTION postgis_libjson_version() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_libjson_version() TO argo;
GRANT ALL ON FUNCTION postgis_libjson_version() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_libjson_version() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_libjson_version() TO harvest_read_group;


--
-- Name: postgis_liblwgeom_version(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_liblwgeom_version() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_liblwgeom_version() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_liblwgeom_version() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_liblwgeom_version() TO soop;
GRANT ALL ON FUNCTION postgis_liblwgeom_version() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_liblwgeom_version() TO argo;
GRANT ALL ON FUNCTION postgis_liblwgeom_version() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_liblwgeom_version() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_liblwgeom_version() TO harvest_read_group;


--
-- Name: postgis_libxml_version(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_libxml_version() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_libxml_version() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_libxml_version() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_libxml_version() TO soop;
GRANT ALL ON FUNCTION postgis_libxml_version() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_libxml_version() TO argo;
GRANT ALL ON FUNCTION postgis_libxml_version() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_libxml_version() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_libxml_version() TO harvest_read_group;


--
-- Name: postgis_noop(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_noop(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_noop(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_noop(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_noop(geometry) TO soop;
GRANT ALL ON FUNCTION postgis_noop(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_noop(geometry) TO argo;
GRANT ALL ON FUNCTION postgis_noop(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_noop(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_noop(geometry) TO harvest_read_group;


--
-- Name: postgis_noop(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_noop(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_noop(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_noop(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_noop(raster) TO soop;
GRANT ALL ON FUNCTION postgis_noop(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_noop(raster) TO argo;
GRANT ALL ON FUNCTION postgis_noop(raster) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_noop(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_noop(raster) TO harvest_read_group;


--
-- Name: postgis_proj_version(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_proj_version() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_proj_version() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_proj_version() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_proj_version() TO soop;
GRANT ALL ON FUNCTION postgis_proj_version() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_proj_version() TO argo;
GRANT ALL ON FUNCTION postgis_proj_version() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_proj_version() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_proj_version() TO harvest_read_group;


--
-- Name: postgis_raster_lib_build_date(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_raster_lib_build_date() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_raster_lib_build_date() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_raster_lib_build_date() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_raster_lib_build_date() TO soop;
GRANT ALL ON FUNCTION postgis_raster_lib_build_date() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_raster_lib_build_date() TO argo;
GRANT ALL ON FUNCTION postgis_raster_lib_build_date() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_raster_lib_build_date() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_raster_lib_build_date() TO harvest_read_group;


--
-- Name: postgis_raster_lib_version(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_raster_lib_version() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_raster_lib_version() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_raster_lib_version() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_raster_lib_version() TO soop;
GRANT ALL ON FUNCTION postgis_raster_lib_version() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_raster_lib_version() TO argo;
GRANT ALL ON FUNCTION postgis_raster_lib_version() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_raster_lib_version() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_raster_lib_version() TO harvest_read_group;


--
-- Name: postgis_raster_scripts_installed(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_raster_scripts_installed() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_raster_scripts_installed() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_raster_scripts_installed() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_raster_scripts_installed() TO soop;
GRANT ALL ON FUNCTION postgis_raster_scripts_installed() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_raster_scripts_installed() TO argo;
GRANT ALL ON FUNCTION postgis_raster_scripts_installed() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_raster_scripts_installed() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_raster_scripts_installed() TO harvest_read_group;


--
-- Name: postgis_scripts_build_date(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_scripts_build_date() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_scripts_build_date() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_scripts_build_date() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_scripts_build_date() TO soop;
GRANT ALL ON FUNCTION postgis_scripts_build_date() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_scripts_build_date() TO argo;
GRANT ALL ON FUNCTION postgis_scripts_build_date() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_scripts_build_date() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_scripts_build_date() TO harvest_read_group;


--
-- Name: postgis_scripts_installed(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_scripts_installed() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_scripts_installed() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_scripts_installed() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_scripts_installed() TO soop;
GRANT ALL ON FUNCTION postgis_scripts_installed() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_scripts_installed() TO argo;
GRANT ALL ON FUNCTION postgis_scripts_installed() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_scripts_installed() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_scripts_installed() TO harvest_read_group;


--
-- Name: postgis_scripts_released(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_scripts_released() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_scripts_released() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_scripts_released() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_scripts_released() TO soop;
GRANT ALL ON FUNCTION postgis_scripts_released() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_scripts_released() TO argo;
GRANT ALL ON FUNCTION postgis_scripts_released() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_scripts_released() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_scripts_released() TO harvest_read_group;


--
-- Name: postgis_svn_version(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_svn_version() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_svn_version() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_svn_version() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_svn_version() TO soop;
GRANT ALL ON FUNCTION postgis_svn_version() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_svn_version() TO argo;
GRANT ALL ON FUNCTION postgis_svn_version() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_svn_version() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_svn_version() TO harvest_read_group;


--
-- Name: postgis_transform_geometry(geometry, text, text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_transform_geometry(geometry, text, text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_transform_geometry(geometry, text, text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_transform_geometry(geometry, text, text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_transform_geometry(geometry, text, text, integer) TO soop;
GRANT ALL ON FUNCTION postgis_transform_geometry(geometry, text, text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_transform_geometry(geometry, text, text, integer) TO argo;
GRANT ALL ON FUNCTION postgis_transform_geometry(geometry, text, text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_transform_geometry(geometry, text, text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_transform_geometry(geometry, text, text, integer) TO harvest_read_group;


--
-- Name: postgis_type_name(character varying, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean) TO soop;
GRANT ALL ON FUNCTION postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean) TO argo;
GRANT ALL ON FUNCTION postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean) TO harvest_read_group;


--
-- Name: postgis_typmod_dims(integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_typmod_dims(integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_typmod_dims(integer) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_typmod_dims(integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_typmod_dims(integer) TO soop;
GRANT ALL ON FUNCTION postgis_typmod_dims(integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_typmod_dims(integer) TO argo;
GRANT ALL ON FUNCTION postgis_typmod_dims(integer) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_typmod_dims(integer) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_typmod_dims(integer) TO harvest_read_group;


--
-- Name: postgis_typmod_srid(integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_typmod_srid(integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_typmod_srid(integer) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_typmod_srid(integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_typmod_srid(integer) TO soop;
GRANT ALL ON FUNCTION postgis_typmod_srid(integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_typmod_srid(integer) TO argo;
GRANT ALL ON FUNCTION postgis_typmod_srid(integer) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_typmod_srid(integer) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_typmod_srid(integer) TO harvest_read_group;


--
-- Name: postgis_typmod_type(integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_typmod_type(integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_typmod_type(integer) TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_typmod_type(integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_typmod_type(integer) TO soop;
GRANT ALL ON FUNCTION postgis_typmod_type(integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_typmod_type(integer) TO argo;
GRANT ALL ON FUNCTION postgis_typmod_type(integer) TO aodn_dart;
GRANT ALL ON FUNCTION postgis_typmod_type(integer) TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_typmod_type(integer) TO harvest_read_group;


--
-- Name: postgis_version(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION postgis_version() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION postgis_version() TO harvest_write_group;
GRANT ALL ON FUNCTION postgis_version() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION postgis_version() TO soop;
GRANT ALL ON FUNCTION postgis_version() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION postgis_version() TO argo;
GRANT ALL ON FUNCTION postgis_version() TO aodn_dart;
GRANT ALL ON FUNCTION postgis_version() TO anmn_metadata;
GRANT ALL ON FUNCTION postgis_version() TO harvest_read_group;


--
-- Name: raster_above(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_above(raster, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_above(raster, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_above(raster, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_above(raster, raster) TO soop;
GRANT ALL ON FUNCTION raster_above(raster, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_above(raster, raster) TO argo;
GRANT ALL ON FUNCTION raster_above(raster, raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_above(raster, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_above(raster, raster) TO harvest_read_group;


--
-- Name: raster_below(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_below(raster, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_below(raster, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_below(raster, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_below(raster, raster) TO soop;
GRANT ALL ON FUNCTION raster_below(raster, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_below(raster, raster) TO argo;
GRANT ALL ON FUNCTION raster_below(raster, raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_below(raster, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_below(raster, raster) TO harvest_read_group;


--
-- Name: raster_contain(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_contain(raster, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_contain(raster, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_contain(raster, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_contain(raster, raster) TO soop;
GRANT ALL ON FUNCTION raster_contain(raster, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_contain(raster, raster) TO argo;
GRANT ALL ON FUNCTION raster_contain(raster, raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_contain(raster, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_contain(raster, raster) TO harvest_read_group;


--
-- Name: raster_contained(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_contained(raster, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_contained(raster, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_contained(raster, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_contained(raster, raster) TO soop;
GRANT ALL ON FUNCTION raster_contained(raster, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_contained(raster, raster) TO argo;
GRANT ALL ON FUNCTION raster_contained(raster, raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_contained(raster, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_contained(raster, raster) TO harvest_read_group;


--
-- Name: raster_contained_by_geometry(raster, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_contained_by_geometry(raster, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_contained_by_geometry(raster, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_contained_by_geometry(raster, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_contained_by_geometry(raster, geometry) TO soop;
GRANT ALL ON FUNCTION raster_contained_by_geometry(raster, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_contained_by_geometry(raster, geometry) TO argo;
GRANT ALL ON FUNCTION raster_contained_by_geometry(raster, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION raster_contained_by_geometry(raster, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_contained_by_geometry(raster, geometry) TO harvest_read_group;


--
-- Name: raster_eq(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_eq(raster, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_eq(raster, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_eq(raster, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_eq(raster, raster) TO soop;
GRANT ALL ON FUNCTION raster_eq(raster, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_eq(raster, raster) TO argo;
GRANT ALL ON FUNCTION raster_eq(raster, raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_eq(raster, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_eq(raster, raster) TO harvest_read_group;


--
-- Name: raster_geometry_contain(raster, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_geometry_contain(raster, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_geometry_contain(raster, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_geometry_contain(raster, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_geometry_contain(raster, geometry) TO soop;
GRANT ALL ON FUNCTION raster_geometry_contain(raster, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_geometry_contain(raster, geometry) TO argo;
GRANT ALL ON FUNCTION raster_geometry_contain(raster, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION raster_geometry_contain(raster, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_geometry_contain(raster, geometry) TO harvest_read_group;


--
-- Name: raster_geometry_overlap(raster, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_geometry_overlap(raster, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_geometry_overlap(raster, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_geometry_overlap(raster, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_geometry_overlap(raster, geometry) TO soop;
GRANT ALL ON FUNCTION raster_geometry_overlap(raster, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_geometry_overlap(raster, geometry) TO argo;
GRANT ALL ON FUNCTION raster_geometry_overlap(raster, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION raster_geometry_overlap(raster, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_geometry_overlap(raster, geometry) TO harvest_read_group;


--
-- Name: raster_hash(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_hash(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_hash(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_hash(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_hash(raster) TO soop;
GRANT ALL ON FUNCTION raster_hash(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_hash(raster) TO argo;
GRANT ALL ON FUNCTION raster_hash(raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_hash(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_hash(raster) TO harvest_read_group;


--
-- Name: raster_left(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_left(raster, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_left(raster, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_left(raster, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_left(raster, raster) TO soop;
GRANT ALL ON FUNCTION raster_left(raster, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_left(raster, raster) TO argo;
GRANT ALL ON FUNCTION raster_left(raster, raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_left(raster, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_left(raster, raster) TO harvest_read_group;


--
-- Name: raster_overabove(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_overabove(raster, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_overabove(raster, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_overabove(raster, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_overabove(raster, raster) TO soop;
GRANT ALL ON FUNCTION raster_overabove(raster, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_overabove(raster, raster) TO argo;
GRANT ALL ON FUNCTION raster_overabove(raster, raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_overabove(raster, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_overabove(raster, raster) TO harvest_read_group;


--
-- Name: raster_overbelow(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_overbelow(raster, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_overbelow(raster, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_overbelow(raster, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_overbelow(raster, raster) TO soop;
GRANT ALL ON FUNCTION raster_overbelow(raster, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_overbelow(raster, raster) TO argo;
GRANT ALL ON FUNCTION raster_overbelow(raster, raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_overbelow(raster, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_overbelow(raster, raster) TO harvest_read_group;


--
-- Name: raster_overlap(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_overlap(raster, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_overlap(raster, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_overlap(raster, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_overlap(raster, raster) TO soop;
GRANT ALL ON FUNCTION raster_overlap(raster, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_overlap(raster, raster) TO argo;
GRANT ALL ON FUNCTION raster_overlap(raster, raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_overlap(raster, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_overlap(raster, raster) TO harvest_read_group;


--
-- Name: raster_overleft(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_overleft(raster, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_overleft(raster, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_overleft(raster, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_overleft(raster, raster) TO soop;
GRANT ALL ON FUNCTION raster_overleft(raster, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_overleft(raster, raster) TO argo;
GRANT ALL ON FUNCTION raster_overleft(raster, raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_overleft(raster, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_overleft(raster, raster) TO harvest_read_group;


--
-- Name: raster_overright(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_overright(raster, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_overright(raster, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_overright(raster, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_overright(raster, raster) TO soop;
GRANT ALL ON FUNCTION raster_overright(raster, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_overright(raster, raster) TO argo;
GRANT ALL ON FUNCTION raster_overright(raster, raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_overright(raster, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_overright(raster, raster) TO harvest_read_group;


--
-- Name: raster_right(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_right(raster, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_right(raster, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_right(raster, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_right(raster, raster) TO soop;
GRANT ALL ON FUNCTION raster_right(raster, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_right(raster, raster) TO argo;
GRANT ALL ON FUNCTION raster_right(raster, raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_right(raster, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_right(raster, raster) TO harvest_read_group;


--
-- Name: raster_same(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION raster_same(raster, raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION raster_same(raster, raster) TO harvest_write_group;
GRANT ALL ON FUNCTION raster_same(raster, raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION raster_same(raster, raster) TO soop;
GRANT ALL ON FUNCTION raster_same(raster, raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION raster_same(raster, raster) TO argo;
GRANT ALL ON FUNCTION raster_same(raster, raster) TO aodn_dart;
GRANT ALL ON FUNCTION raster_same(raster, raster) TO anmn_metadata;
GRANT ALL ON FUNCTION raster_same(raster, raster) TO harvest_read_group;


--
-- Name: st_3dclosestpoint(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_3dclosestpoint(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_3dclosestpoint(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_3dclosestpoint(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_3dclosestpoint(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_3dclosestpoint(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_3dclosestpoint(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_3dclosestpoint(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_3dclosestpoint(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_3dclosestpoint(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_3ddfullywithin(geometry, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision) TO harvest_read_group;


--
-- Name: st_3ddistance(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_3ddistance(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_3ddistance(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_3ddistance(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_3ddistance(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_3ddistance(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_3ddistance(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_3ddistance(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_3ddistance(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_3ddistance(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_3ddwithin(geometry, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_3ddwithin(geom1 geometry, geom2 geometry, double precision) TO harvest_read_group;


--
-- Name: st_3dintersects(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_3dintersects(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_3dintersects(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_3dintersects(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_3dintersects(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_3dintersects(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_3dintersects(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_3dintersects(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_3dintersects(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_3dintersects(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_3dlength(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_3dlength(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_3dlength(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_3dlength(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_3dlength(geometry) TO soop;
GRANT ALL ON FUNCTION st_3dlength(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_3dlength(geometry) TO argo;
GRANT ALL ON FUNCTION st_3dlength(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_3dlength(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_3dlength(geometry) TO harvest_read_group;


--
-- Name: st_3dlength_spheroid(geometry, spheroid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_3dlength_spheroid(geometry, spheroid) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_3dlength_spheroid(geometry, spheroid) TO harvest_write_group;
GRANT ALL ON FUNCTION st_3dlength_spheroid(geometry, spheroid) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_3dlength_spheroid(geometry, spheroid) TO soop;
GRANT ALL ON FUNCTION st_3dlength_spheroid(geometry, spheroid) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_3dlength_spheroid(geometry, spheroid) TO argo;
GRANT ALL ON FUNCTION st_3dlength_spheroid(geometry, spheroid) TO aodn_dart;
GRANT ALL ON FUNCTION st_3dlength_spheroid(geometry, spheroid) TO anmn_metadata;
GRANT ALL ON FUNCTION st_3dlength_spheroid(geometry, spheroid) TO harvest_read_group;


--
-- Name: st_3dlongestline(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_3dlongestline(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_3dlongestline(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_3dlongestline(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_3dlongestline(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_3dlongestline(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_3dlongestline(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_3dlongestline(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_3dlongestline(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_3dlongestline(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_3dmakebox(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_3dmakebox(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_3dmakebox(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_3dmakebox(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_3dmakebox(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_3dmakebox(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_3dmakebox(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_3dmakebox(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_3dmakebox(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_3dmakebox(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_3dmaxdistance(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_3dmaxdistance(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_3dmaxdistance(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_3dmaxdistance(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_3dmaxdistance(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_3dmaxdistance(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_3dmaxdistance(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_3dmaxdistance(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_3dmaxdistance(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_3dmaxdistance(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_3dperimeter(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_3dperimeter(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_3dperimeter(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_3dperimeter(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_3dperimeter(geometry) TO soop;
GRANT ALL ON FUNCTION st_3dperimeter(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_3dperimeter(geometry) TO argo;
GRANT ALL ON FUNCTION st_3dperimeter(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_3dperimeter(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_3dperimeter(geometry) TO harvest_read_group;


--
-- Name: st_3dshortestline(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_3dshortestline(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_3dshortestline(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_3dshortestline(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_3dshortestline(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_3dshortestline(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_3dshortestline(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_3dshortestline(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_3dshortestline(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_3dshortestline(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_addband(raster, addbandarg[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_addband(rast raster, addbandargset addbandarg[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_addband(rast raster, addbandargset addbandarg[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_addband(rast raster, addbandargset addbandarg[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_addband(rast raster, addbandargset addbandarg[]) TO soop;
GRANT ALL ON FUNCTION st_addband(rast raster, addbandargset addbandarg[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_addband(rast raster, addbandargset addbandarg[]) TO argo;
GRANT ALL ON FUNCTION st_addband(rast raster, addbandargset addbandarg[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_addband(rast raster, addbandargset addbandarg[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_addband(rast raster, addbandargset addbandarg[]) TO harvest_read_group;


--
-- Name: st_addband(raster, text, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_addband(rast raster, pixeltype text, initialvalue double precision, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_addband(rast raster, pixeltype text, initialvalue double precision, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_addband(rast raster, pixeltype text, initialvalue double precision, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_addband(rast raster, pixeltype text, initialvalue double precision, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_addband(rast raster, pixeltype text, initialvalue double precision, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_addband(rast raster, pixeltype text, initialvalue double precision, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_addband(rast raster, pixeltype text, initialvalue double precision, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_addband(rast raster, pixeltype text, initialvalue double precision, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_addband(rast raster, pixeltype text, initialvalue double precision, nodataval double precision) TO harvest_read_group;


--
-- Name: st_addband(raster, raster[], integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_addband(torast raster, fromrasts raster[], fromband integer, torastindex integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrasts raster[], fromband integer, torastindex integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrasts raster[], fromband integer, torastindex integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrasts raster[], fromband integer, torastindex integer) TO soop;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrasts raster[], fromband integer, torastindex integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrasts raster[], fromband integer, torastindex integer) TO argo;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrasts raster[], fromband integer, torastindex integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrasts raster[], fromband integer, torastindex integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrasts raster[], fromband integer, torastindex integer) TO harvest_read_group;


--
-- Name: st_addband(raster, raster, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_addband(torast raster, fromrast raster, fromband integer, torastindex integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrast raster, fromband integer, torastindex integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrast raster, fromband integer, torastindex integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrast raster, fromband integer, torastindex integer) TO soop;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrast raster, fromband integer, torastindex integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrast raster, fromband integer, torastindex integer) TO argo;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrast raster, fromband integer, torastindex integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrast raster, fromband integer, torastindex integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_addband(torast raster, fromrast raster, fromband integer, torastindex integer) TO harvest_read_group;


--
-- Name: st_addband(raster, integer, text, integer[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_addband(rast raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision) TO harvest_read_group;


--
-- Name: st_addband(raster, integer, text, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_addband(rast raster, index integer, pixeltype text, initialvalue double precision, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, pixeltype text, initialvalue double precision, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, pixeltype text, initialvalue double precision, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, pixeltype text, initialvalue double precision, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, pixeltype text, initialvalue double precision, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, pixeltype text, initialvalue double precision, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, pixeltype text, initialvalue double precision, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, pixeltype text, initialvalue double precision, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_addband(rast raster, index integer, pixeltype text, initialvalue double precision, nodataval double precision) TO harvest_read_group;


--
-- Name: st_addband(raster, text, integer[], integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_addband(rast raster, outdbfile text, outdbindex integer[], index integer, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_addband(rast raster, outdbfile text, outdbindex integer[], index integer, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_addband(rast raster, outdbfile text, outdbindex integer[], index integer, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_addband(rast raster, outdbfile text, outdbindex integer[], index integer, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_addband(rast raster, outdbfile text, outdbindex integer[], index integer, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_addband(rast raster, outdbfile text, outdbindex integer[], index integer, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_addband(rast raster, outdbfile text, outdbindex integer[], index integer, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_addband(rast raster, outdbfile text, outdbindex integer[], index integer, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_addband(rast raster, outdbfile text, outdbindex integer[], index integer, nodataval double precision) TO harvest_read_group;


--
-- Name: st_addmeasure(geometry, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_addmeasure(geometry, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_addmeasure(geometry, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_addmeasure(geometry, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_addmeasure(geometry, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_addmeasure(geometry, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_addmeasure(geometry, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_addmeasure(geometry, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_addmeasure(geometry, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_addmeasure(geometry, double precision, double precision) TO harvest_read_group;


--
-- Name: st_addpoint(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_addpoint(geometry, geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_addpoint(geom1 geometry, geom2 geometry, integer) TO harvest_read_group;


--
-- Name: st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: st_approxcount(raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxcount(rast raster, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxcount(rast raster, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxcount(rast raster, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxcount(rast raster, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxcount(rast raster, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxcount(rast raster, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxcount(rast raster, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxcount(rast raster, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxcount(rast raster, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxcount(text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxcount(raster, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxcount(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxcount(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxcount(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxcount(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxcount(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxcount(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxcount(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxcount(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxcount(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxcount(raster, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxcount(text, text, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, exclude_nodata_value boolean, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, exclude_nodata_value boolean, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, exclude_nodata_value boolean, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, exclude_nodata_value boolean, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, exclude_nodata_value boolean, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, exclude_nodata_value boolean, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, exclude_nodata_value boolean, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, exclude_nodata_value boolean, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, exclude_nodata_value boolean, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxcount(text, text, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxcount(raster, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxcount(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxcount(text, text, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxcount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxhistogram(raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxhistogram(rast raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_approxhistogram(text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_approxhistogram(raster, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_approxhistogram(text, text, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_approxhistogram(raster, integer, double precision, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_approxhistogram(text, text, integer, double precision, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_approxhistogram(raster, integer, boolean, double precision, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_approxhistogram(raster, integer, double precision, integer, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_approxhistogram(text, text, integer, boolean, double precision, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_approxhistogram(text, text, integer, double precision, integer, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_approxhistogram(raster, integer, boolean, double precision, integer, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_approxhistogram(text, text, integer, boolean, double precision, integer, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(raster, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, quantile double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(text, text, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, quantile double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(raster, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(raster, double precision, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(raster, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, sample_percent double precision, quantile double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(text, text, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(text, text, double precision, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(text, text, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantile double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(raster, integer, double precision, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(raster, integer, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, sample_percent double precision, quantile double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(text, text, integer, double precision, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(text, text, integer, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantile double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(raster, integer, boolean, double precision, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(raster, integer, boolean, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(text, text, integer, boolean, double precision, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_approxquantile(text, text, integer, boolean, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision) TO harvest_read_group;


--
-- Name: st_approxsummarystats(raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxsummarystats(text, text, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_approxsummarystats(text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxsummarystats(raster, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, exclude_nodata_value boolean, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxsummarystats(raster, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxsummarystats(text, text, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxsummarystats(raster, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxsummarystats(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_approxsummarystats(text, text, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO soop;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO argo;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_approxsummarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision) TO harvest_read_group;


--
-- Name: st_area(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_area(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_area(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_area(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_area(text) TO soop;
GRANT ALL ON FUNCTION st_area(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_area(text) TO argo;
GRANT ALL ON FUNCTION st_area(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_area(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_area(text) TO harvest_read_group;


--
-- Name: st_area(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_area(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_area(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_area(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_area(geometry) TO soop;
GRANT ALL ON FUNCTION st_area(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_area(geometry) TO argo;
GRANT ALL ON FUNCTION st_area(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_area(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_area(geometry) TO harvest_read_group;


--
-- Name: st_area(geography, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_area(geog geography, use_spheroid boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_area(geog geography, use_spheroid boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_area(geog geography, use_spheroid boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_area(geog geography, use_spheroid boolean) TO soop;
GRANT ALL ON FUNCTION st_area(geog geography, use_spheroid boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_area(geog geography, use_spheroid boolean) TO argo;
GRANT ALL ON FUNCTION st_area(geog geography, use_spheroid boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_area(geog geography, use_spheroid boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_area(geog geography, use_spheroid boolean) TO harvest_read_group;


--
-- Name: st_area2d(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_area2d(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_area2d(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_area2d(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_area2d(geometry) TO soop;
GRANT ALL ON FUNCTION st_area2d(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_area2d(geometry) TO argo;
GRANT ALL ON FUNCTION st_area2d(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_area2d(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_area2d(geometry) TO harvest_read_group;


--
-- Name: st_asbinary(geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asbinary(geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asbinary(geography) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asbinary(geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asbinary(geography) TO soop;
GRANT ALL ON FUNCTION st_asbinary(geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asbinary(geography) TO argo;
GRANT ALL ON FUNCTION st_asbinary(geography) TO aodn_dart;
GRANT ALL ON FUNCTION st_asbinary(geography) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asbinary(geography) TO harvest_read_group;


--
-- Name: st_asbinary(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asbinary(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asbinary(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asbinary(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asbinary(geometry) TO soop;
GRANT ALL ON FUNCTION st_asbinary(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asbinary(geometry) TO argo;
GRANT ALL ON FUNCTION st_asbinary(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_asbinary(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asbinary(geometry) TO harvest_read_group;


--
-- Name: st_asbinary(geography, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asbinary(geography, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asbinary(geography, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asbinary(geography, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asbinary(geography, text) TO soop;
GRANT ALL ON FUNCTION st_asbinary(geography, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asbinary(geography, text) TO argo;
GRANT ALL ON FUNCTION st_asbinary(geography, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_asbinary(geography, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asbinary(geography, text) TO harvest_read_group;


--
-- Name: st_asbinary(geometry, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asbinary(geometry, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asbinary(geometry, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asbinary(geometry, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asbinary(geometry, text) TO soop;
GRANT ALL ON FUNCTION st_asbinary(geometry, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asbinary(geometry, text) TO argo;
GRANT ALL ON FUNCTION st_asbinary(geometry, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_asbinary(geometry, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asbinary(geometry, text) TO harvest_read_group;


--
-- Name: st_asbinary(raster, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asbinary(raster, outasin boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asbinary(raster, outasin boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asbinary(raster, outasin boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asbinary(raster, outasin boolean) TO soop;
GRANT ALL ON FUNCTION st_asbinary(raster, outasin boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asbinary(raster, outasin boolean) TO argo;
GRANT ALL ON FUNCTION st_asbinary(raster, outasin boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_asbinary(raster, outasin boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asbinary(raster, outasin boolean) TO harvest_read_group;


--
-- Name: st_asencodedpolyline(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asencodedpolyline(geom geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asencodedpolyline(geom geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asencodedpolyline(geom geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asencodedpolyline(geom geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_asencodedpolyline(geom geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asencodedpolyline(geom geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_asencodedpolyline(geom geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_asencodedpolyline(geom geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asencodedpolyline(geom geometry, integer) TO harvest_read_group;


--
-- Name: st_asewkb(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asewkb(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asewkb(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asewkb(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asewkb(geometry) TO soop;
GRANT ALL ON FUNCTION st_asewkb(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asewkb(geometry) TO argo;
GRANT ALL ON FUNCTION st_asewkb(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_asewkb(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asewkb(geometry) TO harvest_read_group;


--
-- Name: st_asewkb(geometry, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asewkb(geometry, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asewkb(geometry, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asewkb(geometry, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asewkb(geometry, text) TO soop;
GRANT ALL ON FUNCTION st_asewkb(geometry, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asewkb(geometry, text) TO argo;
GRANT ALL ON FUNCTION st_asewkb(geometry, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_asewkb(geometry, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asewkb(geometry, text) TO harvest_read_group;


--
-- Name: st_asewkt(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asewkt(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asewkt(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asewkt(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asewkt(text) TO soop;
GRANT ALL ON FUNCTION st_asewkt(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asewkt(text) TO argo;
GRANT ALL ON FUNCTION st_asewkt(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_asewkt(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asewkt(text) TO harvest_read_group;


--
-- Name: st_asewkt(geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asewkt(geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asewkt(geography) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asewkt(geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asewkt(geography) TO soop;
GRANT ALL ON FUNCTION st_asewkt(geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asewkt(geography) TO argo;
GRANT ALL ON FUNCTION st_asewkt(geography) TO aodn_dart;
GRANT ALL ON FUNCTION st_asewkt(geography) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asewkt(geography) TO harvest_read_group;


--
-- Name: st_asewkt(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asewkt(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asewkt(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asewkt(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asewkt(geometry) TO soop;
GRANT ALL ON FUNCTION st_asewkt(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asewkt(geometry) TO argo;
GRANT ALL ON FUNCTION st_asewkt(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_asewkt(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asewkt(geometry) TO harvest_read_group;


--
-- Name: st_asgdalraster(raster, text, text[], integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asgdalraster(rast raster, format text, options text[], srid integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asgdalraster(rast raster, format text, options text[], srid integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asgdalraster(rast raster, format text, options text[], srid integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asgdalraster(rast raster, format text, options text[], srid integer) TO soop;
GRANT ALL ON FUNCTION st_asgdalraster(rast raster, format text, options text[], srid integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asgdalraster(rast raster, format text, options text[], srid integer) TO argo;
GRANT ALL ON FUNCTION st_asgdalraster(rast raster, format text, options text[], srid integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_asgdalraster(rast raster, format text, options text[], srid integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asgdalraster(rast raster, format text, options text[], srid integer) TO harvest_read_group;


--
-- Name: st_asgeojson(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asgeojson(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asgeojson(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asgeojson(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asgeojson(text) TO soop;
GRANT ALL ON FUNCTION st_asgeojson(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asgeojson(text) TO argo;
GRANT ALL ON FUNCTION st_asgeojson(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_asgeojson(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asgeojson(text) TO harvest_read_group;


--
-- Name: st_asgeojson(geography, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asgeojson(geog geography, maxdecimaldigits integer, options integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asgeojson(geog geography, maxdecimaldigits integer, options integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asgeojson(geog geography, maxdecimaldigits integer, options integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asgeojson(geog geography, maxdecimaldigits integer, options integer) TO soop;
GRANT ALL ON FUNCTION st_asgeojson(geog geography, maxdecimaldigits integer, options integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asgeojson(geog geography, maxdecimaldigits integer, options integer) TO argo;
GRANT ALL ON FUNCTION st_asgeojson(geog geography, maxdecimaldigits integer, options integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_asgeojson(geog geography, maxdecimaldigits integer, options integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asgeojson(geog geography, maxdecimaldigits integer, options integer) TO harvest_read_group;


--
-- Name: st_asgeojson(geometry, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asgeojson(geom geometry, maxdecimaldigits integer, options integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asgeojson(geom geometry, maxdecimaldigits integer, options integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asgeojson(geom geometry, maxdecimaldigits integer, options integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asgeojson(geom geometry, maxdecimaldigits integer, options integer) TO soop;
GRANT ALL ON FUNCTION st_asgeojson(geom geometry, maxdecimaldigits integer, options integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asgeojson(geom geometry, maxdecimaldigits integer, options integer) TO argo;
GRANT ALL ON FUNCTION st_asgeojson(geom geometry, maxdecimaldigits integer, options integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_asgeojson(geom geometry, maxdecimaldigits integer, options integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asgeojson(geom geometry, maxdecimaldigits integer, options integer) TO harvest_read_group;


--
-- Name: st_asgeojson(integer, geography, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geog geography, maxdecimaldigits integer, options integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geog geography, maxdecimaldigits integer, options integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geog geography, maxdecimaldigits integer, options integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geog geography, maxdecimaldigits integer, options integer) TO soop;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geog geography, maxdecimaldigits integer, options integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geog geography, maxdecimaldigits integer, options integer) TO argo;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geog geography, maxdecimaldigits integer, options integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geog geography, maxdecimaldigits integer, options integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geog geography, maxdecimaldigits integer, options integer) TO harvest_read_group;


--
-- Name: st_asgeojson(integer, geometry, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geom geometry, maxdecimaldigits integer, options integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geom geometry, maxdecimaldigits integer, options integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geom geometry, maxdecimaldigits integer, options integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geom geometry, maxdecimaldigits integer, options integer) TO soop;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geom geometry, maxdecimaldigits integer, options integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geom geometry, maxdecimaldigits integer, options integer) TO argo;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geom geometry, maxdecimaldigits integer, options integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geom geometry, maxdecimaldigits integer, options integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asgeojson(gj_version integer, geom geometry, maxdecimaldigits integer, options integer) TO harvest_read_group;


--
-- Name: st_asgml(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asgml(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asgml(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asgml(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asgml(text) TO soop;
GRANT ALL ON FUNCTION st_asgml(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asgml(text) TO argo;
GRANT ALL ON FUNCTION st_asgml(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_asgml(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asgml(text) TO harvest_read_group;


--
-- Name: st_asgml(geography, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asgml(geog geography, maxdecimaldigits integer, options integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asgml(geog geography, maxdecimaldigits integer, options integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asgml(geog geography, maxdecimaldigits integer, options integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asgml(geog geography, maxdecimaldigits integer, options integer) TO soop;
GRANT ALL ON FUNCTION st_asgml(geog geography, maxdecimaldigits integer, options integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asgml(geog geography, maxdecimaldigits integer, options integer) TO argo;
GRANT ALL ON FUNCTION st_asgml(geog geography, maxdecimaldigits integer, options integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_asgml(geog geography, maxdecimaldigits integer, options integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asgml(geog geography, maxdecimaldigits integer, options integer) TO harvest_read_group;


--
-- Name: st_asgml(geometry, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asgml(geom geometry, maxdecimaldigits integer, options integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asgml(geom geometry, maxdecimaldigits integer, options integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asgml(geom geometry, maxdecimaldigits integer, options integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asgml(geom geometry, maxdecimaldigits integer, options integer) TO soop;
GRANT ALL ON FUNCTION st_asgml(geom geometry, maxdecimaldigits integer, options integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asgml(geom geometry, maxdecimaldigits integer, options integer) TO argo;
GRANT ALL ON FUNCTION st_asgml(geom geometry, maxdecimaldigits integer, options integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_asgml(geom geometry, maxdecimaldigits integer, options integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asgml(geom geometry, maxdecimaldigits integer, options integer) TO harvest_read_group;


--
-- Name: st_asgml(integer, geography, integer, integer, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asgml(version integer, geog geography, maxdecimaldigits integer, options integer, nprefix text, id text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asgml(version integer, geog geography, maxdecimaldigits integer, options integer, nprefix text, id text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asgml(version integer, geog geography, maxdecimaldigits integer, options integer, nprefix text, id text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asgml(version integer, geog geography, maxdecimaldigits integer, options integer, nprefix text, id text) TO soop;
GRANT ALL ON FUNCTION st_asgml(version integer, geog geography, maxdecimaldigits integer, options integer, nprefix text, id text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asgml(version integer, geog geography, maxdecimaldigits integer, options integer, nprefix text, id text) TO argo;
GRANT ALL ON FUNCTION st_asgml(version integer, geog geography, maxdecimaldigits integer, options integer, nprefix text, id text) TO aodn_dart;
GRANT ALL ON FUNCTION st_asgml(version integer, geog geography, maxdecimaldigits integer, options integer, nprefix text, id text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asgml(version integer, geog geography, maxdecimaldigits integer, options integer, nprefix text, id text) TO harvest_read_group;


--
-- Name: st_asgml(integer, geometry, integer, integer, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asgml(version integer, geom geometry, maxdecimaldigits integer, options integer, nprefix text, id text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asgml(version integer, geom geometry, maxdecimaldigits integer, options integer, nprefix text, id text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asgml(version integer, geom geometry, maxdecimaldigits integer, options integer, nprefix text, id text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asgml(version integer, geom geometry, maxdecimaldigits integer, options integer, nprefix text, id text) TO soop;
GRANT ALL ON FUNCTION st_asgml(version integer, geom geometry, maxdecimaldigits integer, options integer, nprefix text, id text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asgml(version integer, geom geometry, maxdecimaldigits integer, options integer, nprefix text, id text) TO argo;
GRANT ALL ON FUNCTION st_asgml(version integer, geom geometry, maxdecimaldigits integer, options integer, nprefix text, id text) TO aodn_dart;
GRANT ALL ON FUNCTION st_asgml(version integer, geom geometry, maxdecimaldigits integer, options integer, nprefix text, id text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asgml(version integer, geom geometry, maxdecimaldigits integer, options integer, nprefix text, id text) TO harvest_read_group;


--
-- Name: st_ashexewkb(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_ashexewkb(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_ashexewkb(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_ashexewkb(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_ashexewkb(geometry) TO soop;
GRANT ALL ON FUNCTION st_ashexewkb(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_ashexewkb(geometry) TO argo;
GRANT ALL ON FUNCTION st_ashexewkb(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_ashexewkb(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_ashexewkb(geometry) TO harvest_read_group;


--
-- Name: st_ashexewkb(geometry, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_ashexewkb(geometry, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_ashexewkb(geometry, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_ashexewkb(geometry, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_ashexewkb(geometry, text) TO soop;
GRANT ALL ON FUNCTION st_ashexewkb(geometry, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_ashexewkb(geometry, text) TO argo;
GRANT ALL ON FUNCTION st_ashexewkb(geometry, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_ashexewkb(geometry, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_ashexewkb(geometry, text) TO harvest_read_group;


--
-- Name: st_asjpeg(raster, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asjpeg(rast raster, options text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, options text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, options text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, options text[]) TO soop;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, options text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, options text[]) TO argo;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, options text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, options text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, options text[]) TO harvest_read_group;


--
-- Name: st_asjpeg(raster, integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], options text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], options text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], options text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], options text[]) TO soop;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], options text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], options text[]) TO argo;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], options text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], options text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], options text[]) TO harvest_read_group;


--
-- Name: st_asjpeg(raster, integer[], integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], quality integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], quality integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], quality integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], quality integer) TO soop;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], quality integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], quality integer) TO argo;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], quality integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], quality integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nbands integer[], quality integer) TO harvest_read_group;


--
-- Name: st_asjpeg(raster, integer, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, options text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, options text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, options text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, options text[]) TO soop;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, options text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, options text[]) TO argo;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, options text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, options text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, options text[]) TO harvest_read_group;


--
-- Name: st_asjpeg(raster, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, quality integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, quality integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, quality integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, quality integer) TO soop;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, quality integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, quality integer) TO argo;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, quality integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, quality integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asjpeg(rast raster, nband integer, quality integer) TO harvest_read_group;


--
-- Name: st_askml(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_askml(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_askml(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_askml(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_askml(text) TO soop;
GRANT ALL ON FUNCTION st_askml(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_askml(text) TO argo;
GRANT ALL ON FUNCTION st_askml(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_askml(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_askml(text) TO harvest_read_group;


--
-- Name: st_askml(geography, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_askml(geog geography, maxdecimaldigits integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_askml(geog geography, maxdecimaldigits integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_askml(geog geography, maxdecimaldigits integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_askml(geog geography, maxdecimaldigits integer) TO soop;
GRANT ALL ON FUNCTION st_askml(geog geography, maxdecimaldigits integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_askml(geog geography, maxdecimaldigits integer) TO argo;
GRANT ALL ON FUNCTION st_askml(geog geography, maxdecimaldigits integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_askml(geog geography, maxdecimaldigits integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_askml(geog geography, maxdecimaldigits integer) TO harvest_read_group;


--
-- Name: st_askml(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_askml(geom geometry, maxdecimaldigits integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_askml(geom geometry, maxdecimaldigits integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_askml(geom geometry, maxdecimaldigits integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_askml(geom geometry, maxdecimaldigits integer) TO soop;
GRANT ALL ON FUNCTION st_askml(geom geometry, maxdecimaldigits integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_askml(geom geometry, maxdecimaldigits integer) TO argo;
GRANT ALL ON FUNCTION st_askml(geom geometry, maxdecimaldigits integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_askml(geom geometry, maxdecimaldigits integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_askml(geom geometry, maxdecimaldigits integer) TO harvest_read_group;


--
-- Name: st_askml(integer, geography, integer, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_askml(version integer, geog geography, maxdecimaldigits integer, nprefix text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_askml(version integer, geog geography, maxdecimaldigits integer, nprefix text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_askml(version integer, geog geography, maxdecimaldigits integer, nprefix text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_askml(version integer, geog geography, maxdecimaldigits integer, nprefix text) TO soop;
GRANT ALL ON FUNCTION st_askml(version integer, geog geography, maxdecimaldigits integer, nprefix text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_askml(version integer, geog geography, maxdecimaldigits integer, nprefix text) TO argo;
GRANT ALL ON FUNCTION st_askml(version integer, geog geography, maxdecimaldigits integer, nprefix text) TO aodn_dart;
GRANT ALL ON FUNCTION st_askml(version integer, geog geography, maxdecimaldigits integer, nprefix text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_askml(version integer, geog geography, maxdecimaldigits integer, nprefix text) TO harvest_read_group;


--
-- Name: st_askml(integer, geometry, integer, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_askml(version integer, geom geometry, maxdecimaldigits integer, nprefix text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_askml(version integer, geom geometry, maxdecimaldigits integer, nprefix text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_askml(version integer, geom geometry, maxdecimaldigits integer, nprefix text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_askml(version integer, geom geometry, maxdecimaldigits integer, nprefix text) TO soop;
GRANT ALL ON FUNCTION st_askml(version integer, geom geometry, maxdecimaldigits integer, nprefix text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_askml(version integer, geom geometry, maxdecimaldigits integer, nprefix text) TO argo;
GRANT ALL ON FUNCTION st_askml(version integer, geom geometry, maxdecimaldigits integer, nprefix text) TO aodn_dart;
GRANT ALL ON FUNCTION st_askml(version integer, geom geometry, maxdecimaldigits integer, nprefix text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_askml(version integer, geom geometry, maxdecimaldigits integer, nprefix text) TO harvest_read_group;


--
-- Name: st_aslatlontext(geometry, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_aslatlontext(geom geometry, tmpl text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_aslatlontext(geom geometry, tmpl text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_aslatlontext(geom geometry, tmpl text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_aslatlontext(geom geometry, tmpl text) TO soop;
GRANT ALL ON FUNCTION st_aslatlontext(geom geometry, tmpl text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_aslatlontext(geom geometry, tmpl text) TO argo;
GRANT ALL ON FUNCTION st_aslatlontext(geom geometry, tmpl text) TO aodn_dart;
GRANT ALL ON FUNCTION st_aslatlontext(geom geometry, tmpl text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_aslatlontext(geom geometry, tmpl text) TO harvest_read_group;


--
-- Name: st_aspect(raster, integer, text, text, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, pixeltype text, units text, interpolate_nodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, pixeltype text, units text, interpolate_nodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, pixeltype text, units text, interpolate_nodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, pixeltype text, units text, interpolate_nodata boolean) TO soop;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, pixeltype text, units text, interpolate_nodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, pixeltype text, units text, interpolate_nodata boolean) TO argo;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, pixeltype text, units text, interpolate_nodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, pixeltype text, units text, interpolate_nodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, pixeltype text, units text, interpolate_nodata boolean) TO harvest_read_group;


--
-- Name: st_aspect(raster, integer, raster, text, text, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, customextent raster, pixeltype text, units text, interpolate_nodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, customextent raster, pixeltype text, units text, interpolate_nodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, customextent raster, pixeltype text, units text, interpolate_nodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, customextent raster, pixeltype text, units text, interpolate_nodata boolean) TO soop;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, customextent raster, pixeltype text, units text, interpolate_nodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, customextent raster, pixeltype text, units text, interpolate_nodata boolean) TO argo;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, customextent raster, pixeltype text, units text, interpolate_nodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, customextent raster, pixeltype text, units text, interpolate_nodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_aspect(rast raster, nband integer, customextent raster, pixeltype text, units text, interpolate_nodata boolean) TO harvest_read_group;


--
-- Name: st_aspng(raster, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_aspng(rast raster, options text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_aspng(rast raster, options text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_aspng(rast raster, options text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_aspng(rast raster, options text[]) TO soop;
GRANT ALL ON FUNCTION st_aspng(rast raster, options text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_aspng(rast raster, options text[]) TO argo;
GRANT ALL ON FUNCTION st_aspng(rast raster, options text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_aspng(rast raster, options text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_aspng(rast raster, options text[]) TO harvest_read_group;


--
-- Name: st_aspng(raster, integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], options text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], options text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], options text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], options text[]) TO soop;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], options text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], options text[]) TO argo;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], options text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], options text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], options text[]) TO harvest_read_group;


--
-- Name: st_aspng(raster, integer[], integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], compression integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], compression integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], compression integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], compression integer) TO soop;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], compression integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], compression integer) TO argo;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], compression integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], compression integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_aspng(rast raster, nbands integer[], compression integer) TO harvest_read_group;


--
-- Name: st_aspng(raster, integer, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, options text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, options text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, options text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, options text[]) TO soop;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, options text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, options text[]) TO argo;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, options text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, options text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, options text[]) TO harvest_read_group;


--
-- Name: st_aspng(raster, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, compression integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, compression integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, compression integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, compression integer) TO soop;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, compression integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, compression integer) TO argo;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, compression integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, compression integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_aspng(rast raster, nband integer, compression integer) TO harvest_read_group;


--
-- Name: st_asraster(geometry, raster, text[], double precision[], double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text[], value double precision[], nodataval double precision[], touched boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text[], value double precision[], nodataval double precision[], touched boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text[], value double precision[], nodataval double precision[], touched boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text[], value double precision[], nodataval double precision[], touched boolean) TO soop;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text[], value double precision[], nodataval double precision[], touched boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text[], value double precision[], nodataval double precision[], touched boolean) TO argo;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text[], value double precision[], nodataval double precision[], touched boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text[], value double precision[], nodataval double precision[], touched boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text[], value double precision[], nodataval double precision[], touched boolean) TO harvest_read_group;


--
-- Name: st_asraster(geometry, raster, text, double precision, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text, value double precision, nodataval double precision, touched boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text, value double precision, nodataval double precision, touched boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text, value double precision, nodataval double precision, touched boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text, value double precision, nodataval double precision, touched boolean) TO soop;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text, value double precision, nodataval double precision, touched boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text, value double precision, nodataval double precision, touched boolean) TO argo;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text, value double precision, nodataval double precision, touched boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text, value double precision, nodataval double precision, touched boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asraster(geom geometry, ref raster, pixeltype text, value double precision, nodataval double precision, touched boolean) TO harvest_read_group;


--
-- Name: st_asraster(geometry, double precision, double precision, text[], double precision[], double precision[], double precision, double precision, double precision, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO soop;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO argo;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_read_group;


--
-- Name: st_asraster(geometry, double precision, double precision, double precision, double precision, text[], double precision[], double precision[], double precision, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO soop;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO argo;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO harvest_read_group;


--
-- Name: st_asraster(geometry, double precision, double precision, double precision, double precision, text, double precision, double precision, double precision, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO soop;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO argo;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_read_group;


--
-- Name: st_asraster(geometry, double precision, double precision, text, double precision, double precision, double precision, double precision, double precision, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO soop;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO argo;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_read_group;


--
-- Name: st_asraster(geometry, integer, integer, text[], double precision[], double precision[], double precision, double precision, double precision, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO soop;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO argo;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text[], value double precision[], nodataval double precision[], upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_read_group;


--
-- Name: st_asraster(geometry, integer, integer, double precision, double precision, text[], double precision[], double precision[], double precision, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO soop;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO argo;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text[], value double precision[], nodataval double precision[], skewx double precision, skewy double precision, touched boolean) TO harvest_read_group;


--
-- Name: st_asraster(geometry, integer, integer, double precision, double precision, text, double precision, double precision, double precision, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO soop;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO argo;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision, nodataval double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_read_group;


--
-- Name: st_asraster(geometry, integer, integer, text, double precision, double precision, double precision, double precision, double precision, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO soop;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO argo;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asraster(geom geometry, width integer, height integer, pixeltype text, value double precision, nodataval double precision, upperleftx double precision, upperlefty double precision, skewx double precision, skewy double precision, touched boolean) TO harvest_read_group;


--
-- Name: st_assvg(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_assvg(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_assvg(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_assvg(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_assvg(text) TO soop;
GRANT ALL ON FUNCTION st_assvg(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_assvg(text) TO argo;
GRANT ALL ON FUNCTION st_assvg(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_assvg(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_assvg(text) TO harvest_read_group;


--
-- Name: st_assvg(geography, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_assvg(geog geography, rel integer, maxdecimaldigits integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_assvg(geog geography, rel integer, maxdecimaldigits integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_assvg(geog geography, rel integer, maxdecimaldigits integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_assvg(geog geography, rel integer, maxdecimaldigits integer) TO soop;
GRANT ALL ON FUNCTION st_assvg(geog geography, rel integer, maxdecimaldigits integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_assvg(geog geography, rel integer, maxdecimaldigits integer) TO argo;
GRANT ALL ON FUNCTION st_assvg(geog geography, rel integer, maxdecimaldigits integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_assvg(geog geography, rel integer, maxdecimaldigits integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_assvg(geog geography, rel integer, maxdecimaldigits integer) TO harvest_read_group;


--
-- Name: st_assvg(geometry, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_assvg(geom geometry, rel integer, maxdecimaldigits integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_assvg(geom geometry, rel integer, maxdecimaldigits integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_assvg(geom geometry, rel integer, maxdecimaldigits integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_assvg(geom geometry, rel integer, maxdecimaldigits integer) TO soop;
GRANT ALL ON FUNCTION st_assvg(geom geometry, rel integer, maxdecimaldigits integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_assvg(geom geometry, rel integer, maxdecimaldigits integer) TO argo;
GRANT ALL ON FUNCTION st_assvg(geom geometry, rel integer, maxdecimaldigits integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_assvg(geom geometry, rel integer, maxdecimaldigits integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_assvg(geom geometry, rel integer, maxdecimaldigits integer) TO harvest_read_group;


--
-- Name: st_astext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_astext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_astext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_astext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_astext(text) TO soop;
GRANT ALL ON FUNCTION st_astext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_astext(text) TO argo;
GRANT ALL ON FUNCTION st_astext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_astext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_astext(text) TO harvest_read_group;


--
-- Name: st_astext(geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_astext(geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_astext(geography) TO harvest_write_group;
GRANT ALL ON FUNCTION st_astext(geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_astext(geography) TO soop;
GRANT ALL ON FUNCTION st_astext(geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_astext(geography) TO argo;
GRANT ALL ON FUNCTION st_astext(geography) TO aodn_dart;
GRANT ALL ON FUNCTION st_astext(geography) TO anmn_metadata;
GRANT ALL ON FUNCTION st_astext(geography) TO harvest_read_group;


--
-- Name: st_astext(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_astext(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_astext(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_astext(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_astext(geometry) TO soop;
GRANT ALL ON FUNCTION st_astext(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_astext(geometry) TO argo;
GRANT ALL ON FUNCTION st_astext(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_astext(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_astext(geometry) TO harvest_read_group;


--
-- Name: st_astiff(raster, text[], integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_astiff(rast raster, options text[], srid integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_astiff(rast raster, options text[], srid integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_astiff(rast raster, options text[], srid integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_astiff(rast raster, options text[], srid integer) TO soop;
GRANT ALL ON FUNCTION st_astiff(rast raster, options text[], srid integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_astiff(rast raster, options text[], srid integer) TO argo;
GRANT ALL ON FUNCTION st_astiff(rast raster, options text[], srid integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_astiff(rast raster, options text[], srid integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_astiff(rast raster, options text[], srid integer) TO harvest_read_group;


--
-- Name: st_astiff(raster, text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_astiff(rast raster, compression text, srid integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_astiff(rast raster, compression text, srid integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_astiff(rast raster, compression text, srid integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_astiff(rast raster, compression text, srid integer) TO soop;
GRANT ALL ON FUNCTION st_astiff(rast raster, compression text, srid integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_astiff(rast raster, compression text, srid integer) TO argo;
GRANT ALL ON FUNCTION st_astiff(rast raster, compression text, srid integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_astiff(rast raster, compression text, srid integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_astiff(rast raster, compression text, srid integer) TO harvest_read_group;


--
-- Name: st_astiff(raster, integer[], text[], integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], options text[], srid integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], options text[], srid integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], options text[], srid integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], options text[], srid integer) TO soop;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], options text[], srid integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], options text[], srid integer) TO argo;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], options text[], srid integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], options text[], srid integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], options text[], srid integer) TO harvest_read_group;


--
-- Name: st_astiff(raster, integer[], text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], compression text, srid integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], compression text, srid integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], compression text, srid integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], compression text, srid integer) TO soop;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], compression text, srid integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], compression text, srid integer) TO argo;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], compression text, srid integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], compression text, srid integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_astiff(rast raster, nbands integer[], compression text, srid integer) TO harvest_read_group;


--
-- Name: st_astwkb(geometry, integer, integer, integer, boolean, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_astwkb(geom geometry, prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_astwkb(geom geometry, prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_astwkb(geom geometry, prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_astwkb(geom geometry, prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO soop;
GRANT ALL ON FUNCTION st_astwkb(geom geometry, prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_astwkb(geom geometry, prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO argo;
GRANT ALL ON FUNCTION st_astwkb(geom geometry, prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_astwkb(geom geometry, prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_astwkb(geom geometry, prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO harvest_read_group;


--
-- Name: st_astwkb(geometry[], bigint[], integer, integer, integer, boolean, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_astwkb(geom geometry[], ids bigint[], prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_astwkb(geom geometry[], ids bigint[], prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_astwkb(geom geometry[], ids bigint[], prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_astwkb(geom geometry[], ids bigint[], prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO soop;
GRANT ALL ON FUNCTION st_astwkb(geom geometry[], ids bigint[], prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_astwkb(geom geometry[], ids bigint[], prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO argo;
GRANT ALL ON FUNCTION st_astwkb(geom geometry[], ids bigint[], prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_astwkb(geom geometry[], ids bigint[], prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_astwkb(geom geometry[], ids bigint[], prec integer, prec_z integer, prec_m integer, with_sizes boolean, with_boxes boolean) TO harvest_read_group;


--
-- Name: st_asx3d(geometry, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_asx3d(geom geometry, maxdecimaldigits integer, options integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_asx3d(geom geometry, maxdecimaldigits integer, options integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_asx3d(geom geometry, maxdecimaldigits integer, options integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_asx3d(geom geometry, maxdecimaldigits integer, options integer) TO soop;
GRANT ALL ON FUNCTION st_asx3d(geom geometry, maxdecimaldigits integer, options integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_asx3d(geom geometry, maxdecimaldigits integer, options integer) TO argo;
GRANT ALL ON FUNCTION st_asx3d(geom geometry, maxdecimaldigits integer, options integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_asx3d(geom geometry, maxdecimaldigits integer, options integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_asx3d(geom geometry, maxdecimaldigits integer, options integer) TO harvest_read_group;


--
-- Name: st_azimuth(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_azimuth(geog1 geography, geog2 geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_azimuth(geog1 geography, geog2 geography) TO harvest_write_group;
GRANT ALL ON FUNCTION st_azimuth(geog1 geography, geog2 geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_azimuth(geog1 geography, geog2 geography) TO soop;
GRANT ALL ON FUNCTION st_azimuth(geog1 geography, geog2 geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_azimuth(geog1 geography, geog2 geography) TO argo;
GRANT ALL ON FUNCTION st_azimuth(geog1 geography, geog2 geography) TO aodn_dart;
GRANT ALL ON FUNCTION st_azimuth(geog1 geography, geog2 geography) TO anmn_metadata;
GRANT ALL ON FUNCTION st_azimuth(geog1 geography, geog2 geography) TO harvest_read_group;


--
-- Name: st_azimuth(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_azimuth(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_azimuth(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_azimuth(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_azimuth(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_azimuth(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_azimuth(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_azimuth(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_azimuth(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_azimuth(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_band(raster, integer[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_band(rast raster, nbands integer[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_band(rast raster, nbands integer[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_band(rast raster, nbands integer[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_band(rast raster, nbands integer[]) TO soop;
GRANT ALL ON FUNCTION st_band(rast raster, nbands integer[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_band(rast raster, nbands integer[]) TO argo;
GRANT ALL ON FUNCTION st_band(rast raster, nbands integer[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_band(rast raster, nbands integer[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_band(rast raster, nbands integer[]) TO harvest_read_group;


--
-- Name: st_band(raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_band(rast raster, nband integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_band(rast raster, nband integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_band(rast raster, nband integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_band(rast raster, nband integer) TO soop;
GRANT ALL ON FUNCTION st_band(rast raster, nband integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_band(rast raster, nband integer) TO argo;
GRANT ALL ON FUNCTION st_band(rast raster, nband integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_band(rast raster, nband integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_band(rast raster, nband integer) TO harvest_read_group;


--
-- Name: st_band(raster, text, character); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_band(rast raster, nbands text, delimiter character) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_band(rast raster, nbands text, delimiter character) TO harvest_write_group;
GRANT ALL ON FUNCTION st_band(rast raster, nbands text, delimiter character) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_band(rast raster, nbands text, delimiter character) TO soop;
GRANT ALL ON FUNCTION st_band(rast raster, nbands text, delimiter character) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_band(rast raster, nbands text, delimiter character) TO argo;
GRANT ALL ON FUNCTION st_band(rast raster, nbands text, delimiter character) TO aodn_dart;
GRANT ALL ON FUNCTION st_band(rast raster, nbands text, delimiter character) TO anmn_metadata;
GRANT ALL ON FUNCTION st_band(rast raster, nbands text, delimiter character) TO harvest_read_group;


--
-- Name: st_bandisnodata(raster, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_bandisnodata(rast raster, forcechecking boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, forcechecking boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, forcechecking boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, forcechecking boolean) TO soop;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, forcechecking boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, forcechecking boolean) TO argo;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, forcechecking boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, forcechecking boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, forcechecking boolean) TO harvest_read_group;


--
-- Name: st_bandisnodata(raster, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_bandisnodata(rast raster, band integer, forcechecking boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, band integer, forcechecking boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, band integer, forcechecking boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, band integer, forcechecking boolean) TO soop;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, band integer, forcechecking boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, band integer, forcechecking boolean) TO argo;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, band integer, forcechecking boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, band integer, forcechecking boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_bandisnodata(rast raster, band integer, forcechecking boolean) TO harvest_read_group;


--
-- Name: st_bandmetadata(raster, integer[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer[], OUT bandnum integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer[], OUT bandnum integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer[], OUT bandnum integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer[], OUT bandnum integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO soop;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer[], OUT bandnum integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer[], OUT bandnum integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO argo;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer[], OUT bandnum integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO aodn_dart;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer[], OUT bandnum integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer[], OUT bandnum integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO harvest_read_group;


--
-- Name: st_bandmetadata(raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO soop;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO argo;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO aodn_dart;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_bandmetadata(rast raster, band integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text) TO harvest_read_group;


--
-- Name: st_bandnodatavalue(raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_bandnodatavalue(rast raster, band integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_bandnodatavalue(rast raster, band integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_bandnodatavalue(rast raster, band integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_bandnodatavalue(rast raster, band integer) TO soop;
GRANT ALL ON FUNCTION st_bandnodatavalue(rast raster, band integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_bandnodatavalue(rast raster, band integer) TO argo;
GRANT ALL ON FUNCTION st_bandnodatavalue(rast raster, band integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_bandnodatavalue(rast raster, band integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_bandnodatavalue(rast raster, band integer) TO harvest_read_group;


--
-- Name: st_bandpath(raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_bandpath(rast raster, band integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_bandpath(rast raster, band integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_bandpath(rast raster, band integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_bandpath(rast raster, band integer) TO soop;
GRANT ALL ON FUNCTION st_bandpath(rast raster, band integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_bandpath(rast raster, band integer) TO argo;
GRANT ALL ON FUNCTION st_bandpath(rast raster, band integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_bandpath(rast raster, band integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_bandpath(rast raster, band integer) TO harvest_read_group;


--
-- Name: st_bandpixeltype(raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_bandpixeltype(rast raster, band integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_bandpixeltype(rast raster, band integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_bandpixeltype(rast raster, band integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_bandpixeltype(rast raster, band integer) TO soop;
GRANT ALL ON FUNCTION st_bandpixeltype(rast raster, band integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_bandpixeltype(rast raster, band integer) TO argo;
GRANT ALL ON FUNCTION st_bandpixeltype(rast raster, band integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_bandpixeltype(rast raster, band integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_bandpixeltype(rast raster, band integer) TO harvest_read_group;


--
-- Name: st_bdmpolyfromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_bdmpolyfromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_bdmpolyfromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_bdmpolyfromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_bdmpolyfromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_bdmpolyfromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_bdmpolyfromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_bdmpolyfromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_bdmpolyfromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_bdmpolyfromtext(text, integer) TO harvest_read_group;


--
-- Name: st_bdpolyfromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_bdpolyfromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_bdpolyfromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_bdpolyfromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_bdpolyfromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_bdpolyfromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_bdpolyfromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_bdpolyfromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_bdpolyfromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_bdpolyfromtext(text, integer) TO harvest_read_group;


--
-- Name: st_boundary(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_boundary(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_boundary(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_boundary(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_boundary(geometry) TO soop;
GRANT ALL ON FUNCTION st_boundary(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_boundary(geometry) TO argo;
GRANT ALL ON FUNCTION st_boundary(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_boundary(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_boundary(geometry) TO harvest_read_group;


--
-- Name: st_boundingdiagonal(geometry, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_boundingdiagonal(geom geometry, fits boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_boundingdiagonal(geom geometry, fits boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_boundingdiagonal(geom geometry, fits boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_boundingdiagonal(geom geometry, fits boolean) TO soop;
GRANT ALL ON FUNCTION st_boundingdiagonal(geom geometry, fits boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_boundingdiagonal(geom geometry, fits boolean) TO argo;
GRANT ALL ON FUNCTION st_boundingdiagonal(geom geometry, fits boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_boundingdiagonal(geom geometry, fits boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_boundingdiagonal(geom geometry, fits boolean) TO harvest_read_group;


--
-- Name: st_box2dfromgeohash(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_box2dfromgeohash(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_box2dfromgeohash(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_box2dfromgeohash(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_box2dfromgeohash(text, integer) TO soop;
GRANT ALL ON FUNCTION st_box2dfromgeohash(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_box2dfromgeohash(text, integer) TO argo;
GRANT ALL ON FUNCTION st_box2dfromgeohash(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_box2dfromgeohash(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_box2dfromgeohash(text, integer) TO harvest_read_group;


--
-- Name: st_buffer(text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_buffer(text, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_buffer(text, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_buffer(text, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_buffer(text, double precision) TO soop;
GRANT ALL ON FUNCTION st_buffer(text, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_buffer(text, double precision) TO argo;
GRANT ALL ON FUNCTION st_buffer(text, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_buffer(text, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_buffer(text, double precision) TO harvest_read_group;


--
-- Name: st_buffer(geography, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_buffer(geography, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_buffer(geography, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_buffer(geography, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_buffer(geography, double precision) TO soop;
GRANT ALL ON FUNCTION st_buffer(geography, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_buffer(geography, double precision) TO argo;
GRANT ALL ON FUNCTION st_buffer(geography, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_buffer(geography, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_buffer(geography, double precision) TO harvest_read_group;


--
-- Name: st_buffer(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_buffer(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision) TO harvest_read_group;


--
-- Name: st_buffer(text, double precision, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_buffer(text, double precision, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_buffer(text, double precision, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_buffer(text, double precision, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_buffer(text, double precision, integer) TO soop;
GRANT ALL ON FUNCTION st_buffer(text, double precision, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_buffer(text, double precision, integer) TO argo;
GRANT ALL ON FUNCTION st_buffer(text, double precision, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_buffer(text, double precision, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_buffer(text, double precision, integer) TO harvest_read_group;


--
-- Name: st_buffer(text, double precision, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_buffer(text, double precision, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_buffer(text, double precision, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_buffer(text, double precision, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_buffer(text, double precision, text) TO soop;
GRANT ALL ON FUNCTION st_buffer(text, double precision, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_buffer(text, double precision, text) TO argo;
GRANT ALL ON FUNCTION st_buffer(text, double precision, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_buffer(text, double precision, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_buffer(text, double precision, text) TO harvest_read_group;


--
-- Name: st_buffer(geography, double precision, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_buffer(geography, double precision, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, integer) TO soop;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, integer) TO argo;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, integer) TO harvest_read_group;


--
-- Name: st_buffer(geography, double precision, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_buffer(geography, double precision, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, text) TO soop;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, text) TO argo;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_buffer(geography, double precision, text) TO harvest_read_group;


--
-- Name: st_buffer(geometry, double precision, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_buffer(geometry, double precision, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, integer) TO soop;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, integer) TO argo;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, integer) TO harvest_read_group;


--
-- Name: st_buffer(geometry, double precision, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_buffer(geometry, double precision, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, text) TO soop;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, text) TO argo;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_buffer(geometry, double precision, text) TO harvest_read_group;


--
-- Name: st_buildarea(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_buildarea(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_buildarea(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_buildarea(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_buildarea(geometry) TO soop;
GRANT ALL ON FUNCTION st_buildarea(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_buildarea(geometry) TO argo;
GRANT ALL ON FUNCTION st_buildarea(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_buildarea(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_buildarea(geometry) TO harvest_read_group;


--
-- Name: st_centroid(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_centroid(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_centroid(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_centroid(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_centroid(geometry) TO soop;
GRANT ALL ON FUNCTION st_centroid(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_centroid(geometry) TO argo;
GRANT ALL ON FUNCTION st_centroid(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_centroid(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_centroid(geometry) TO harvest_read_group;


--
-- Name: st_cleangeometry(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_cleangeometry(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_cleangeometry(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_cleangeometry(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_cleangeometry(geometry) TO soop;
GRANT ALL ON FUNCTION st_cleangeometry(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_cleangeometry(geometry) TO argo;
GRANT ALL ON FUNCTION st_cleangeometry(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_cleangeometry(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_cleangeometry(geometry) TO harvest_read_group;


--
-- Name: st_clip(raster, geometry, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, crop boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, crop boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, crop boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, crop boolean) TO soop;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, crop boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, crop boolean) TO argo;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, crop boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, crop boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, crop boolean) TO harvest_read_group;


--
-- Name: st_clip(raster, integer, geometry, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, crop boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, crop boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, crop boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, crop boolean) TO soop;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, crop boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, crop boolean) TO argo;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, crop boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, crop boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, crop boolean) TO harvest_read_group;


--
-- Name: st_clip(raster, geometry, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision[], crop boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision[], crop boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision[], crop boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision[], crop boolean) TO soop;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision[], crop boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision[], crop boolean) TO argo;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision[], crop boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision[], crop boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision[], crop boolean) TO harvest_read_group;


--
-- Name: st_clip(raster, geometry, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision, crop boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision, crop boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision, crop boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision, crop boolean) TO soop;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision, crop boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision, crop boolean) TO argo;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision, crop boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision, crop boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_clip(rast raster, geom geometry, nodataval double precision, crop boolean) TO harvest_read_group;


--
-- Name: st_clip(raster, integer[], geometry, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO soop;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO argo;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[], crop boolean) TO harvest_read_group;


--
-- Name: st_clip(raster, integer, geometry, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, nodataval double precision, crop boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, nodataval double precision, crop boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, nodataval double precision, crop boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, nodataval double precision, crop boolean) TO soop;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, nodataval double precision, crop boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, nodataval double precision, crop boolean) TO argo;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, nodataval double precision, crop boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, nodataval double precision, crop boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_clip(rast raster, nband integer, geom geometry, nodataval double precision, crop boolean) TO harvest_read_group;


--
-- Name: st_clipbybox2d(geometry, box2d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_clipbybox2d(geom geometry, box box2d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_clipbybox2d(geom geometry, box box2d) TO harvest_write_group;
GRANT ALL ON FUNCTION st_clipbybox2d(geom geometry, box box2d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_clipbybox2d(geom geometry, box box2d) TO soop;
GRANT ALL ON FUNCTION st_clipbybox2d(geom geometry, box box2d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_clipbybox2d(geom geometry, box box2d) TO argo;
GRANT ALL ON FUNCTION st_clipbybox2d(geom geometry, box box2d) TO aodn_dart;
GRANT ALL ON FUNCTION st_clipbybox2d(geom geometry, box box2d) TO anmn_metadata;
GRANT ALL ON FUNCTION st_clipbybox2d(geom geometry, box box2d) TO harvest_read_group;


--
-- Name: st_closestpoint(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_closestpoint(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_closestpoint(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_closestpoint(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_closestpoint(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_closestpoint(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_closestpoint(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_closestpoint(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_closestpoint(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_closestpoint(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_closestpointofapproach(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_closestpointofapproach(geometry, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_closestpointofapproach(geometry, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_closestpointofapproach(geometry, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_closestpointofapproach(geometry, geometry) TO soop;
GRANT ALL ON FUNCTION st_closestpointofapproach(geometry, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_closestpointofapproach(geometry, geometry) TO argo;
GRANT ALL ON FUNCTION st_closestpointofapproach(geometry, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_closestpointofapproach(geometry, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_closestpointofapproach(geometry, geometry) TO harvest_read_group;


--
-- Name: st_clusterdbscan(geometry, double precision, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_clusterdbscan(geometry, eps double precision, minpoints integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_clusterdbscan(geometry, eps double precision, minpoints integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_clusterdbscan(geometry, eps double precision, minpoints integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_clusterdbscan(geometry, eps double precision, minpoints integer) TO soop;
GRANT ALL ON FUNCTION st_clusterdbscan(geometry, eps double precision, minpoints integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_clusterdbscan(geometry, eps double precision, minpoints integer) TO argo;
GRANT ALL ON FUNCTION st_clusterdbscan(geometry, eps double precision, minpoints integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_clusterdbscan(geometry, eps double precision, minpoints integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_clusterdbscan(geometry, eps double precision, minpoints integer) TO harvest_read_group;


--
-- Name: st_clusterintersecting(geometry[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_clusterintersecting(geometry[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry[]) TO soop;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry[]) TO argo;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry[]) TO harvest_read_group;


--
-- Name: st_clusterkmeans(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_clusterkmeans(geom geometry, k integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_clusterkmeans(geom geometry, k integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_clusterkmeans(geom geometry, k integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_clusterkmeans(geom geometry, k integer) TO soop;
GRANT ALL ON FUNCTION st_clusterkmeans(geom geometry, k integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_clusterkmeans(geom geometry, k integer) TO argo;
GRANT ALL ON FUNCTION st_clusterkmeans(geom geometry, k integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_clusterkmeans(geom geometry, k integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_clusterkmeans(geom geometry, k integer) TO harvest_read_group;


--
-- Name: st_clusterwithin(geometry[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_clusterwithin(geometry[], double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_clusterwithin(geometry[], double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_clusterwithin(geometry[], double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_clusterwithin(geometry[], double precision) TO soop;
GRANT ALL ON FUNCTION st_clusterwithin(geometry[], double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_clusterwithin(geometry[], double precision) TO argo;
GRANT ALL ON FUNCTION st_clusterwithin(geometry[], double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_clusterwithin(geometry[], double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_clusterwithin(geometry[], double precision) TO harvest_read_group;


--
-- Name: st_collect(geometry[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_collect(geometry[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_collect(geometry[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_collect(geometry[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_collect(geometry[]) TO soop;
GRANT ALL ON FUNCTION st_collect(geometry[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_collect(geometry[]) TO argo;
GRANT ALL ON FUNCTION st_collect(geometry[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_collect(geometry[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_collect(geometry[]) TO harvest_read_group;


--
-- Name: st_collect(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_collect(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_collect(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_collect(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_collect(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_collect(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_collect(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_collect(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_collect(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_collect(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_collectionextract(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_collectionextract(geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_collectionextract(geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_collectionextract(geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_collectionextract(geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_collectionextract(geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_collectionextract(geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_collectionextract(geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_collectionextract(geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_collectionextract(geometry, integer) TO harvest_read_group;


--
-- Name: st_collectionhomogenize(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_collectionhomogenize(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_collectionhomogenize(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_collectionhomogenize(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_collectionhomogenize(geometry) TO soop;
GRANT ALL ON FUNCTION st_collectionhomogenize(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_collectionhomogenize(geometry) TO argo;
GRANT ALL ON FUNCTION st_collectionhomogenize(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_collectionhomogenize(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_collectionhomogenize(geometry) TO harvest_read_group;


--
-- Name: st_colormap(raster, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_colormap(rast raster, colormap text, method text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_colormap(rast raster, colormap text, method text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_colormap(rast raster, colormap text, method text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_colormap(rast raster, colormap text, method text) TO soop;
GRANT ALL ON FUNCTION st_colormap(rast raster, colormap text, method text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_colormap(rast raster, colormap text, method text) TO argo;
GRANT ALL ON FUNCTION st_colormap(rast raster, colormap text, method text) TO aodn_dart;
GRANT ALL ON FUNCTION st_colormap(rast raster, colormap text, method text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_colormap(rast raster, colormap text, method text) TO harvest_read_group;


--
-- Name: st_colormap(raster, integer, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_colormap(rast raster, nband integer, colormap text, method text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_colormap(rast raster, nband integer, colormap text, method text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_colormap(rast raster, nband integer, colormap text, method text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_colormap(rast raster, nband integer, colormap text, method text) TO soop;
GRANT ALL ON FUNCTION st_colormap(rast raster, nband integer, colormap text, method text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_colormap(rast raster, nband integer, colormap text, method text) TO argo;
GRANT ALL ON FUNCTION st_colormap(rast raster, nband integer, colormap text, method text) TO aodn_dart;
GRANT ALL ON FUNCTION st_colormap(rast raster, nband integer, colormap text, method text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_colormap(rast raster, nband integer, colormap text, method text) TO harvest_read_group;


--
-- Name: st_combine_bbox(box2d, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_combine_bbox(box2d, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_combine_bbox(box2d, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_combine_bbox(box2d, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_combine_bbox(box2d, geometry) TO soop;
GRANT ALL ON FUNCTION st_combine_bbox(box2d, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_combine_bbox(box2d, geometry) TO argo;
GRANT ALL ON FUNCTION st_combine_bbox(box2d, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_combine_bbox(box2d, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_combine_bbox(box2d, geometry) TO harvest_read_group;


--
-- Name: st_combine_bbox(box3d, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_combine_bbox(box3d, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_combine_bbox(box3d, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_combine_bbox(box3d, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_combine_bbox(box3d, geometry) TO soop;
GRANT ALL ON FUNCTION st_combine_bbox(box3d, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_combine_bbox(box3d, geometry) TO argo;
GRANT ALL ON FUNCTION st_combine_bbox(box3d, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_combine_bbox(box3d, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_combine_bbox(box3d, geometry) TO harvest_read_group;


--
-- Name: st_combinebbox(box2d, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_combinebbox(box2d, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_combinebbox(box2d, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_combinebbox(box2d, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_combinebbox(box2d, geometry) TO soop;
GRANT ALL ON FUNCTION st_combinebbox(box2d, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_combinebbox(box2d, geometry) TO argo;
GRANT ALL ON FUNCTION st_combinebbox(box2d, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_combinebbox(box2d, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_combinebbox(box2d, geometry) TO harvest_read_group;


--
-- Name: st_combinebbox(box3d, box3d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_combinebbox(box3d, box3d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_combinebbox(box3d, box3d) TO harvest_write_group;
GRANT ALL ON FUNCTION st_combinebbox(box3d, box3d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_combinebbox(box3d, box3d) TO soop;
GRANT ALL ON FUNCTION st_combinebbox(box3d, box3d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_combinebbox(box3d, box3d) TO argo;
GRANT ALL ON FUNCTION st_combinebbox(box3d, box3d) TO aodn_dart;
GRANT ALL ON FUNCTION st_combinebbox(box3d, box3d) TO anmn_metadata;
GRANT ALL ON FUNCTION st_combinebbox(box3d, box3d) TO harvest_read_group;


--
-- Name: st_combinebbox(box3d, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_combinebbox(box3d, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_combinebbox(box3d, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_combinebbox(box3d, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_combinebbox(box3d, geometry) TO soop;
GRANT ALL ON FUNCTION st_combinebbox(box3d, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_combinebbox(box3d, geometry) TO argo;
GRANT ALL ON FUNCTION st_combinebbox(box3d, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_combinebbox(box3d, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_combinebbox(box3d, geometry) TO harvest_read_group;


--
-- Name: st_concavehull(geometry, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean) TO soop;
GRANT ALL ON FUNCTION st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean) TO argo;
GRANT ALL ON FUNCTION st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean) TO harvest_read_group;


--
-- Name: st_contains(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_contains(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_contains(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_contains(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_contains(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_contains(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_contains(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_contains(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_contains(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_contains(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_contains(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_contains(rast1 raster, rast2 raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_contains(rast1 raster, rast2 raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_contains(rast1 raster, rast2 raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_contains(rast1 raster, rast2 raster) TO soop;
GRANT ALL ON FUNCTION st_contains(rast1 raster, rast2 raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_contains(rast1 raster, rast2 raster) TO argo;
GRANT ALL ON FUNCTION st_contains(rast1 raster, rast2 raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_contains(rast1 raster, rast2 raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_contains(rast1 raster, rast2 raster) TO harvest_read_group;


--
-- Name: st_contains(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: st_containsproperly(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_containsproperly(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_containsproperly(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_containsproperly(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_containsproperly(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_containsproperly(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_containsproperly(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_containsproperly(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_containsproperly(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_containsproperly(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_containsproperly(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, rast2 raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, rast2 raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, rast2 raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, rast2 raster) TO soop;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, rast2 raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, rast2 raster) TO argo;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, rast2 raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, rast2 raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, rast2 raster) TO harvest_read_group;


--
-- Name: st_containsproperly(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: st_convexhull(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_convexhull(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_convexhull(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_convexhull(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_convexhull(geometry) TO soop;
GRANT ALL ON FUNCTION st_convexhull(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_convexhull(geometry) TO argo;
GRANT ALL ON FUNCTION st_convexhull(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_convexhull(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_convexhull(geometry) TO harvest_read_group;


--
-- Name: st_convexhull(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_convexhull(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_convexhull(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_convexhull(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_convexhull(raster) TO soop;
GRANT ALL ON FUNCTION st_convexhull(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_convexhull(raster) TO argo;
GRANT ALL ON FUNCTION st_convexhull(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_convexhull(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_convexhull(raster) TO harvest_read_group;


--
-- Name: st_coorddim(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_coorddim(geometry geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_coorddim(geometry geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_coorddim(geometry geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_coorddim(geometry geometry) TO soop;
GRANT ALL ON FUNCTION st_coorddim(geometry geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_coorddim(geometry geometry) TO argo;
GRANT ALL ON FUNCTION st_coorddim(geometry geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_coorddim(geometry geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_coorddim(geometry geometry) TO harvest_read_group;


--
-- Name: st_count(raster, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_count(rast raster, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_count(rast raster, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_count(rast raster, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_count(rast raster, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_count(rast raster, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_count(rast raster, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_count(rast raster, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_count(rast raster, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_count(rast raster, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_count(text, text, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_count(raster, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_count(rast raster, nband integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_count(rast raster, nband integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_count(rast raster, nband integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_count(rast raster, nband integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_count(rast raster, nband integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_count(rast raster, nband integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_count(rast raster, nband integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_count(rast raster, nband integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_count(rast raster, nband integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_count(text, text, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_count(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_coveredby(text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_coveredby(text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_coveredby(text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_coveredby(text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_coveredby(text, text) TO soop;
GRANT ALL ON FUNCTION st_coveredby(text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_coveredby(text, text) TO argo;
GRANT ALL ON FUNCTION st_coveredby(text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_coveredby(text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_coveredby(text, text) TO harvest_read_group;


--
-- Name: st_coveredby(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_coveredby(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_coveredby(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION st_coveredby(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_coveredby(geography, geography) TO soop;
GRANT ALL ON FUNCTION st_coveredby(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_coveredby(geography, geography) TO argo;
GRANT ALL ON FUNCTION st_coveredby(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION st_coveredby(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION st_coveredby(geography, geography) TO harvest_read_group;


--
-- Name: st_coveredby(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_coveredby(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_coveredby(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_coveredby(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_coveredby(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_coveredby(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_coveredby(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_coveredby(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_coveredby(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_coveredby(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_coveredby(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_coveredby(rast1 raster, rast2 raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, rast2 raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, rast2 raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, rast2 raster) TO soop;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, rast2 raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, rast2 raster) TO argo;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, rast2 raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, rast2 raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, rast2 raster) TO harvest_read_group;


--
-- Name: st_coveredby(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: st_covers(text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_covers(text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_covers(text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_covers(text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_covers(text, text) TO soop;
GRANT ALL ON FUNCTION st_covers(text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_covers(text, text) TO argo;
GRANT ALL ON FUNCTION st_covers(text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_covers(text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_covers(text, text) TO harvest_read_group;


--
-- Name: st_covers(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_covers(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_covers(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION st_covers(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_covers(geography, geography) TO soop;
GRANT ALL ON FUNCTION st_covers(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_covers(geography, geography) TO argo;
GRANT ALL ON FUNCTION st_covers(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION st_covers(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION st_covers(geography, geography) TO harvest_read_group;


--
-- Name: st_covers(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_covers(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_covers(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_covers(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_covers(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_covers(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_covers(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_covers(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_covers(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_covers(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_covers(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_covers(rast1 raster, rast2 raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_covers(rast1 raster, rast2 raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_covers(rast1 raster, rast2 raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_covers(rast1 raster, rast2 raster) TO soop;
GRANT ALL ON FUNCTION st_covers(rast1 raster, rast2 raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_covers(rast1 raster, rast2 raster) TO argo;
GRANT ALL ON FUNCTION st_covers(rast1 raster, rast2 raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_covers(rast1 raster, rast2 raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_covers(rast1 raster, rast2 raster) TO harvest_read_group;


--
-- Name: st_covers(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: st_cpawithin(geometry, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_cpawithin(geometry, geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_cpawithin(geometry, geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_cpawithin(geometry, geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_cpawithin(geometry, geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_cpawithin(geometry, geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_cpawithin(geometry, geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_cpawithin(geometry, geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_cpawithin(geometry, geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_cpawithin(geometry, geometry, double precision) TO harvest_read_group;


--
-- Name: st_createfishnet(integer, integer, double precision, double precision, double precision, double precision, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_createfishnet(p_nrow integer, p_ncol integer, p_xsize double precision, p_ysize double precision, p_x0 double precision, p_y0 double precision, p_srid integer, OUT "row" integer, OUT col integer, OUT cell geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_createfishnet(p_nrow integer, p_ncol integer, p_xsize double precision, p_ysize double precision, p_x0 double precision, p_y0 double precision, p_srid integer, OUT "row" integer, OUT col integer, OUT cell geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_createfishnet(p_nrow integer, p_ncol integer, p_xsize double precision, p_ysize double precision, p_x0 double precision, p_y0 double precision, p_srid integer, OUT "row" integer, OUT col integer, OUT cell geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_createfishnet(p_nrow integer, p_ncol integer, p_xsize double precision, p_ysize double precision, p_x0 double precision, p_y0 double precision, p_srid integer, OUT "row" integer, OUT col integer, OUT cell geometry) TO soop;
GRANT ALL ON FUNCTION st_createfishnet(p_nrow integer, p_ncol integer, p_xsize double precision, p_ysize double precision, p_x0 double precision, p_y0 double precision, p_srid integer, OUT "row" integer, OUT col integer, OUT cell geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_createfishnet(p_nrow integer, p_ncol integer, p_xsize double precision, p_ysize double precision, p_x0 double precision, p_y0 double precision, p_srid integer, OUT "row" integer, OUT col integer, OUT cell geometry) TO argo;
GRANT ALL ON FUNCTION st_createfishnet(p_nrow integer, p_ncol integer, p_xsize double precision, p_ysize double precision, p_x0 double precision, p_y0 double precision, p_srid integer, OUT "row" integer, OUT col integer, OUT cell geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_createfishnet(p_nrow integer, p_ncol integer, p_xsize double precision, p_ysize double precision, p_x0 double precision, p_y0 double precision, p_srid integer, OUT "row" integer, OUT col integer, OUT cell geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_createfishnet(p_nrow integer, p_ncol integer, p_xsize double precision, p_ysize double precision, p_x0 double precision, p_y0 double precision, p_srid integer, OUT "row" integer, OUT col integer, OUT cell geometry) TO harvest_read_group;


--
-- Name: st_createoverview(regclass, name, integer, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_createoverview(tab regclass, col name, factor integer, algo text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_createoverview(tab regclass, col name, factor integer, algo text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_createoverview(tab regclass, col name, factor integer, algo text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_createoverview(tab regclass, col name, factor integer, algo text) TO soop;
GRANT ALL ON FUNCTION st_createoverview(tab regclass, col name, factor integer, algo text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_createoverview(tab regclass, col name, factor integer, algo text) TO argo;
GRANT ALL ON FUNCTION st_createoverview(tab regclass, col name, factor integer, algo text) TO aodn_dart;
GRANT ALL ON FUNCTION st_createoverview(tab regclass, col name, factor integer, algo text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_createoverview(tab regclass, col name, factor integer, algo text) TO harvest_read_group;


--
-- Name: st_crosses(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_crosses(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_crosses(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_crosses(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_crosses(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_crosses(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_crosses(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_crosses(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_crosses(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_crosses(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_curvetoline(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_curvetoline(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_curvetoline(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_curvetoline(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_curvetoline(geometry) TO soop;
GRANT ALL ON FUNCTION st_curvetoline(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_curvetoline(geometry) TO argo;
GRANT ALL ON FUNCTION st_curvetoline(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_curvetoline(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_curvetoline(geometry) TO harvest_read_group;


--
-- Name: st_curvetoline(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_curvetoline(geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_curvetoline(geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_curvetoline(geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_curvetoline(geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_curvetoline(geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_curvetoline(geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_curvetoline(geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_curvetoline(geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_curvetoline(geometry, integer) TO harvest_read_group;


--
-- Name: st_delaunaytriangles(geometry, double precision, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_delaunaytriangles(g1 geometry, tolerance double precision, flags integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_delaunaytriangles(g1 geometry, tolerance double precision, flags integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_delaunaytriangles(g1 geometry, tolerance double precision, flags integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_delaunaytriangles(g1 geometry, tolerance double precision, flags integer) TO soop;
GRANT ALL ON FUNCTION st_delaunaytriangles(g1 geometry, tolerance double precision, flags integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_delaunaytriangles(g1 geometry, tolerance double precision, flags integer) TO argo;
GRANT ALL ON FUNCTION st_delaunaytriangles(g1 geometry, tolerance double precision, flags integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_delaunaytriangles(g1 geometry, tolerance double precision, flags integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_delaunaytriangles(g1 geometry, tolerance double precision, flags integer) TO harvest_read_group;


--
-- Name: st_dfullywithin(geometry, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dfullywithin(geom1 geometry, geom2 geometry, double precision) TO harvest_read_group;


--
-- Name: st_dfullywithin(raster, raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, rast2 raster, distance double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, rast2 raster, distance double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, rast2 raster, distance double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, rast2 raster, distance double precision) TO soop;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, rast2 raster, distance double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, rast2 raster, distance double precision) TO argo;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, rast2 raster, distance double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, rast2 raster, distance double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, rast2 raster, distance double precision) TO harvest_read_group;


--
-- Name: st_dfullywithin(raster, integer, raster, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO soop;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO argo;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO harvest_read_group;


--
-- Name: st_difference(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_difference(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_difference(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_difference(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_difference(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_difference(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_difference(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_difference(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_difference(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_difference(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_dimension(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dimension(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dimension(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dimension(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dimension(geometry) TO soop;
GRANT ALL ON FUNCTION st_dimension(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dimension(geometry) TO argo;
GRANT ALL ON FUNCTION st_dimension(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_dimension(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dimension(geometry) TO harvest_read_group;


--
-- Name: st_disjoint(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_disjoint(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_disjoint(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_disjoint(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_disjoint(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_disjoint(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_disjoint(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_disjoint(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_disjoint(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_disjoint(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_disjoint(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_disjoint(rast1 raster, rast2 raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, rast2 raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, rast2 raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, rast2 raster) TO soop;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, rast2 raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, rast2 raster) TO argo;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, rast2 raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, rast2 raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, rast2 raster) TO harvest_read_group;


--
-- Name: st_disjoint(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_disjoint(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_disjoint(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: st_distance(text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_distance(text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_distance(text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_distance(text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_distance(text, text) TO soop;
GRANT ALL ON FUNCTION st_distance(text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_distance(text, text) TO argo;
GRANT ALL ON FUNCTION st_distance(text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_distance(text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_distance(text, text) TO harvest_read_group;


--
-- Name: st_distance(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_distance(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_distance(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION st_distance(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_distance(geography, geography) TO soop;
GRANT ALL ON FUNCTION st_distance(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_distance(geography, geography) TO argo;
GRANT ALL ON FUNCTION st_distance(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION st_distance(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION st_distance(geography, geography) TO harvest_read_group;


--
-- Name: st_distance(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_distance(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_distance(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_distance(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_distance(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_distance(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_distance(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_distance(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_distance(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_distance(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_distance(geography, geography, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_distance(geography, geography, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_distance(geography, geography, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_distance(geography, geography, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_distance(geography, geography, boolean) TO soop;
GRANT ALL ON FUNCTION st_distance(geography, geography, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_distance(geography, geography, boolean) TO argo;
GRANT ALL ON FUNCTION st_distance(geography, geography, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_distance(geography, geography, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_distance(geography, geography, boolean) TO harvest_read_group;


--
-- Name: st_distance_sphere(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_distance_sphere(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_distance_sphere(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_distance_sphere(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_distance_sphere(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_distance_sphere(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_distance_sphere(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_distance_sphere(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_distance_sphere(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_distance_sphere(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_distance_spheroid(geometry, geometry, spheroid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_distance_spheroid(geom1 geometry, geom2 geometry, spheroid) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_distance_spheroid(geom1 geometry, geom2 geometry, spheroid) TO harvest_write_group;
GRANT ALL ON FUNCTION st_distance_spheroid(geom1 geometry, geom2 geometry, spheroid) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_distance_spheroid(geom1 geometry, geom2 geometry, spheroid) TO soop;
GRANT ALL ON FUNCTION st_distance_spheroid(geom1 geometry, geom2 geometry, spheroid) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_distance_spheroid(geom1 geometry, geom2 geometry, spheroid) TO argo;
GRANT ALL ON FUNCTION st_distance_spheroid(geom1 geometry, geom2 geometry, spheroid) TO aodn_dart;
GRANT ALL ON FUNCTION st_distance_spheroid(geom1 geometry, geom2 geometry, spheroid) TO anmn_metadata;
GRANT ALL ON FUNCTION st_distance_spheroid(geom1 geometry, geom2 geometry, spheroid) TO harvest_read_group;


--
-- Name: st_distancecpa(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_distancecpa(geometry, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_distancecpa(geometry, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_distancecpa(geometry, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_distancecpa(geometry, geometry) TO soop;
GRANT ALL ON FUNCTION st_distancecpa(geometry, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_distancecpa(geometry, geometry) TO argo;
GRANT ALL ON FUNCTION st_distancecpa(geometry, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_distancecpa(geometry, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_distancecpa(geometry, geometry) TO harvest_read_group;


--
-- Name: st_distancesphere(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_distancesphere(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_distancesphere(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_distancesphere(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_distancesphere(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_distancesphere(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_distancesphere(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_distancesphere(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_distancesphere(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_distancesphere(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_distancespheroid(geometry, geometry, spheroid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_distancespheroid(geom1 geometry, geom2 geometry, spheroid) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_distancespheroid(geom1 geometry, geom2 geometry, spheroid) TO harvest_write_group;
GRANT ALL ON FUNCTION st_distancespheroid(geom1 geometry, geom2 geometry, spheroid) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_distancespheroid(geom1 geometry, geom2 geometry, spheroid) TO soop;
GRANT ALL ON FUNCTION st_distancespheroid(geom1 geometry, geom2 geometry, spheroid) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_distancespheroid(geom1 geometry, geom2 geometry, spheroid) TO argo;
GRANT ALL ON FUNCTION st_distancespheroid(geom1 geometry, geom2 geometry, spheroid) TO aodn_dart;
GRANT ALL ON FUNCTION st_distancespheroid(geom1 geometry, geom2 geometry, spheroid) TO anmn_metadata;
GRANT ALL ON FUNCTION st_distancespheroid(geom1 geometry, geom2 geometry, spheroid) TO harvest_read_group;


--
-- Name: st_distinct4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_distinct4ma(double precision[], text, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO soop;
GRANT ALL ON FUNCTION st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO argo;
GRANT ALL ON FUNCTION st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_read_group;


--
-- Name: st_dump(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dump(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dump(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dump(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dump(geometry) TO soop;
GRANT ALL ON FUNCTION st_dump(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dump(geometry) TO argo;
GRANT ALL ON FUNCTION st_dump(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_dump(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dump(geometry) TO harvest_read_group;


--
-- Name: st_dumpaspolygons(raster, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dumpaspolygons(rast raster, band integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dumpaspolygons(rast raster, band integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dumpaspolygons(rast raster, band integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dumpaspolygons(rast raster, band integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_dumpaspolygons(rast raster, band integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dumpaspolygons(rast raster, band integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_dumpaspolygons(rast raster, band integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_dumpaspolygons(rast raster, band integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dumpaspolygons(rast raster, band integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_dumppoints(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dumppoints(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dumppoints(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dumppoints(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dumppoints(geometry) TO soop;
GRANT ALL ON FUNCTION st_dumppoints(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dumppoints(geometry) TO argo;
GRANT ALL ON FUNCTION st_dumppoints(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_dumppoints(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dumppoints(geometry) TO harvest_read_group;


--
-- Name: st_dumprings(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dumprings(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dumprings(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dumprings(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dumprings(geometry) TO soop;
GRANT ALL ON FUNCTION st_dumprings(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dumprings(geometry) TO argo;
GRANT ALL ON FUNCTION st_dumprings(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_dumprings(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dumprings(geometry) TO harvest_read_group;


--
-- Name: st_dumpvalues(raster, integer[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer[], exclude_nodata_value boolean, OUT nband integer, OUT valarray double precision[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer[], exclude_nodata_value boolean, OUT nband integer, OUT valarray double precision[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer[], exclude_nodata_value boolean, OUT nband integer, OUT valarray double precision[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer[], exclude_nodata_value boolean, OUT nband integer, OUT valarray double precision[]) TO soop;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer[], exclude_nodata_value boolean, OUT nband integer, OUT valarray double precision[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer[], exclude_nodata_value boolean, OUT nband integer, OUT valarray double precision[]) TO argo;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer[], exclude_nodata_value boolean, OUT nband integer, OUT valarray double precision[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer[], exclude_nodata_value boolean, OUT nband integer, OUT valarray double precision[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer[], exclude_nodata_value boolean, OUT nband integer, OUT valarray double precision[]) TO harvest_read_group;


--
-- Name: st_dumpvalues(raster, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dumpvalues(rast raster, nband integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_dwithin(text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dwithin(text, text, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dwithin(text, text, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dwithin(text, text, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dwithin(text, text, double precision) TO soop;
GRANT ALL ON FUNCTION st_dwithin(text, text, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dwithin(text, text, double precision) TO argo;
GRANT ALL ON FUNCTION st_dwithin(text, text, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_dwithin(text, text, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dwithin(text, text, double precision) TO harvest_read_group;


--
-- Name: st_dwithin(geography, geography, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision) TO soop;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision) TO argo;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision) TO harvest_read_group;


--
-- Name: st_dwithin(geometry, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dwithin(geom1 geometry, geom2 geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dwithin(geom1 geometry, geom2 geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dwithin(geom1 geometry, geom2 geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dwithin(geom1 geometry, geom2 geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_dwithin(geom1 geometry, geom2 geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dwithin(geom1 geometry, geom2 geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_dwithin(geom1 geometry, geom2 geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_dwithin(geom1 geometry, geom2 geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dwithin(geom1 geometry, geom2 geometry, double precision) TO harvest_read_group;


--
-- Name: st_dwithin(raster, raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dwithin(rast1 raster, rast2 raster, distance double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, rast2 raster, distance double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, rast2 raster, distance double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, rast2 raster, distance double precision) TO soop;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, rast2 raster, distance double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, rast2 raster, distance double precision) TO argo;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, rast2 raster, distance double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, rast2 raster, distance double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, rast2 raster, distance double precision) TO harvest_read_group;


--
-- Name: st_dwithin(geography, geography, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision, boolean) TO soop;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision, boolean) TO argo;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dwithin(geography, geography, double precision, boolean) TO harvest_read_group;


--
-- Name: st_dwithin(raster, integer, raster, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO soop;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO argo;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision) TO harvest_read_group;


--
-- Name: st_endpoint(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_endpoint(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_endpoint(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_endpoint(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_endpoint(geometry) TO soop;
GRANT ALL ON FUNCTION st_endpoint(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_endpoint(geometry) TO argo;
GRANT ALL ON FUNCTION st_endpoint(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_endpoint(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_endpoint(geometry) TO harvest_read_group;


--
-- Name: st_envelope(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_envelope(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_envelope(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_envelope(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_envelope(geometry) TO soop;
GRANT ALL ON FUNCTION st_envelope(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_envelope(geometry) TO argo;
GRANT ALL ON FUNCTION st_envelope(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_envelope(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_envelope(geometry) TO harvest_read_group;


--
-- Name: st_envelope(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_envelope(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_envelope(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_envelope(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_envelope(raster) TO soop;
GRANT ALL ON FUNCTION st_envelope(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_envelope(raster) TO argo;
GRANT ALL ON FUNCTION st_envelope(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_envelope(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_envelope(raster) TO harvest_read_group;


--
-- Name: st_equals(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_equals(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_equals(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_equals(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_equals(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_equals(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_equals(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_equals(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_equals(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_equals(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_estimated_extent(text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_estimated_extent(text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_estimated_extent(text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_estimated_extent(text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_estimated_extent(text, text) TO soop;
GRANT ALL ON FUNCTION st_estimated_extent(text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_estimated_extent(text, text) TO argo;
GRANT ALL ON FUNCTION st_estimated_extent(text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_estimated_extent(text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_estimated_extent(text, text) TO harvest_read_group;


--
-- Name: st_estimated_extent(text, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_estimated_extent(text, text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_estimated_extent(text, text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_estimated_extent(text, text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_estimated_extent(text, text, text) TO soop;
GRANT ALL ON FUNCTION st_estimated_extent(text, text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_estimated_extent(text, text, text) TO argo;
GRANT ALL ON FUNCTION st_estimated_extent(text, text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_estimated_extent(text, text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_estimated_extent(text, text, text) TO harvest_read_group;


--
-- Name: st_estimatedextent(text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_estimatedextent(text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_estimatedextent(text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_estimatedextent(text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_estimatedextent(text, text) TO soop;
GRANT ALL ON FUNCTION st_estimatedextent(text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_estimatedextent(text, text) TO argo;
GRANT ALL ON FUNCTION st_estimatedextent(text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_estimatedextent(text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_estimatedextent(text, text) TO harvest_read_group;


--
-- Name: st_estimatedextent(text, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_estimatedextent(text, text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text) TO soop;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text) TO argo;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text) TO harvest_read_group;


--
-- Name: st_estimatedextent(text, text, text, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_estimatedextent(text, text, text, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text, boolean) TO soop;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text, boolean) TO argo;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_estimatedextent(text, text, text, boolean) TO harvest_read_group;


--
-- Name: st_expand(box2d, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_expand(box2d, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_expand(box2d, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_expand(box2d, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_expand(box2d, double precision) TO soop;
GRANT ALL ON FUNCTION st_expand(box2d, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_expand(box2d, double precision) TO argo;
GRANT ALL ON FUNCTION st_expand(box2d, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_expand(box2d, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_expand(box2d, double precision) TO harvest_read_group;


--
-- Name: st_expand(box3d, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_expand(box3d, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_expand(box3d, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_expand(box3d, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_expand(box3d, double precision) TO soop;
GRANT ALL ON FUNCTION st_expand(box3d, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_expand(box3d, double precision) TO argo;
GRANT ALL ON FUNCTION st_expand(box3d, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_expand(box3d, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_expand(box3d, double precision) TO harvest_read_group;


--
-- Name: st_expand(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_expand(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_expand(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_expand(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_expand(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_expand(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_expand(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_expand(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_expand(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_expand(geometry, double precision) TO harvest_read_group;


--
-- Name: st_expand(box2d, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_expand(box box2d, dx double precision, dy double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_expand(box box2d, dx double precision, dy double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_expand(box box2d, dx double precision, dy double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_expand(box box2d, dx double precision, dy double precision) TO soop;
GRANT ALL ON FUNCTION st_expand(box box2d, dx double precision, dy double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_expand(box box2d, dx double precision, dy double precision) TO argo;
GRANT ALL ON FUNCTION st_expand(box box2d, dx double precision, dy double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_expand(box box2d, dx double precision, dy double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_expand(box box2d, dx double precision, dy double precision) TO harvest_read_group;


--
-- Name: st_expand(box3d, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_expand(box box3d, dx double precision, dy double precision, dz double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_expand(box box3d, dx double precision, dy double precision, dz double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_expand(box box3d, dx double precision, dy double precision, dz double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_expand(box box3d, dx double precision, dy double precision, dz double precision) TO soop;
GRANT ALL ON FUNCTION st_expand(box box3d, dx double precision, dy double precision, dz double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_expand(box box3d, dx double precision, dy double precision, dz double precision) TO argo;
GRANT ALL ON FUNCTION st_expand(box box3d, dx double precision, dy double precision, dz double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_expand(box box3d, dx double precision, dy double precision, dz double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_expand(box box3d, dx double precision, dy double precision, dz double precision) TO harvest_read_group;


--
-- Name: st_expand(geometry, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_expand(geom geometry, dx double precision, dy double precision, dz double precision, dm double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_expand(geom geometry, dx double precision, dy double precision, dz double precision, dm double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_expand(geom geometry, dx double precision, dy double precision, dz double precision, dm double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_expand(geom geometry, dx double precision, dy double precision, dz double precision, dm double precision) TO soop;
GRANT ALL ON FUNCTION st_expand(geom geometry, dx double precision, dy double precision, dz double precision, dm double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_expand(geom geometry, dx double precision, dy double precision, dz double precision, dm double precision) TO argo;
GRANT ALL ON FUNCTION st_expand(geom geometry, dx double precision, dy double precision, dz double precision, dm double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_expand(geom geometry, dx double precision, dy double precision, dz double precision, dm double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_expand(geom geometry, dx double precision, dy double precision, dz double precision, dm double precision) TO harvest_read_group;


--
-- Name: st_exteriorring(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_exteriorring(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_exteriorring(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_exteriorring(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_exteriorring(geometry) TO soop;
GRANT ALL ON FUNCTION st_exteriorring(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_exteriorring(geometry) TO argo;
GRANT ALL ON FUNCTION st_exteriorring(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_exteriorring(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_exteriorring(geometry) TO harvest_read_group;


--
-- Name: st_find_extent(text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_find_extent(text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_find_extent(text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_find_extent(text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_find_extent(text, text) TO soop;
GRANT ALL ON FUNCTION st_find_extent(text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_find_extent(text, text) TO argo;
GRANT ALL ON FUNCTION st_find_extent(text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_find_extent(text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_find_extent(text, text) TO harvest_read_group;


--
-- Name: st_find_extent(text, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_find_extent(text, text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_find_extent(text, text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_find_extent(text, text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_find_extent(text, text, text) TO soop;
GRANT ALL ON FUNCTION st_find_extent(text, text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_find_extent(text, text, text) TO argo;
GRANT ALL ON FUNCTION st_find_extent(text, text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_find_extent(text, text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_find_extent(text, text, text) TO harvest_read_group;


--
-- Name: st_findextent(text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_findextent(text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_findextent(text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_findextent(text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_findextent(text, text) TO soop;
GRANT ALL ON FUNCTION st_findextent(text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_findextent(text, text) TO argo;
GRANT ALL ON FUNCTION st_findextent(text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_findextent(text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_findextent(text, text) TO harvest_read_group;


--
-- Name: st_findextent(text, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_findextent(text, text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_findextent(text, text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_findextent(text, text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_findextent(text, text, text) TO soop;
GRANT ALL ON FUNCTION st_findextent(text, text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_findextent(text, text, text) TO argo;
GRANT ALL ON FUNCTION st_findextent(text, text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_findextent(text, text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_findextent(text, text, text) TO harvest_read_group;


--
-- Name: st_flipcoordinates(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_flipcoordinates(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_flipcoordinates(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_flipcoordinates(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_flipcoordinates(geometry) TO soop;
GRANT ALL ON FUNCTION st_flipcoordinates(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_flipcoordinates(geometry) TO argo;
GRANT ALL ON FUNCTION st_flipcoordinates(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_flipcoordinates(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_flipcoordinates(geometry) TO harvest_read_group;


--
-- Name: st_force2d(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_force2d(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_force2d(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_force2d(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_force2d(geometry) TO soop;
GRANT ALL ON FUNCTION st_force2d(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_force2d(geometry) TO argo;
GRANT ALL ON FUNCTION st_force2d(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_force2d(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_force2d(geometry) TO harvest_read_group;


--
-- Name: st_force3d(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_force3d(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_force3d(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_force3d(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_force3d(geometry) TO soop;
GRANT ALL ON FUNCTION st_force3d(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_force3d(geometry) TO argo;
GRANT ALL ON FUNCTION st_force3d(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_force3d(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_force3d(geometry) TO harvest_read_group;


--
-- Name: st_force3dm(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_force3dm(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_force3dm(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_force3dm(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_force3dm(geometry) TO soop;
GRANT ALL ON FUNCTION st_force3dm(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_force3dm(geometry) TO argo;
GRANT ALL ON FUNCTION st_force3dm(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_force3dm(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_force3dm(geometry) TO harvest_read_group;


--
-- Name: st_force3dz(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_force3dz(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_force3dz(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_force3dz(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_force3dz(geometry) TO soop;
GRANT ALL ON FUNCTION st_force3dz(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_force3dz(geometry) TO argo;
GRANT ALL ON FUNCTION st_force3dz(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_force3dz(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_force3dz(geometry) TO harvest_read_group;


--
-- Name: st_force4d(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_force4d(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_force4d(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_force4d(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_force4d(geometry) TO soop;
GRANT ALL ON FUNCTION st_force4d(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_force4d(geometry) TO argo;
GRANT ALL ON FUNCTION st_force4d(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_force4d(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_force4d(geometry) TO harvest_read_group;


--
-- Name: st_force_2d(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_force_2d(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_force_2d(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_force_2d(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_force_2d(geometry) TO soop;
GRANT ALL ON FUNCTION st_force_2d(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_force_2d(geometry) TO argo;
GRANT ALL ON FUNCTION st_force_2d(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_force_2d(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_force_2d(geometry) TO harvest_read_group;


--
-- Name: st_force_3d(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_force_3d(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_force_3d(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_force_3d(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_force_3d(geometry) TO soop;
GRANT ALL ON FUNCTION st_force_3d(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_force_3d(geometry) TO argo;
GRANT ALL ON FUNCTION st_force_3d(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_force_3d(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_force_3d(geometry) TO harvest_read_group;


--
-- Name: st_force_3dm(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_force_3dm(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_force_3dm(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_force_3dm(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_force_3dm(geometry) TO soop;
GRANT ALL ON FUNCTION st_force_3dm(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_force_3dm(geometry) TO argo;
GRANT ALL ON FUNCTION st_force_3dm(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_force_3dm(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_force_3dm(geometry) TO harvest_read_group;


--
-- Name: st_force_3dz(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_force_3dz(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_force_3dz(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_force_3dz(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_force_3dz(geometry) TO soop;
GRANT ALL ON FUNCTION st_force_3dz(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_force_3dz(geometry) TO argo;
GRANT ALL ON FUNCTION st_force_3dz(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_force_3dz(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_force_3dz(geometry) TO harvest_read_group;


--
-- Name: st_force_4d(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_force_4d(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_force_4d(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_force_4d(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_force_4d(geometry) TO soop;
GRANT ALL ON FUNCTION st_force_4d(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_force_4d(geometry) TO argo;
GRANT ALL ON FUNCTION st_force_4d(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_force_4d(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_force_4d(geometry) TO harvest_read_group;


--
-- Name: st_force_collection(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_force_collection(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_force_collection(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_force_collection(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_force_collection(geometry) TO soop;
GRANT ALL ON FUNCTION st_force_collection(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_force_collection(geometry) TO argo;
GRANT ALL ON FUNCTION st_force_collection(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_force_collection(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_force_collection(geometry) TO harvest_read_group;


--
-- Name: st_forcecollection(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_forcecollection(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_forcecollection(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_forcecollection(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_forcecollection(geometry) TO soop;
GRANT ALL ON FUNCTION st_forcecollection(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_forcecollection(geometry) TO argo;
GRANT ALL ON FUNCTION st_forcecollection(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_forcecollection(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_forcecollection(geometry) TO harvest_read_group;


--
-- Name: st_forcecurve(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_forcecurve(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_forcecurve(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_forcecurve(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_forcecurve(geometry) TO soop;
GRANT ALL ON FUNCTION st_forcecurve(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_forcecurve(geometry) TO argo;
GRANT ALL ON FUNCTION st_forcecurve(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_forcecurve(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_forcecurve(geometry) TO harvest_read_group;


--
-- Name: st_forcerhr(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_forcerhr(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_forcerhr(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_forcerhr(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_forcerhr(geometry) TO soop;
GRANT ALL ON FUNCTION st_forcerhr(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_forcerhr(geometry) TO argo;
GRANT ALL ON FUNCTION st_forcerhr(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_forcerhr(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_forcerhr(geometry) TO harvest_read_group;


--
-- Name: st_forcesfs(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_forcesfs(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_forcesfs(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_forcesfs(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_forcesfs(geometry) TO soop;
GRANT ALL ON FUNCTION st_forcesfs(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_forcesfs(geometry) TO argo;
GRANT ALL ON FUNCTION st_forcesfs(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_forcesfs(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_forcesfs(geometry) TO harvest_read_group;


--
-- Name: st_forcesfs(geometry, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_forcesfs(geometry, version text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_forcesfs(geometry, version text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_forcesfs(geometry, version text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_forcesfs(geometry, version text) TO soop;
GRANT ALL ON FUNCTION st_forcesfs(geometry, version text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_forcesfs(geometry, version text) TO argo;
GRANT ALL ON FUNCTION st_forcesfs(geometry, version text) TO aodn_dart;
GRANT ALL ON FUNCTION st_forcesfs(geometry, version text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_forcesfs(geometry, version text) TO harvest_read_group;


--
-- Name: st_fromgdalraster(bytea, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_fromgdalraster(gdaldata bytea, srid integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_fromgdalraster(gdaldata bytea, srid integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_fromgdalraster(gdaldata bytea, srid integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_fromgdalraster(gdaldata bytea, srid integer) TO soop;
GRANT ALL ON FUNCTION st_fromgdalraster(gdaldata bytea, srid integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_fromgdalraster(gdaldata bytea, srid integer) TO argo;
GRANT ALL ON FUNCTION st_fromgdalraster(gdaldata bytea, srid integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_fromgdalraster(gdaldata bytea, srid integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_fromgdalraster(gdaldata bytea, srid integer) TO harvest_read_group;


--
-- Name: st_gdaldrivers(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT create_options text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT create_options text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT create_options text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT create_options text) TO soop;
GRANT ALL ON FUNCTION st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT create_options text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT create_options text) TO argo;
GRANT ALL ON FUNCTION st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT create_options text) TO aodn_dart;
GRANT ALL ON FUNCTION st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT create_options text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT create_options text) TO harvest_read_group;


--
-- Name: st_generatepoints(geometry, numeric); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_generatepoints(area geometry, npoints numeric) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_generatepoints(area geometry, npoints numeric) TO harvest_write_group;
GRANT ALL ON FUNCTION st_generatepoints(area geometry, npoints numeric) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_generatepoints(area geometry, npoints numeric) TO soop;
GRANT ALL ON FUNCTION st_generatepoints(area geometry, npoints numeric) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_generatepoints(area geometry, npoints numeric) TO argo;
GRANT ALL ON FUNCTION st_generatepoints(area geometry, npoints numeric) TO aodn_dart;
GRANT ALL ON FUNCTION st_generatepoints(area geometry, npoints numeric) TO anmn_metadata;
GRANT ALL ON FUNCTION st_generatepoints(area geometry, npoints numeric) TO harvest_read_group;


--
-- Name: st_geogfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geogfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geogfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geogfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geogfromtext(text) TO soop;
GRANT ALL ON FUNCTION st_geogfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geogfromtext(text) TO argo;
GRANT ALL ON FUNCTION st_geogfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_geogfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geogfromtext(text) TO harvest_read_group;


--
-- Name: st_geogfromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geogfromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geogfromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geogfromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geogfromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_geogfromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geogfromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_geogfromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_geogfromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geogfromwkb(bytea) TO harvest_read_group;


--
-- Name: st_geographyfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geographyfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geographyfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geographyfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geographyfromtext(text) TO soop;
GRANT ALL ON FUNCTION st_geographyfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geographyfromtext(text) TO argo;
GRANT ALL ON FUNCTION st_geographyfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_geographyfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geographyfromtext(text) TO harvest_read_group;


--
-- Name: st_geohash(geography, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geohash(geog geography, maxchars integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geohash(geog geography, maxchars integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geohash(geog geography, maxchars integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geohash(geog geography, maxchars integer) TO soop;
GRANT ALL ON FUNCTION st_geohash(geog geography, maxchars integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geohash(geog geography, maxchars integer) TO argo;
GRANT ALL ON FUNCTION st_geohash(geog geography, maxchars integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_geohash(geog geography, maxchars integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geohash(geog geography, maxchars integer) TO harvest_read_group;


--
-- Name: st_geohash(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geohash(geom geometry, maxchars integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geohash(geom geometry, maxchars integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geohash(geom geometry, maxchars integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geohash(geom geometry, maxchars integer) TO soop;
GRANT ALL ON FUNCTION st_geohash(geom geometry, maxchars integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geohash(geom geometry, maxchars integer) TO argo;
GRANT ALL ON FUNCTION st_geohash(geom geometry, maxchars integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_geohash(geom geometry, maxchars integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geohash(geom geometry, maxchars integer) TO harvest_read_group;


--
-- Name: st_geomcollfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomcollfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomcollfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomcollfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomcollfromtext(text) TO soop;
GRANT ALL ON FUNCTION st_geomcollfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomcollfromtext(text) TO argo;
GRANT ALL ON FUNCTION st_geomcollfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomcollfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomcollfromtext(text) TO harvest_read_group;


--
-- Name: st_geomcollfromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomcollfromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomcollfromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomcollfromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomcollfromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_geomcollfromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomcollfromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_geomcollfromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomcollfromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomcollfromtext(text, integer) TO harvest_read_group;


--
-- Name: st_geomcollfromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea) TO harvest_read_group;


--
-- Name: st_geomcollfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea, integer) TO soop;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea, integer) TO argo;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomcollfromwkb(bytea, integer) TO harvest_read_group;


--
-- Name: st_geometricmedian(geometry, double precision, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geometricmedian(g geometry, tolerance double precision, max_iter integer, fail_if_not_converged boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geometricmedian(g geometry, tolerance double precision, max_iter integer, fail_if_not_converged boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geometricmedian(g geometry, tolerance double precision, max_iter integer, fail_if_not_converged boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geometricmedian(g geometry, tolerance double precision, max_iter integer, fail_if_not_converged boolean) TO soop;
GRANT ALL ON FUNCTION st_geometricmedian(g geometry, tolerance double precision, max_iter integer, fail_if_not_converged boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geometricmedian(g geometry, tolerance double precision, max_iter integer, fail_if_not_converged boolean) TO argo;
GRANT ALL ON FUNCTION st_geometricmedian(g geometry, tolerance double precision, max_iter integer, fail_if_not_converged boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_geometricmedian(g geometry, tolerance double precision, max_iter integer, fail_if_not_converged boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geometricmedian(g geometry, tolerance double precision, max_iter integer, fail_if_not_converged boolean) TO harvest_read_group;


--
-- Name: st_geometryfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geometryfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geometryfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geometryfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geometryfromtext(text) TO soop;
GRANT ALL ON FUNCTION st_geometryfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geometryfromtext(text) TO argo;
GRANT ALL ON FUNCTION st_geometryfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_geometryfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geometryfromtext(text) TO harvest_read_group;


--
-- Name: st_geometryfromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geometryfromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geometryfromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geometryfromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geometryfromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_geometryfromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geometryfromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_geometryfromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_geometryfromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geometryfromtext(text, integer) TO harvest_read_group;


--
-- Name: st_geometryn(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geometryn(geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geometryn(geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geometryn(geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geometryn(geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_geometryn(geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geometryn(geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_geometryn(geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_geometryn(geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geometryn(geometry, integer) TO harvest_read_group;


--
-- Name: st_geometrytype(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geometrytype(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geometrytype(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geometrytype(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geometrytype(geometry) TO soop;
GRANT ALL ON FUNCTION st_geometrytype(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geometrytype(geometry) TO argo;
GRANT ALL ON FUNCTION st_geometrytype(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_geometrytype(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geometrytype(geometry) TO harvest_read_group;


--
-- Name: st_geomfromewkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomfromewkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomfromewkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomfromewkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomfromewkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_geomfromewkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomfromewkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_geomfromewkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomfromewkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomfromewkb(bytea) TO harvest_read_group;


--
-- Name: st_geomfromewkt(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomfromewkt(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomfromewkt(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomfromewkt(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomfromewkt(text) TO soop;
GRANT ALL ON FUNCTION st_geomfromewkt(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomfromewkt(text) TO argo;
GRANT ALL ON FUNCTION st_geomfromewkt(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomfromewkt(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomfromewkt(text) TO harvest_read_group;


--
-- Name: st_geomfromgeohash(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomfromgeohash(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomfromgeohash(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomfromgeohash(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomfromgeohash(text, integer) TO soop;
GRANT ALL ON FUNCTION st_geomfromgeohash(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomfromgeohash(text, integer) TO argo;
GRANT ALL ON FUNCTION st_geomfromgeohash(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomfromgeohash(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomfromgeohash(text, integer) TO harvest_read_group;


--
-- Name: st_geomfromgeojson(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomfromgeojson(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomfromgeojson(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomfromgeojson(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomfromgeojson(text) TO soop;
GRANT ALL ON FUNCTION st_geomfromgeojson(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomfromgeojson(text) TO argo;
GRANT ALL ON FUNCTION st_geomfromgeojson(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomfromgeojson(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomfromgeojson(text) TO harvest_read_group;


--
-- Name: st_geomfromgml(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomfromgml(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomfromgml(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomfromgml(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomfromgml(text) TO soop;
GRANT ALL ON FUNCTION st_geomfromgml(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomfromgml(text) TO argo;
GRANT ALL ON FUNCTION st_geomfromgml(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomfromgml(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomfromgml(text) TO harvest_read_group;


--
-- Name: st_geomfromgml(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomfromgml(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomfromgml(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomfromgml(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomfromgml(text, integer) TO soop;
GRANT ALL ON FUNCTION st_geomfromgml(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomfromgml(text, integer) TO argo;
GRANT ALL ON FUNCTION st_geomfromgml(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomfromgml(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomfromgml(text, integer) TO harvest_read_group;


--
-- Name: st_geomfromkml(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomfromkml(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomfromkml(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomfromkml(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomfromkml(text) TO soop;
GRANT ALL ON FUNCTION st_geomfromkml(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomfromkml(text) TO argo;
GRANT ALL ON FUNCTION st_geomfromkml(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomfromkml(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomfromkml(text) TO harvest_read_group;


--
-- Name: st_geomfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomfromtext(text) TO soop;
GRANT ALL ON FUNCTION st_geomfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomfromtext(text) TO argo;
GRANT ALL ON FUNCTION st_geomfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomfromtext(text) TO harvest_read_group;


--
-- Name: st_geomfromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomfromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomfromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomfromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomfromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_geomfromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomfromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_geomfromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomfromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomfromtext(text, integer) TO harvest_read_group;


--
-- Name: st_geomfromtwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomfromtwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomfromtwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomfromtwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomfromtwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_geomfromtwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomfromtwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_geomfromtwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomfromtwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomfromtwkb(bytea) TO harvest_read_group;


--
-- Name: st_geomfromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomfromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea) TO harvest_read_group;


--
-- Name: st_geomfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geomfromwkb(bytea, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea, integer) TO soop;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea, integer) TO argo;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geomfromwkb(bytea, integer) TO harvest_read_group;


--
-- Name: st_georeference(raster, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_georeference(rast raster, format text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_georeference(rast raster, format text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_georeference(rast raster, format text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_georeference(rast raster, format text) TO soop;
GRANT ALL ON FUNCTION st_georeference(rast raster, format text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_georeference(rast raster, format text) TO argo;
GRANT ALL ON FUNCTION st_georeference(rast raster, format text) TO aodn_dart;
GRANT ALL ON FUNCTION st_georeference(rast raster, format text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_georeference(rast raster, format text) TO harvest_read_group;


--
-- Name: st_geotransform(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_geotransform(raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_geotransform(raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_geotransform(raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_geotransform(raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision) TO soop;
GRANT ALL ON FUNCTION st_geotransform(raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_geotransform(raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision) TO argo;
GRANT ALL ON FUNCTION st_geotransform(raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_geotransform(raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_geotransform(raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision) TO harvest_read_group;


--
-- Name: st_gmltosql(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_gmltosql(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_gmltosql(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_gmltosql(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_gmltosql(text) TO soop;
GRANT ALL ON FUNCTION st_gmltosql(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_gmltosql(text) TO argo;
GRANT ALL ON FUNCTION st_gmltosql(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_gmltosql(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_gmltosql(text) TO harvest_read_group;


--
-- Name: st_gmltosql(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_gmltosql(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_gmltosql(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_gmltosql(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_gmltosql(text, integer) TO soop;
GRANT ALL ON FUNCTION st_gmltosql(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_gmltosql(text, integer) TO argo;
GRANT ALL ON FUNCTION st_gmltosql(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_gmltosql(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_gmltosql(text, integer) TO harvest_read_group;


--
-- Name: st_hasarc(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_hasarc(geometry geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_hasarc(geometry geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_hasarc(geometry geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_hasarc(geometry geometry) TO soop;
GRANT ALL ON FUNCTION st_hasarc(geometry geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_hasarc(geometry geometry) TO argo;
GRANT ALL ON FUNCTION st_hasarc(geometry geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_hasarc(geometry geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_hasarc(geometry geometry) TO harvest_read_group;


--
-- Name: st_hasnoband(raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_hasnoband(rast raster, nband integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_hasnoband(rast raster, nband integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_hasnoband(rast raster, nband integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_hasnoband(rast raster, nband integer) TO soop;
GRANT ALL ON FUNCTION st_hasnoband(rast raster, nband integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_hasnoband(rast raster, nband integer) TO argo;
GRANT ALL ON FUNCTION st_hasnoband(rast raster, nband integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_hasnoband(rast raster, nband integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_hasnoband(rast raster, nband integer) TO harvest_read_group;


--
-- Name: st_hausdorffdistance(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_hausdorffdistance(geometry, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision) TO harvest_read_group;


--
-- Name: st_height(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_height(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_height(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_height(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_height(raster) TO soop;
GRANT ALL ON FUNCTION st_height(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_height(raster) TO argo;
GRANT ALL ON FUNCTION st_height(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_height(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_height(raster) TO harvest_read_group;


--
-- Name: st_hillshade(raster, integer, text, double precision, double precision, double precision, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO soop;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO argo;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO harvest_read_group;


--
-- Name: st_hillshade(raster, integer, raster, text, double precision, double precision, double precision, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, customextent raster, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, customextent raster, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, customextent raster, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, customextent raster, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO soop;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, customextent raster, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, customextent raster, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO argo;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, customextent raster, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, customextent raster, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_hillshade(rast raster, nband integer, customextent raster, pixeltype text, azimuth double precision, altitude double precision, max_bright double precision, scale double precision, interpolate_nodata boolean) TO harvest_read_group;


--
-- Name: st_histogram(raster, integer, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_histogram(text, text, integer, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_histogram(raster, integer, boolean, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_histogram(raster, integer, integer, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_histogram(text, text, integer, boolean, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_histogram(text, text, integer, integer, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_histogram(raster, integer, boolean, integer, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_histogram(text, text, integer, boolean, integer, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, width double precision[], "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_interiorringn(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_interiorringn(geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_interiorringn(geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_interiorringn(geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_interiorringn(geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_interiorringn(geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_interiorringn(geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_interiorringn(geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_interiorringn(geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_interiorringn(geometry, integer) TO harvest_read_group;


--
-- Name: st_interpolatepoint(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_interpolatepoint(line geometry, point geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_interpolatepoint(line geometry, point geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_interpolatepoint(line geometry, point geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_interpolatepoint(line geometry, point geometry) TO soop;
GRANT ALL ON FUNCTION st_interpolatepoint(line geometry, point geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_interpolatepoint(line geometry, point geometry) TO argo;
GRANT ALL ON FUNCTION st_interpolatepoint(line geometry, point geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_interpolatepoint(line geometry, point geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_interpolatepoint(line geometry, point geometry) TO harvest_read_group;


--
-- Name: st_intersection(text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(text, text) TO soop;
GRANT ALL ON FUNCTION st_intersection(text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(text, text) TO argo;
GRANT ALL ON FUNCTION st_intersection(text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(text, text) TO harvest_read_group;


--
-- Name: st_intersection(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(geography, geography) TO soop;
GRANT ALL ON FUNCTION st_intersection(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(geography, geography) TO argo;
GRANT ALL ON FUNCTION st_intersection(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(geography, geography) TO harvest_read_group;


--
-- Name: st_intersection(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_intersection(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_intersection(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_intersection(raster, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(rast raster, geomin geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(rast raster, geomin geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(rast raster, geomin geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(rast raster, geomin geometry) TO soop;
GRANT ALL ON FUNCTION st_intersection(rast raster, geomin geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(rast raster, geomin geometry) TO argo;
GRANT ALL ON FUNCTION st_intersection(rast raster, geomin geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(rast raster, geomin geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(rast raster, geomin geometry) TO harvest_read_group;


--
-- Name: st_intersection(geometry, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(geomin geometry, rast raster, band integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(geomin geometry, rast raster, band integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(geomin geometry, rast raster, band integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(geomin geometry, rast raster, band integer) TO soop;
GRANT ALL ON FUNCTION st_intersection(geomin geometry, rast raster, band integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(geomin geometry, rast raster, band integer) TO argo;
GRANT ALL ON FUNCTION st_intersection(geomin geometry, rast raster, band integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(geomin geometry, rast raster, band integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(geomin geometry, rast raster, band integer) TO harvest_read_group;


--
-- Name: st_intersection(raster, integer, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(rast raster, band integer, geomin geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(rast raster, band integer, geomin geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(rast raster, band integer, geomin geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(rast raster, band integer, geomin geometry) TO soop;
GRANT ALL ON FUNCTION st_intersection(rast raster, band integer, geomin geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(rast raster, band integer, geomin geometry) TO argo;
GRANT ALL ON FUNCTION st_intersection(rast raster, band integer, geomin geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(rast raster, band integer, geomin geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(rast raster, band integer, geomin geometry) TO harvest_read_group;


--
-- Name: st_intersection(raster, raster, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision[]) TO soop;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision[]) TO argo;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision[]) TO harvest_read_group;


--
-- Name: st_intersection(raster, raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, nodataval double precision) TO harvest_read_group;


--
-- Name: st_intersection(raster, raster, text, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision[]) TO soop;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision[]) TO argo;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision[]) TO harvest_read_group;


--
-- Name: st_intersection(raster, raster, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision) TO harvest_read_group;


--
-- Name: st_intersection(raster, integer, raster, integer, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision[]) TO soop;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision[]) TO argo;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision[]) TO harvest_read_group;


--
-- Name: st_intersection(raster, integer, raster, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision) TO harvest_read_group;


--
-- Name: st_intersection(raster, integer, raster, integer, text, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision[]) TO soop;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision[]) TO argo;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision[]) TO harvest_read_group;


--
-- Name: st_intersection(raster, integer, raster, integer, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision) TO harvest_read_group;


--
-- Name: st_intersects(text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersects(text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersects(text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersects(text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersects(text, text) TO soop;
GRANT ALL ON FUNCTION st_intersects(text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersects(text, text) TO argo;
GRANT ALL ON FUNCTION st_intersects(text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersects(text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersects(text, text) TO harvest_read_group;


--
-- Name: st_intersects(geography, geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersects(geography, geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersects(geography, geography) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersects(geography, geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersects(geography, geography) TO soop;
GRANT ALL ON FUNCTION st_intersects(geography, geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersects(geography, geography) TO argo;
GRANT ALL ON FUNCTION st_intersects(geography, geography) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersects(geography, geography) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersects(geography, geography) TO harvest_read_group;


--
-- Name: st_intersects(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersects(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersects(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersects(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersects(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_intersects(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersects(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_intersects(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersects(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersects(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_intersects(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersects(rast1 raster, rast2 raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, rast2 raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, rast2 raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, rast2 raster) TO soop;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, rast2 raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, rast2 raster) TO argo;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, rast2 raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, rast2 raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, rast2 raster) TO harvest_read_group;


--
-- Name: st_intersects(geometry, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersects(geom geometry, rast raster, nband integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersects(geom geometry, rast raster, nband integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersects(geom geometry, rast raster, nband integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersects(geom geometry, rast raster, nband integer) TO soop;
GRANT ALL ON FUNCTION st_intersects(geom geometry, rast raster, nband integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersects(geom geometry, rast raster, nband integer) TO argo;
GRANT ALL ON FUNCTION st_intersects(geom geometry, rast raster, nband integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersects(geom geometry, rast raster, nband integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersects(geom geometry, rast raster, nband integer) TO harvest_read_group;


--
-- Name: st_intersects(raster, integer, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersects(rast raster, nband integer, geom geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersects(rast raster, nband integer, geom geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersects(rast raster, nband integer, geom geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersects(rast raster, nband integer, geom geometry) TO soop;
GRANT ALL ON FUNCTION st_intersects(rast raster, nband integer, geom geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersects(rast raster, nband integer, geom geometry) TO argo;
GRANT ALL ON FUNCTION st_intersects(rast raster, nband integer, geom geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersects(rast raster, nband integer, geom geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersects(rast raster, nband integer, geom geometry) TO harvest_read_group;


--
-- Name: st_intersects(raster, geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersects(rast raster, geom geometry, nband integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersects(rast raster, geom geometry, nband integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersects(rast raster, geom geometry, nband integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersects(rast raster, geom geometry, nband integer) TO soop;
GRANT ALL ON FUNCTION st_intersects(rast raster, geom geometry, nband integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersects(rast raster, geom geometry, nband integer) TO argo;
GRANT ALL ON FUNCTION st_intersects(rast raster, geom geometry, nband integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersects(rast raster, geom geometry, nband integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersects(rast raster, geom geometry, nband integer) TO harvest_read_group;


--
-- Name: st_intersects(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: st_invdistweight4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_isclosed(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_isclosed(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_isclosed(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_isclosed(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_isclosed(geometry) TO soop;
GRANT ALL ON FUNCTION st_isclosed(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_isclosed(geometry) TO argo;
GRANT ALL ON FUNCTION st_isclosed(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_isclosed(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_isclosed(geometry) TO harvest_read_group;


--
-- Name: st_iscollection(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_iscollection(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_iscollection(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_iscollection(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_iscollection(geometry) TO soop;
GRANT ALL ON FUNCTION st_iscollection(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_iscollection(geometry) TO argo;
GRANT ALL ON FUNCTION st_iscollection(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_iscollection(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_iscollection(geometry) TO harvest_read_group;


--
-- Name: st_iscoveragetile(raster, raster, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_iscoveragetile(rast raster, coverage raster, tilewidth integer, tileheight integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_iscoveragetile(rast raster, coverage raster, tilewidth integer, tileheight integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_iscoveragetile(rast raster, coverage raster, tilewidth integer, tileheight integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_iscoveragetile(rast raster, coverage raster, tilewidth integer, tileheight integer) TO soop;
GRANT ALL ON FUNCTION st_iscoveragetile(rast raster, coverage raster, tilewidth integer, tileheight integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_iscoveragetile(rast raster, coverage raster, tilewidth integer, tileheight integer) TO argo;
GRANT ALL ON FUNCTION st_iscoveragetile(rast raster, coverage raster, tilewidth integer, tileheight integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_iscoveragetile(rast raster, coverage raster, tilewidth integer, tileheight integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_iscoveragetile(rast raster, coverage raster, tilewidth integer, tileheight integer) TO harvest_read_group;


--
-- Name: st_isempty(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_isempty(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_isempty(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_isempty(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_isempty(geometry) TO soop;
GRANT ALL ON FUNCTION st_isempty(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_isempty(geometry) TO argo;
GRANT ALL ON FUNCTION st_isempty(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_isempty(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_isempty(geometry) TO harvest_read_group;


--
-- Name: st_isempty(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_isempty(rast raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_isempty(rast raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_isempty(rast raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_isempty(rast raster) TO soop;
GRANT ALL ON FUNCTION st_isempty(rast raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_isempty(rast raster) TO argo;
GRANT ALL ON FUNCTION st_isempty(rast raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_isempty(rast raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_isempty(rast raster) TO harvest_read_group;


--
-- Name: st_isring(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_isring(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_isring(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_isring(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_isring(geometry) TO soop;
GRANT ALL ON FUNCTION st_isring(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_isring(geometry) TO argo;
GRANT ALL ON FUNCTION st_isring(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_isring(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_isring(geometry) TO harvest_read_group;


--
-- Name: st_issimple(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_issimple(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_issimple(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_issimple(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_issimple(geometry) TO soop;
GRANT ALL ON FUNCTION st_issimple(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_issimple(geometry) TO argo;
GRANT ALL ON FUNCTION st_issimple(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_issimple(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_issimple(geometry) TO harvest_read_group;


--
-- Name: st_isvalid(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_isvalid(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_isvalid(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_isvalid(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_isvalid(geometry) TO soop;
GRANT ALL ON FUNCTION st_isvalid(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_isvalid(geometry) TO argo;
GRANT ALL ON FUNCTION st_isvalid(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_isvalid(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_isvalid(geometry) TO harvest_read_group;


--
-- Name: st_isvalid(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_isvalid(geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_isvalid(geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_isvalid(geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_isvalid(geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_isvalid(geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_isvalid(geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_isvalid(geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_isvalid(geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_isvalid(geometry, integer) TO harvest_read_group;


--
-- Name: st_isvaliddetail(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_isvaliddetail(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry) TO soop;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry) TO argo;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry) TO harvest_read_group;


--
-- Name: st_isvaliddetail(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_isvaliddetail(geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_isvaliddetail(geometry, integer) TO harvest_read_group;


--
-- Name: st_isvalidreason(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_isvalidreason(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_isvalidreason(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_isvalidreason(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_isvalidreason(geometry) TO soop;
GRANT ALL ON FUNCTION st_isvalidreason(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_isvalidreason(geometry) TO argo;
GRANT ALL ON FUNCTION st_isvalidreason(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_isvalidreason(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_isvalidreason(geometry) TO harvest_read_group;


--
-- Name: st_isvalidreason(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_isvalidreason(geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_isvalidreason(geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_isvalidreason(geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_isvalidreason(geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_isvalidreason(geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_isvalidreason(geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_isvalidreason(geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_isvalidreason(geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_isvalidreason(geometry, integer) TO harvest_read_group;


--
-- Name: st_isvalidtrajectory(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_isvalidtrajectory(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_isvalidtrajectory(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_isvalidtrajectory(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_isvalidtrajectory(geometry) TO soop;
GRANT ALL ON FUNCTION st_isvalidtrajectory(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_isvalidtrajectory(geometry) TO argo;
GRANT ALL ON FUNCTION st_isvalidtrajectory(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_isvalidtrajectory(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_isvalidtrajectory(geometry) TO harvest_read_group;


--
-- Name: st_length(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_length(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_length(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_length(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_length(text) TO soop;
GRANT ALL ON FUNCTION st_length(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_length(text) TO argo;
GRANT ALL ON FUNCTION st_length(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_length(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_length(text) TO harvest_read_group;


--
-- Name: st_length(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_length(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_length(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_length(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_length(geometry) TO soop;
GRANT ALL ON FUNCTION st_length(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_length(geometry) TO argo;
GRANT ALL ON FUNCTION st_length(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_length(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_length(geometry) TO harvest_read_group;


--
-- Name: st_length(geography, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_length(geog geography, use_spheroid boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_length(geog geography, use_spheroid boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_length(geog geography, use_spheroid boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_length(geog geography, use_spheroid boolean) TO soop;
GRANT ALL ON FUNCTION st_length(geog geography, use_spheroid boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_length(geog geography, use_spheroid boolean) TO argo;
GRANT ALL ON FUNCTION st_length(geog geography, use_spheroid boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_length(geog geography, use_spheroid boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_length(geog geography, use_spheroid boolean) TO harvest_read_group;


--
-- Name: st_length2d(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_length2d(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_length2d(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_length2d(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_length2d(geometry) TO soop;
GRANT ALL ON FUNCTION st_length2d(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_length2d(geometry) TO argo;
GRANT ALL ON FUNCTION st_length2d(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_length2d(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_length2d(geometry) TO harvest_read_group;


--
-- Name: st_length2d_spheroid(geometry, spheroid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_length2d_spheroid(geometry, spheroid) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_length2d_spheroid(geometry, spheroid) TO harvest_write_group;
GRANT ALL ON FUNCTION st_length2d_spheroid(geometry, spheroid) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_length2d_spheroid(geometry, spheroid) TO soop;
GRANT ALL ON FUNCTION st_length2d_spheroid(geometry, spheroid) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_length2d_spheroid(geometry, spheroid) TO argo;
GRANT ALL ON FUNCTION st_length2d_spheroid(geometry, spheroid) TO aodn_dart;
GRANT ALL ON FUNCTION st_length2d_spheroid(geometry, spheroid) TO anmn_metadata;
GRANT ALL ON FUNCTION st_length2d_spheroid(geometry, spheroid) TO harvest_read_group;


--
-- Name: st_length2dspheroid(geometry, spheroid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_length2dspheroid(geometry, spheroid) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_length2dspheroid(geometry, spheroid) TO harvest_write_group;
GRANT ALL ON FUNCTION st_length2dspheroid(geometry, spheroid) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_length2dspheroid(geometry, spheroid) TO soop;
GRANT ALL ON FUNCTION st_length2dspheroid(geometry, spheroid) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_length2dspheroid(geometry, spheroid) TO argo;
GRANT ALL ON FUNCTION st_length2dspheroid(geometry, spheroid) TO aodn_dart;
GRANT ALL ON FUNCTION st_length2dspheroid(geometry, spheroid) TO anmn_metadata;
GRANT ALL ON FUNCTION st_length2dspheroid(geometry, spheroid) TO harvest_read_group;


--
-- Name: st_length_spheroid(geometry, spheroid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_length_spheroid(geometry, spheroid) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_length_spheroid(geometry, spheroid) TO harvest_write_group;
GRANT ALL ON FUNCTION st_length_spheroid(geometry, spheroid) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_length_spheroid(geometry, spheroid) TO soop;
GRANT ALL ON FUNCTION st_length_spheroid(geometry, spheroid) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_length_spheroid(geometry, spheroid) TO argo;
GRANT ALL ON FUNCTION st_length_spheroid(geometry, spheroid) TO aodn_dart;
GRANT ALL ON FUNCTION st_length_spheroid(geometry, spheroid) TO anmn_metadata;
GRANT ALL ON FUNCTION st_length_spheroid(geometry, spheroid) TO harvest_read_group;


--
-- Name: st_lengthspheroid(geometry, spheroid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_lengthspheroid(geometry, spheroid) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_lengthspheroid(geometry, spheroid) TO harvest_write_group;
GRANT ALL ON FUNCTION st_lengthspheroid(geometry, spheroid) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_lengthspheroid(geometry, spheroid) TO soop;
GRANT ALL ON FUNCTION st_lengthspheroid(geometry, spheroid) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_lengthspheroid(geometry, spheroid) TO argo;
GRANT ALL ON FUNCTION st_lengthspheroid(geometry, spheroid) TO aodn_dart;
GRANT ALL ON FUNCTION st_lengthspheroid(geometry, spheroid) TO anmn_metadata;
GRANT ALL ON FUNCTION st_lengthspheroid(geometry, spheroid) TO harvest_read_group;


--
-- Name: st_line_interpolate_point(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_line_interpolate_point(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_line_interpolate_point(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_line_interpolate_point(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_line_interpolate_point(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_line_interpolate_point(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_line_interpolate_point(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_line_interpolate_point(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_line_interpolate_point(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_line_interpolate_point(geometry, double precision) TO harvest_read_group;


--
-- Name: st_line_locate_point(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_line_locate_point(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_line_locate_point(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_line_locate_point(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_line_locate_point(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_line_locate_point(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_line_locate_point(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_line_locate_point(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_line_locate_point(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_line_locate_point(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_line_substring(geometry, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_line_substring(geometry, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_line_substring(geometry, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_line_substring(geometry, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_line_substring(geometry, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_line_substring(geometry, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_line_substring(geometry, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_line_substring(geometry, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_line_substring(geometry, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_line_substring(geometry, double precision, double precision) TO harvest_read_group;


--
-- Name: st_linecrossingdirection(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_linecrossingdirection(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_linecrossingdirection(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_linecrossingdirection(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_linecrossingdirection(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_linecrossingdirection(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_linecrossingdirection(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_linecrossingdirection(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_linecrossingdirection(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_linecrossingdirection(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_linefromencodedpolyline(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_linefromencodedpolyline(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_linefromencodedpolyline(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_linefromencodedpolyline(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_linefromencodedpolyline(text, integer) TO soop;
GRANT ALL ON FUNCTION st_linefromencodedpolyline(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_linefromencodedpolyline(text, integer) TO argo;
GRANT ALL ON FUNCTION st_linefromencodedpolyline(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_linefromencodedpolyline(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_linefromencodedpolyline(text, integer) TO harvest_read_group;


--
-- Name: st_linefrommultipoint(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_linefrommultipoint(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_linefrommultipoint(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_linefrommultipoint(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_linefrommultipoint(geometry) TO soop;
GRANT ALL ON FUNCTION st_linefrommultipoint(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_linefrommultipoint(geometry) TO argo;
GRANT ALL ON FUNCTION st_linefrommultipoint(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_linefrommultipoint(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_linefrommultipoint(geometry) TO harvest_read_group;


--
-- Name: st_linefromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_linefromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_linefromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_linefromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_linefromtext(text) TO soop;
GRANT ALL ON FUNCTION st_linefromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_linefromtext(text) TO argo;
GRANT ALL ON FUNCTION st_linefromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_linefromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_linefromtext(text) TO harvest_read_group;


--
-- Name: st_linefromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_linefromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_linefromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_linefromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_linefromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_linefromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_linefromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_linefromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_linefromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_linefromtext(text, integer) TO harvest_read_group;


--
-- Name: st_linefromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_linefromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_linefromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_linefromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_linefromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_linefromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_linefromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_linefromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_linefromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_linefromwkb(bytea) TO harvest_read_group;


--
-- Name: st_linefromwkb(bytea, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_linefromwkb(bytea, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_linefromwkb(bytea, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_linefromwkb(bytea, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_linefromwkb(bytea, integer) TO soop;
GRANT ALL ON FUNCTION st_linefromwkb(bytea, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_linefromwkb(bytea, integer) TO argo;
GRANT ALL ON FUNCTION st_linefromwkb(bytea, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_linefromwkb(bytea, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_linefromwkb(bytea, integer) TO harvest_read_group;


--
-- Name: st_lineinterpolatepoint(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_lineinterpolatepoint(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_lineinterpolatepoint(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_lineinterpolatepoint(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_lineinterpolatepoint(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_lineinterpolatepoint(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_lineinterpolatepoint(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_lineinterpolatepoint(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_lineinterpolatepoint(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_lineinterpolatepoint(geometry, double precision) TO harvest_read_group;


--
-- Name: st_linelocatepoint(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_linelocatepoint(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_linelocatepoint(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_linelocatepoint(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_linelocatepoint(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_linelocatepoint(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_linelocatepoint(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_linelocatepoint(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_linelocatepoint(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_linelocatepoint(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_linemerge(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_linemerge(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_linemerge(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_linemerge(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_linemerge(geometry) TO soop;
GRANT ALL ON FUNCTION st_linemerge(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_linemerge(geometry) TO argo;
GRANT ALL ON FUNCTION st_linemerge(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_linemerge(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_linemerge(geometry) TO harvest_read_group;


--
-- Name: st_linestringfromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_linestringfromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea) TO harvest_read_group;


--
-- Name: st_linestringfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_linestringfromwkb(bytea, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea, integer) TO soop;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea, integer) TO argo;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_linestringfromwkb(bytea, integer) TO harvest_read_group;


--
-- Name: st_linesubstring(geometry, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_linesubstring(geometry, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_linesubstring(geometry, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_linesubstring(geometry, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_linesubstring(geometry, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_linesubstring(geometry, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_linesubstring(geometry, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_linesubstring(geometry, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_linesubstring(geometry, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_linesubstring(geometry, double precision, double precision) TO harvest_read_group;


--
-- Name: st_linetocurve(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_linetocurve(geometry geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_linetocurve(geometry geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_linetocurve(geometry geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_linetocurve(geometry geometry) TO soop;
GRANT ALL ON FUNCTION st_linetocurve(geometry geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_linetocurve(geometry geometry) TO argo;
GRANT ALL ON FUNCTION st_linetocurve(geometry geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_linetocurve(geometry geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_linetocurve(geometry geometry) TO harvest_read_group;


--
-- Name: st_locate_along_measure(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_locate_along_measure(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_locate_along_measure(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_locate_along_measure(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_locate_along_measure(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_locate_along_measure(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_locate_along_measure(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_locate_along_measure(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_locate_along_measure(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_locate_along_measure(geometry, double precision) TO harvest_read_group;


--
-- Name: st_locate_between_measures(geometry, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_locate_between_measures(geometry, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_locate_between_measures(geometry, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_locate_between_measures(geometry, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_locate_between_measures(geometry, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_locate_between_measures(geometry, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_locate_between_measures(geometry, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_locate_between_measures(geometry, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_locate_between_measures(geometry, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_locate_between_measures(geometry, double precision, double precision) TO harvest_read_group;


--
-- Name: st_locatealong(geometry, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision) TO soop;
GRANT ALL ON FUNCTION st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision) TO argo;
GRANT ALL ON FUNCTION st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision) TO harvest_read_group;


--
-- Name: st_locatebetween(geometry, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision) TO soop;
GRANT ALL ON FUNCTION st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision) TO argo;
GRANT ALL ON FUNCTION st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision) TO harvest_read_group;


--
-- Name: st_locatebetweenelevations(geometry, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision) TO soop;
GRANT ALL ON FUNCTION st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision) TO argo;
GRANT ALL ON FUNCTION st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision) TO harvest_read_group;


--
-- Name: st_longestline(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_longestline(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_longestline(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_longestline(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_longestline(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_longestline(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_longestline(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_longestline(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_longestline(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_longestline(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_m(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_m(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_m(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_m(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_m(geometry) TO soop;
GRANT ALL ON FUNCTION st_m(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_m(geometry) TO argo;
GRANT ALL ON FUNCTION st_m(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_m(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_m(geometry) TO harvest_read_group;


--
-- Name: st_makebox2d(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makebox2d(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makebox2d(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makebox2d(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makebox2d(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_makebox2d(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makebox2d(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_makebox2d(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_makebox2d(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makebox2d(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_makeemptyraster(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makeemptyraster(rast raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makeemptyraster(rast raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makeemptyraster(rast raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makeemptyraster(rast raster) TO soop;
GRANT ALL ON FUNCTION st_makeemptyraster(rast raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makeemptyraster(rast raster) TO argo;
GRANT ALL ON FUNCTION st_makeemptyraster(rast raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_makeemptyraster(rast raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makeemptyraster(rast raster) TO harvest_read_group;


--
-- Name: st_makeemptyraster(integer, integer, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision) TO soop;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision) TO argo;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision) TO harvest_read_group;


--
-- Name: st_makeemptyraster(integer, integer, double precision, double precision, double precision, double precision, double precision, double precision, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer) TO soop;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer) TO argo;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer) TO harvest_read_group;


--
-- Name: st_makeenvelope(double precision, double precision, double precision, double precision, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer) TO soop;
GRANT ALL ON FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer) TO argo;
GRANT ALL ON FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makeenvelope(double precision, double precision, double precision, double precision, integer) TO harvest_read_group;


--
-- Name: st_makeline(geometry[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makeline(geometry[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makeline(geometry[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makeline(geometry[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makeline(geometry[]) TO soop;
GRANT ALL ON FUNCTION st_makeline(geometry[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makeline(geometry[]) TO argo;
GRANT ALL ON FUNCTION st_makeline(geometry[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_makeline(geometry[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makeline(geometry[]) TO harvest_read_group;


--
-- Name: st_makeline(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makeline(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makeline(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makeline(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makeline(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_makeline(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makeline(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_makeline(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_makeline(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makeline(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_makepoint(double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makepoint(double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision) TO harvest_read_group;


--
-- Name: st_makepoint(double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: st_makepoint(double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makepoint(double precision, double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: st_makepointm(double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makepointm(double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makepointm(double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makepointm(double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makepointm(double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_makepointm(double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makepointm(double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_makepointm(double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_makepointm(double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makepointm(double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: st_makepolygon(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makepolygon(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makepolygon(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makepolygon(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makepolygon(geometry) TO soop;
GRANT ALL ON FUNCTION st_makepolygon(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makepolygon(geometry) TO argo;
GRANT ALL ON FUNCTION st_makepolygon(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_makepolygon(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makepolygon(geometry) TO harvest_read_group;


--
-- Name: st_makepolygon(geometry, geometry[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makepolygon(geometry, geometry[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makepolygon(geometry, geometry[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makepolygon(geometry, geometry[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makepolygon(geometry, geometry[]) TO soop;
GRANT ALL ON FUNCTION st_makepolygon(geometry, geometry[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makepolygon(geometry, geometry[]) TO argo;
GRANT ALL ON FUNCTION st_makepolygon(geometry, geometry[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_makepolygon(geometry, geometry[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makepolygon(geometry, geometry[]) TO harvest_read_group;


--
-- Name: st_makevalid(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makevalid(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makevalid(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makevalid(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makevalid(geometry) TO soop;
GRANT ALL ON FUNCTION st_makevalid(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makevalid(geometry) TO argo;
GRANT ALL ON FUNCTION st_makevalid(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_makevalid(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makevalid(geometry) TO harvest_read_group;


--
-- Name: st_mapalgebra(raster, text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebra(rast raster, pixeltype text, expression text, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, pixeltype text, expression text, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, pixeltype text, expression text, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, pixeltype text, expression text, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, pixeltype text, expression text, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, pixeltype text, expression text, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, pixeltype text, expression text, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, pixeltype text, expression text, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, pixeltype text, expression text, nodataval double precision) TO harvest_read_group;


--
-- Name: st_mapalgebra(raster, integer, text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, pixeltype text, expression text, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, pixeltype text, expression text, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, pixeltype text, expression text, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, pixeltype text, expression text, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, pixeltype text, expression text, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, pixeltype text, expression text, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, pixeltype text, expression text, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, pixeltype text, expression text, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, pixeltype text, expression text, nodataval double precision) TO harvest_read_group;


--
-- Name: st_mapalgebra(rastbandarg[], regprocedure, text, text, raster, integer, integer, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_mapalgebra(raster, raster, text, text, text, text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO harvest_read_group;


--
-- Name: st_mapalgebra(raster, integer[], regprocedure, text, text, raster, integer, integer, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer[], callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_mapalgebra(raster, integer, regprocedure, double precision[], boolean, text, text, raster, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, mask double precision[], weighted boolean, pixeltype text, extenttype text, customextent raster, VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, mask double precision[], weighted boolean, pixeltype text, extenttype text, customextent raster, VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, mask double precision[], weighted boolean, pixeltype text, extenttype text, customextent raster, VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, mask double precision[], weighted boolean, pixeltype text, extenttype text, customextent raster, VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, mask double precision[], weighted boolean, pixeltype text, extenttype text, customextent raster, VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, mask double precision[], weighted boolean, pixeltype text, extenttype text, customextent raster, VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, mask double precision[], weighted boolean, pixeltype text, extenttype text, customextent raster, VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, mask double precision[], weighted boolean, pixeltype text, extenttype text, customextent raster, VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, mask double precision[], weighted boolean, pixeltype text, extenttype text, customextent raster, VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_mapalgebra(raster, integer, regprocedure, text, text, raster, integer, integer, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_mapalgebra(raster, integer, raster, integer, text, text, text, text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO harvest_read_group;


--
-- Name: st_mapalgebra(raster, integer, raster, integer, regprocedure, text, text, raster, integer, integer, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, nband1 integer, rast2 raster, nband2 integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, nband1 integer, rast2 raster, nband2 integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, nband1 integer, rast2 raster, nband2 integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, nband1 integer, rast2 raster, nband2 integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, nband1 integer, rast2 raster, nband2 integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, nband1 integer, rast2 raster, nband2 integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, nband1 integer, rast2 raster, nband2 integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, nband1 integer, rast2 raster, nband2 integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebra(rast1 raster, nband1 integer, rast2 raster, nband2 integer, callbackfunc regprocedure, pixeltype text, extenttype text, customextent raster, distancex integer, distancey integer, VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_mapalgebraexpr(raster, text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, pixeltype text, expression text, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, pixeltype text, expression text, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, pixeltype text, expression text, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, pixeltype text, expression text, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, pixeltype text, expression text, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, pixeltype text, expression text, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, pixeltype text, expression text, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, pixeltype text, expression text, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, pixeltype text, expression text, nodataval double precision) TO harvest_read_group;


--
-- Name: st_mapalgebraexpr(raster, integer, text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, band integer, pixeltype text, expression text, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, band integer, pixeltype text, expression text, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, band integer, pixeltype text, expression text, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, band integer, pixeltype text, expression text, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, band integer, pixeltype text, expression text, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, band integer, pixeltype text, expression text, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, band integer, pixeltype text, expression text, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, band integer, pixeltype text, expression text, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast raster, band integer, pixeltype text, expression text, nodataval double precision) TO harvest_read_group;


--
-- Name: st_mapalgebraexpr(raster, raster, text, text, text, text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, rast2 raster, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO harvest_read_group;


--
-- Name: st_mapalgebraexpr(raster, integer, raster, integer, text, text, text, text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebraexpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text, extenttype text, nodata1expr text, nodata2expr text, nodatanodataval double precision) TO harvest_read_group;


--
-- Name: st_mapalgebrafct(raster, regprocedure); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure) TO soop;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure) TO argo;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure) TO harvest_read_group;


--
-- Name: st_mapalgebrafct(raster, integer, regprocedure); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure) TO soop;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure) TO argo;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure) TO harvest_read_group;


--
-- Name: st_mapalgebrafct(raster, regprocedure, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure, VARIADIC args text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure, VARIADIC args text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure, VARIADIC args text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure, VARIADIC args text[]) TO soop;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure, VARIADIC args text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure, VARIADIC args text[]) TO argo;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure, VARIADIC args text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure, VARIADIC args text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, onerastuserfunc regprocedure, VARIADIC args text[]) TO harvest_read_group;


--
-- Name: st_mapalgebrafct(raster, text, regprocedure); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure) TO soop;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure) TO argo;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure) TO harvest_read_group;


--
-- Name: st_mapalgebrafct(raster, integer, regprocedure, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[]) TO soop;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[]) TO argo;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[]) TO harvest_read_group;


--
-- Name: st_mapalgebrafct(raster, integer, text, regprocedure); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure) TO soop;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure) TO argo;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure) TO harvest_read_group;


--
-- Name: st_mapalgebrafct(raster, text, regprocedure, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO soop;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO argo;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO harvest_read_group;


--
-- Name: st_mapalgebrafct(raster, integer, text, regprocedure, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO soop;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO argo;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[]) TO harvest_read_group;


--
-- Name: st_mapalgebrafct(raster, raster, regprocedure, text, text, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, rast2 raster, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, rast2 raster, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, rast2 raster, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, rast2 raster, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, rast2 raster, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, rast2 raster, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, rast2 raster, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, rast2 raster, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, rast2 raster, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_mapalgebrafct(raster, integer, raster, integer, regprocedure, text, text, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, band1 integer, rast2 raster, band2 integer, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, band1 integer, rast2 raster, band2 integer, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, band1 integer, rast2 raster, band2 integer, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, band1 integer, rast2 raster, band2 integer, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, band1 integer, rast2 raster, band2 integer, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, band1 integer, rast2 raster, band2 integer, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, band1 integer, rast2 raster, band2 integer, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, band1 integer, rast2 raster, band2 integer, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebrafct(rast1 raster, band1 integer, rast2 raster, band2 integer, tworastuserfunc regprocedure, pixeltype text, extenttype text, VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_mapalgebrafctngb(raster, integer, text, integer, integer, regprocedure, text, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mapalgebrafctngb(rast raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mapalgebrafctngb(rast raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mapalgebrafctngb(rast raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mapalgebrafctngb(rast raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[]) TO soop;
GRANT ALL ON FUNCTION st_mapalgebrafctngb(rast raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mapalgebrafctngb(rast raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[]) TO argo;
GRANT ALL ON FUNCTION st_mapalgebrafctngb(rast raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mapalgebrafctngb(rast raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mapalgebrafctngb(rast raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[]) TO harvest_read_group;


--
-- Name: st_max4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_max4ma(double precision[], text, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO soop;
GRANT ALL ON FUNCTION st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO argo;
GRANT ALL ON FUNCTION st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_read_group;


--
-- Name: st_maxdistance(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_maxdistance(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_maxdistance(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_maxdistance(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_maxdistance(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_maxdistance(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_maxdistance(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_maxdistance(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_maxdistance(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_maxdistance(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_mean4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_mean4ma(double precision[], text, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO soop;
GRANT ALL ON FUNCTION st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO argo;
GRANT ALL ON FUNCTION st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_read_group;


--
-- Name: st_mem_size(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mem_size(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mem_size(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mem_size(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mem_size(geometry) TO soop;
GRANT ALL ON FUNCTION st_mem_size(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mem_size(geometry) TO argo;
GRANT ALL ON FUNCTION st_mem_size(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_mem_size(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mem_size(geometry) TO harvest_read_group;


--
-- Name: st_memsize(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_memsize(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_memsize(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_memsize(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_memsize(geometry) TO soop;
GRANT ALL ON FUNCTION st_memsize(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_memsize(geometry) TO argo;
GRANT ALL ON FUNCTION st_memsize(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_memsize(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_memsize(geometry) TO harvest_read_group;


--
-- Name: st_memsize(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_memsize(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_memsize(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_memsize(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_memsize(raster) TO soop;
GRANT ALL ON FUNCTION st_memsize(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_memsize(raster) TO argo;
GRANT ALL ON FUNCTION st_memsize(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_memsize(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_memsize(raster) TO harvest_read_group;


--
-- Name: st_metadata(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_metadata(rast raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_metadata(rast raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_metadata(rast raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_metadata(rast raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer) TO soop;
GRANT ALL ON FUNCTION st_metadata(rast raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_metadata(rast raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer) TO argo;
GRANT ALL ON FUNCTION st_metadata(rast raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_metadata(rast raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_metadata(rast raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer) TO harvest_read_group;


--
-- Name: st_min4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_min4ma(double precision[], text, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO soop;
GRANT ALL ON FUNCTION st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO argo;
GRANT ALL ON FUNCTION st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_read_group;


--
-- Name: st_minconvexhull(raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_minconvexhull(rast raster, nband integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_minconvexhull(rast raster, nband integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_minconvexhull(rast raster, nband integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_minconvexhull(rast raster, nband integer) TO soop;
GRANT ALL ON FUNCTION st_minconvexhull(rast raster, nband integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_minconvexhull(rast raster, nband integer) TO argo;
GRANT ALL ON FUNCTION st_minconvexhull(rast raster, nband integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_minconvexhull(rast raster, nband integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_minconvexhull(rast raster, nband integer) TO harvest_read_group;


--
-- Name: st_mindist4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_minimumboundingcircle(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) TO soop;
GRANT ALL ON FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) TO argo;
GRANT ALL ON FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer) TO harvest_read_group;


--
-- Name: st_minimumboundingradius(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_minimumboundingradius(geometry, OUT center geometry, OUT radius double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_minimumboundingradius(geometry, OUT center geometry, OUT radius double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_minimumboundingradius(geometry, OUT center geometry, OUT radius double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_minimumboundingradius(geometry, OUT center geometry, OUT radius double precision) TO soop;
GRANT ALL ON FUNCTION st_minimumboundingradius(geometry, OUT center geometry, OUT radius double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_minimumboundingradius(geometry, OUT center geometry, OUT radius double precision) TO argo;
GRANT ALL ON FUNCTION st_minimumboundingradius(geometry, OUT center geometry, OUT radius double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_minimumboundingradius(geometry, OUT center geometry, OUT radius double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_minimumboundingradius(geometry, OUT center geometry, OUT radius double precision) TO harvest_read_group;


--
-- Name: st_minimumclearance(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_minimumclearance(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_minimumclearance(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_minimumclearance(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_minimumclearance(geometry) TO soop;
GRANT ALL ON FUNCTION st_minimumclearance(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_minimumclearance(geometry) TO argo;
GRANT ALL ON FUNCTION st_minimumclearance(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_minimumclearance(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_minimumclearance(geometry) TO harvest_read_group;


--
-- Name: st_minimumclearanceline(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_minimumclearanceline(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_minimumclearanceline(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_minimumclearanceline(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_minimumclearanceline(geometry) TO soop;
GRANT ALL ON FUNCTION st_minimumclearanceline(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_minimumclearanceline(geometry) TO argo;
GRANT ALL ON FUNCTION st_minimumclearanceline(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_minimumclearanceline(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_minimumclearanceline(geometry) TO harvest_read_group;


--
-- Name: st_minpossiblevalue(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_minpossiblevalue(pixeltype text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_minpossiblevalue(pixeltype text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_minpossiblevalue(pixeltype text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_minpossiblevalue(pixeltype text) TO soop;
GRANT ALL ON FUNCTION st_minpossiblevalue(pixeltype text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_minpossiblevalue(pixeltype text) TO argo;
GRANT ALL ON FUNCTION st_minpossiblevalue(pixeltype text) TO aodn_dart;
GRANT ALL ON FUNCTION st_minpossiblevalue(pixeltype text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_minpossiblevalue(pixeltype text) TO harvest_read_group;


--
-- Name: st_mlinefromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mlinefromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mlinefromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mlinefromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mlinefromtext(text) TO soop;
GRANT ALL ON FUNCTION st_mlinefromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mlinefromtext(text) TO argo;
GRANT ALL ON FUNCTION st_mlinefromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_mlinefromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mlinefromtext(text) TO harvest_read_group;


--
-- Name: st_mlinefromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mlinefromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mlinefromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mlinefromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mlinefromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_mlinefromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mlinefromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_mlinefromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_mlinefromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mlinefromtext(text, integer) TO harvest_read_group;


--
-- Name: st_mlinefromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mlinefromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea) TO harvest_read_group;


--
-- Name: st_mlinefromwkb(bytea, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mlinefromwkb(bytea, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea, integer) TO soop;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea, integer) TO argo;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mlinefromwkb(bytea, integer) TO harvest_read_group;


--
-- Name: st_mpointfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mpointfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mpointfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mpointfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mpointfromtext(text) TO soop;
GRANT ALL ON FUNCTION st_mpointfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mpointfromtext(text) TO argo;
GRANT ALL ON FUNCTION st_mpointfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_mpointfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mpointfromtext(text) TO harvest_read_group;


--
-- Name: st_mpointfromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mpointfromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mpointfromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mpointfromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mpointfromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_mpointfromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mpointfromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_mpointfromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_mpointfromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mpointfromtext(text, integer) TO harvest_read_group;


--
-- Name: st_mpointfromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mpointfromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea) TO harvest_read_group;


--
-- Name: st_mpointfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mpointfromwkb(bytea, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea, integer) TO soop;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea, integer) TO argo;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mpointfromwkb(bytea, integer) TO harvest_read_group;


--
-- Name: st_mpolyfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mpolyfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mpolyfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mpolyfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mpolyfromtext(text) TO soop;
GRANT ALL ON FUNCTION st_mpolyfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mpolyfromtext(text) TO argo;
GRANT ALL ON FUNCTION st_mpolyfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_mpolyfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mpolyfromtext(text) TO harvest_read_group;


--
-- Name: st_mpolyfromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mpolyfromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mpolyfromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mpolyfromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mpolyfromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_mpolyfromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mpolyfromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_mpolyfromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_mpolyfromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mpolyfromtext(text, integer) TO harvest_read_group;


--
-- Name: st_mpolyfromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea) TO harvest_read_group;


--
-- Name: st_mpolyfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea, integer) TO soop;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea, integer) TO argo;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_mpolyfromwkb(bytea, integer) TO harvest_read_group;


--
-- Name: st_multi(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_multi(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_multi(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_multi(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_multi(geometry) TO soop;
GRANT ALL ON FUNCTION st_multi(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_multi(geometry) TO argo;
GRANT ALL ON FUNCTION st_multi(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_multi(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_multi(geometry) TO harvest_read_group;


--
-- Name: st_multilinefromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_multilinefromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_multilinefromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_multilinefromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_multilinefromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_multilinefromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_multilinefromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_multilinefromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_multilinefromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_multilinefromwkb(bytea) TO harvest_read_group;


--
-- Name: st_multilinestringfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_multilinestringfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text) TO soop;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text) TO argo;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text) TO harvest_read_group;


--
-- Name: st_multilinestringfromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_multilinestringfromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_multilinestringfromtext(text, integer) TO harvest_read_group;


--
-- Name: st_multipointfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_multipointfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_multipointfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_multipointfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_multipointfromtext(text) TO soop;
GRANT ALL ON FUNCTION st_multipointfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_multipointfromtext(text) TO argo;
GRANT ALL ON FUNCTION st_multipointfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_multipointfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_multipointfromtext(text) TO harvest_read_group;


--
-- Name: st_multipointfromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_multipointfromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea) TO harvest_read_group;


--
-- Name: st_multipointfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_multipointfromwkb(bytea, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea, integer) TO soop;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea, integer) TO argo;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_multipointfromwkb(bytea, integer) TO harvest_read_group;


--
-- Name: st_multipolyfromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea) TO harvest_read_group;


--
-- Name: st_multipolyfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea, integer) TO soop;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea, integer) TO argo;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_multipolyfromwkb(bytea, integer) TO harvest_read_group;


--
-- Name: st_multipolygonfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_multipolygonfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text) TO soop;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text) TO argo;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text) TO harvest_read_group;


--
-- Name: st_multipolygonfromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_multipolygonfromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_multipolygonfromtext(text, integer) TO harvest_read_group;


--
-- Name: st_ndims(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_ndims(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_ndims(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_ndims(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_ndims(geometry) TO soop;
GRANT ALL ON FUNCTION st_ndims(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_ndims(geometry) TO argo;
GRANT ALL ON FUNCTION st_ndims(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_ndims(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_ndims(geometry) TO harvest_read_group;


--
-- Name: st_nearestvalue(raster, geometry, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_nearestvalue(rast raster, pt geometry, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, pt geometry, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, pt geometry, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, pt geometry, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, pt geometry, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, pt geometry, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, pt geometry, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, pt geometry, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, pt geometry, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_nearestvalue(raster, integer, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_nearestvalue(rast raster, columnx integer, rowy integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, columnx integer, rowy integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, columnx integer, rowy integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, columnx integer, rowy integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, columnx integer, rowy integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, columnx integer, rowy integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, columnx integer, rowy integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, columnx integer, rowy integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, columnx integer, rowy integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_nearestvalue(raster, integer, geometry, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_nearestvalue(raster, integer, integer, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_nearestvalue(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_neighborhood(raster, geometry, integer, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_neighborhood(rast raster, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_neighborhood(raster, integer, integer, integer, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_neighborhood(rast raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_neighborhood(raster, integer, geometry, integer, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_neighborhood(raster, integer, integer, integer, integer, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_node(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_node(g geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_node(g geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_node(g geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_node(g geometry) TO soop;
GRANT ALL ON FUNCTION st_node(g geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_node(g geometry) TO argo;
GRANT ALL ON FUNCTION st_node(g geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_node(g geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_node(g geometry) TO harvest_read_group;


--
-- Name: st_normalize(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_normalize(geom geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_normalize(geom geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_normalize(geom geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_normalize(geom geometry) TO soop;
GRANT ALL ON FUNCTION st_normalize(geom geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_normalize(geom geometry) TO argo;
GRANT ALL ON FUNCTION st_normalize(geom geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_normalize(geom geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_normalize(geom geometry) TO harvest_read_group;


--
-- Name: st_notsamealignmentreason(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_notsamealignmentreason(rast1 raster, rast2 raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_notsamealignmentreason(rast1 raster, rast2 raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_notsamealignmentreason(rast1 raster, rast2 raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_notsamealignmentreason(rast1 raster, rast2 raster) TO soop;
GRANT ALL ON FUNCTION st_notsamealignmentreason(rast1 raster, rast2 raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_notsamealignmentreason(rast1 raster, rast2 raster) TO argo;
GRANT ALL ON FUNCTION st_notsamealignmentreason(rast1 raster, rast2 raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_notsamealignmentreason(rast1 raster, rast2 raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_notsamealignmentreason(rast1 raster, rast2 raster) TO harvest_read_group;


--
-- Name: st_npoints(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_npoints(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_npoints(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_npoints(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_npoints(geometry) TO soop;
GRANT ALL ON FUNCTION st_npoints(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_npoints(geometry) TO argo;
GRANT ALL ON FUNCTION st_npoints(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_npoints(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_npoints(geometry) TO harvest_read_group;


--
-- Name: st_nrings(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_nrings(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_nrings(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_nrings(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_nrings(geometry) TO soop;
GRANT ALL ON FUNCTION st_nrings(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_nrings(geometry) TO argo;
GRANT ALL ON FUNCTION st_nrings(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_nrings(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_nrings(geometry) TO harvest_read_group;


--
-- Name: st_numbands(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_numbands(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_numbands(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_numbands(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_numbands(raster) TO soop;
GRANT ALL ON FUNCTION st_numbands(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_numbands(raster) TO argo;
GRANT ALL ON FUNCTION st_numbands(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_numbands(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_numbands(raster) TO harvest_read_group;


--
-- Name: st_numgeometries(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_numgeometries(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_numgeometries(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_numgeometries(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_numgeometries(geometry) TO soop;
GRANT ALL ON FUNCTION st_numgeometries(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_numgeometries(geometry) TO argo;
GRANT ALL ON FUNCTION st_numgeometries(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_numgeometries(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_numgeometries(geometry) TO harvest_read_group;


--
-- Name: st_numinteriorring(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_numinteriorring(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_numinteriorring(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_numinteriorring(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_numinteriorring(geometry) TO soop;
GRANT ALL ON FUNCTION st_numinteriorring(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_numinteriorring(geometry) TO argo;
GRANT ALL ON FUNCTION st_numinteriorring(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_numinteriorring(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_numinteriorring(geometry) TO harvest_read_group;


--
-- Name: st_numinteriorrings(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_numinteriorrings(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_numinteriorrings(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_numinteriorrings(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_numinteriorrings(geometry) TO soop;
GRANT ALL ON FUNCTION st_numinteriorrings(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_numinteriorrings(geometry) TO argo;
GRANT ALL ON FUNCTION st_numinteriorrings(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_numinteriorrings(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_numinteriorrings(geometry) TO harvest_read_group;


--
-- Name: st_numpatches(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_numpatches(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_numpatches(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_numpatches(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_numpatches(geometry) TO soop;
GRANT ALL ON FUNCTION st_numpatches(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_numpatches(geometry) TO argo;
GRANT ALL ON FUNCTION st_numpatches(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_numpatches(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_numpatches(geometry) TO harvest_read_group;


--
-- Name: st_numpoints(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_numpoints(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_numpoints(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_numpoints(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_numpoints(geometry) TO soop;
GRANT ALL ON FUNCTION st_numpoints(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_numpoints(geometry) TO argo;
GRANT ALL ON FUNCTION st_numpoints(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_numpoints(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_numpoints(geometry) TO harvest_read_group;


--
-- Name: st_offsetcurve(geometry, double precision, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_offsetcurve(line geometry, distance double precision, params text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_offsetcurve(line geometry, distance double precision, params text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_offsetcurve(line geometry, distance double precision, params text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_offsetcurve(line geometry, distance double precision, params text) TO soop;
GRANT ALL ON FUNCTION st_offsetcurve(line geometry, distance double precision, params text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_offsetcurve(line geometry, distance double precision, params text) TO argo;
GRANT ALL ON FUNCTION st_offsetcurve(line geometry, distance double precision, params text) TO aodn_dart;
GRANT ALL ON FUNCTION st_offsetcurve(line geometry, distance double precision, params text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_offsetcurve(line geometry, distance double precision, params text) TO harvest_read_group;


--
-- Name: st_orderingequals(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_orderingequals(geometrya geometry, geometryb geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_orderingequals(geometrya geometry, geometryb geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_orderingequals(geometrya geometry, geometryb geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_orderingequals(geometrya geometry, geometryb geometry) TO soop;
GRANT ALL ON FUNCTION st_orderingequals(geometrya geometry, geometryb geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_orderingequals(geometrya geometry, geometryb geometry) TO argo;
GRANT ALL ON FUNCTION st_orderingequals(geometrya geometry, geometryb geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_orderingequals(geometrya geometry, geometryb geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_orderingequals(geometrya geometry, geometryb geometry) TO harvest_read_group;


--
-- Name: st_overlaps(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_overlaps(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_overlaps(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_overlaps(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_overlaps(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_overlaps(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_overlaps(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_overlaps(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_overlaps(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_overlaps(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_overlaps(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_overlaps(rast1 raster, rast2 raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, rast2 raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, rast2 raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, rast2 raster) TO soop;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, rast2 raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, rast2 raster) TO argo;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, rast2 raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, rast2 raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, rast2 raster) TO harvest_read_group;


--
-- Name: st_overlaps(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: st_patchn(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_patchn(geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_patchn(geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_patchn(geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_patchn(geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_patchn(geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_patchn(geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_patchn(geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_patchn(geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_patchn(geometry, integer) TO harvest_read_group;


--
-- Name: st_perimeter(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_perimeter(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_perimeter(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_perimeter(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_perimeter(geometry) TO soop;
GRANT ALL ON FUNCTION st_perimeter(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_perimeter(geometry) TO argo;
GRANT ALL ON FUNCTION st_perimeter(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_perimeter(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_perimeter(geometry) TO harvest_read_group;


--
-- Name: st_perimeter(geography, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_perimeter(geog geography, use_spheroid boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_perimeter(geog geography, use_spheroid boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_perimeter(geog geography, use_spheroid boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_perimeter(geog geography, use_spheroid boolean) TO soop;
GRANT ALL ON FUNCTION st_perimeter(geog geography, use_spheroid boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_perimeter(geog geography, use_spheroid boolean) TO argo;
GRANT ALL ON FUNCTION st_perimeter(geog geography, use_spheroid boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_perimeter(geog geography, use_spheroid boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_perimeter(geog geography, use_spheroid boolean) TO harvest_read_group;


--
-- Name: st_perimeter2d(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_perimeter2d(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_perimeter2d(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_perimeter2d(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_perimeter2d(geometry) TO soop;
GRANT ALL ON FUNCTION st_perimeter2d(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_perimeter2d(geometry) TO argo;
GRANT ALL ON FUNCTION st_perimeter2d(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_perimeter2d(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_perimeter2d(geometry) TO harvest_read_group;


--
-- Name: st_pixelascentroid(raster, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pixelascentroid(rast raster, x integer, y integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pixelascentroid(rast raster, x integer, y integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pixelascentroid(rast raster, x integer, y integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pixelascentroid(rast raster, x integer, y integer) TO soop;
GRANT ALL ON FUNCTION st_pixelascentroid(rast raster, x integer, y integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pixelascentroid(rast raster, x integer, y integer) TO argo;
GRANT ALL ON FUNCTION st_pixelascentroid(rast raster, x integer, y integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pixelascentroid(rast raster, x integer, y integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pixelascentroid(rast raster, x integer, y integer) TO harvest_read_group;


--
-- Name: st_pixelascentroids(raster, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pixelascentroids(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pixelascentroids(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pixelascentroids(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pixelascentroids(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO soop;
GRANT ALL ON FUNCTION st_pixelascentroids(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pixelascentroids(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO argo;
GRANT ALL ON FUNCTION st_pixelascentroids(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pixelascentroids(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pixelascentroids(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO harvest_read_group;


--
-- Name: st_pixelaspoint(raster, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pixelaspoint(rast raster, x integer, y integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pixelaspoint(rast raster, x integer, y integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pixelaspoint(rast raster, x integer, y integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pixelaspoint(rast raster, x integer, y integer) TO soop;
GRANT ALL ON FUNCTION st_pixelaspoint(rast raster, x integer, y integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pixelaspoint(rast raster, x integer, y integer) TO argo;
GRANT ALL ON FUNCTION st_pixelaspoint(rast raster, x integer, y integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pixelaspoint(rast raster, x integer, y integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pixelaspoint(rast raster, x integer, y integer) TO harvest_read_group;


--
-- Name: st_pixelaspoints(raster, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pixelaspoints(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pixelaspoints(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pixelaspoints(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pixelaspoints(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO soop;
GRANT ALL ON FUNCTION st_pixelaspoints(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pixelaspoints(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO argo;
GRANT ALL ON FUNCTION st_pixelaspoints(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pixelaspoints(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pixelaspoints(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO harvest_read_group;


--
-- Name: st_pixelaspolygon(raster, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pixelaspolygon(rast raster, x integer, y integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pixelaspolygon(rast raster, x integer, y integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pixelaspolygon(rast raster, x integer, y integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pixelaspolygon(rast raster, x integer, y integer) TO soop;
GRANT ALL ON FUNCTION st_pixelaspolygon(rast raster, x integer, y integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pixelaspolygon(rast raster, x integer, y integer) TO argo;
GRANT ALL ON FUNCTION st_pixelaspolygon(rast raster, x integer, y integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pixelaspolygon(rast raster, x integer, y integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pixelaspolygon(rast raster, x integer, y integer) TO harvest_read_group;


--
-- Name: st_pixelaspolygons(raster, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pixelaspolygons(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pixelaspolygons(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pixelaspolygons(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pixelaspolygons(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO soop;
GRANT ALL ON FUNCTION st_pixelaspolygons(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pixelaspolygons(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO argo;
GRANT ALL ON FUNCTION st_pixelaspolygons(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pixelaspolygons(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pixelaspolygons(rast raster, band integer, exclude_nodata_value boolean, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer) TO harvest_read_group;


--
-- Name: st_pixelheight(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pixelheight(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pixelheight(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pixelheight(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pixelheight(raster) TO soop;
GRANT ALL ON FUNCTION st_pixelheight(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pixelheight(raster) TO argo;
GRANT ALL ON FUNCTION st_pixelheight(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_pixelheight(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pixelheight(raster) TO harvest_read_group;


--
-- Name: st_pixelofvalue(raster, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO soop;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO argo;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO harvest_read_group;


--
-- Name: st_pixelofvalue(raster, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO soop;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO argo;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO harvest_read_group;


--
-- Name: st_pixelofvalue(raster, integer, double precision[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO soop;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO argo;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision[], exclude_nodata_value boolean, OUT val double precision, OUT x integer, OUT y integer) TO harvest_read_group;


--
-- Name: st_pixelofvalue(raster, integer, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO soop;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO argo;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pixelofvalue(rast raster, nband integer, search double precision, exclude_nodata_value boolean, OUT x integer, OUT y integer) TO harvest_read_group;


--
-- Name: st_pixelwidth(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pixelwidth(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pixelwidth(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pixelwidth(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pixelwidth(raster) TO soop;
GRANT ALL ON FUNCTION st_pixelwidth(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pixelwidth(raster) TO argo;
GRANT ALL ON FUNCTION st_pixelwidth(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_pixelwidth(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pixelwidth(raster) TO harvest_read_group;


--
-- Name: st_point(double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_point(double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_point(double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_point(double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_point(double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_point(double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_point(double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_point(double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_point(double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_point(double precision, double precision) TO harvest_read_group;


--
-- Name: st_point_inside_circle(geometry, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_point_inside_circle(geometry, double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: st_pointfromgeohash(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pointfromgeohash(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pointfromgeohash(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pointfromgeohash(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pointfromgeohash(text, integer) TO soop;
GRANT ALL ON FUNCTION st_pointfromgeohash(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pointfromgeohash(text, integer) TO argo;
GRANT ALL ON FUNCTION st_pointfromgeohash(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pointfromgeohash(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pointfromgeohash(text, integer) TO harvest_read_group;


--
-- Name: st_pointfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pointfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pointfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pointfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pointfromtext(text) TO soop;
GRANT ALL ON FUNCTION st_pointfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pointfromtext(text) TO argo;
GRANT ALL ON FUNCTION st_pointfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_pointfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pointfromtext(text) TO harvest_read_group;


--
-- Name: st_pointfromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pointfromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pointfromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pointfromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pointfromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_pointfromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pointfromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_pointfromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pointfromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pointfromtext(text, integer) TO harvest_read_group;


--
-- Name: st_pointfromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pointfromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea) TO harvest_read_group;


--
-- Name: st_pointfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pointfromwkb(bytea, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea, integer) TO soop;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea, integer) TO argo;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pointfromwkb(bytea, integer) TO harvest_read_group;


--
-- Name: st_pointinsidecircle(geometry, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pointinsidecircle(geometry, double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pointinsidecircle(geometry, double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pointinsidecircle(geometry, double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pointinsidecircle(geometry, double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_pointinsidecircle(geometry, double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pointinsidecircle(geometry, double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_pointinsidecircle(geometry, double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_pointinsidecircle(geometry, double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pointinsidecircle(geometry, double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: st_pointn(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pointn(geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pointn(geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pointn(geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pointn(geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_pointn(geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pointn(geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_pointn(geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_pointn(geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pointn(geometry, integer) TO harvest_read_group;


--
-- Name: st_pointonsurface(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_pointonsurface(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_pointonsurface(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_pointonsurface(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_pointonsurface(geometry) TO soop;
GRANT ALL ON FUNCTION st_pointonsurface(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_pointonsurface(geometry) TO argo;
GRANT ALL ON FUNCTION st_pointonsurface(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_pointonsurface(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_pointonsurface(geometry) TO harvest_read_group;


--
-- Name: st_points(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_points(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_points(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_points(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_points(geometry) TO soop;
GRANT ALL ON FUNCTION st_points(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_points(geometry) TO argo;
GRANT ALL ON FUNCTION st_points(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_points(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_points(geometry) TO harvest_read_group;


--
-- Name: st_polyfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_polyfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_polyfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_polyfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_polyfromtext(text) TO soop;
GRANT ALL ON FUNCTION st_polyfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_polyfromtext(text) TO argo;
GRANT ALL ON FUNCTION st_polyfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_polyfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_polyfromtext(text) TO harvest_read_group;


--
-- Name: st_polyfromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_polyfromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_polyfromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_polyfromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_polyfromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_polyfromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_polyfromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_polyfromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_polyfromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_polyfromtext(text, integer) TO harvest_read_group;


--
-- Name: st_polyfromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_polyfromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea) TO harvest_read_group;


--
-- Name: st_polyfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_polyfromwkb(bytea, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea, integer) TO soop;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea, integer) TO argo;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_polyfromwkb(bytea, integer) TO harvest_read_group;


--
-- Name: st_polygon(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_polygon(geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_polygon(geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_polygon(geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_polygon(geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_polygon(geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_polygon(geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_polygon(geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_polygon(geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_polygon(geometry, integer) TO harvest_read_group;


--
-- Name: st_polygon(raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_polygon(rast raster, band integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_polygon(rast raster, band integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_polygon(rast raster, band integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_polygon(rast raster, band integer) TO soop;
GRANT ALL ON FUNCTION st_polygon(rast raster, band integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_polygon(rast raster, band integer) TO argo;
GRANT ALL ON FUNCTION st_polygon(rast raster, band integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_polygon(rast raster, band integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_polygon(rast raster, band integer) TO harvest_read_group;


--
-- Name: st_polygonfromtext(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_polygonfromtext(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_polygonfromtext(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_polygonfromtext(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_polygonfromtext(text) TO soop;
GRANT ALL ON FUNCTION st_polygonfromtext(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_polygonfromtext(text) TO argo;
GRANT ALL ON FUNCTION st_polygonfromtext(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_polygonfromtext(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_polygonfromtext(text) TO harvest_read_group;


--
-- Name: st_polygonfromtext(text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_polygonfromtext(text, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_polygonfromtext(text, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_polygonfromtext(text, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_polygonfromtext(text, integer) TO soop;
GRANT ALL ON FUNCTION st_polygonfromtext(text, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_polygonfromtext(text, integer) TO argo;
GRANT ALL ON FUNCTION st_polygonfromtext(text, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_polygonfromtext(text, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_polygonfromtext(text, integer) TO harvest_read_group;


--
-- Name: st_polygonfromwkb(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_polygonfromwkb(bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea) TO soop;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea) TO argo;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea) TO harvest_read_group;


--
-- Name: st_polygonfromwkb(bytea, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_polygonfromwkb(bytea, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea, integer) TO soop;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea, integer) TO argo;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_polygonfromwkb(bytea, integer) TO harvest_read_group;


--
-- Name: st_polygonize(geometry[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_polygonize(geometry[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_polygonize(geometry[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_polygonize(geometry[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_polygonize(geometry[]) TO soop;
GRANT ALL ON FUNCTION st_polygonize(geometry[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_polygonize(geometry[]) TO argo;
GRANT ALL ON FUNCTION st_polygonize(geometry[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_polygonize(geometry[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_polygonize(geometry[]) TO harvest_read_group;


--
-- Name: st_project(geography, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_project(geog geography, distance double precision, azimuth double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_project(geog geography, distance double precision, azimuth double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_project(geog geography, distance double precision, azimuth double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_project(geog geography, distance double precision, azimuth double precision) TO soop;
GRANT ALL ON FUNCTION st_project(geog geography, distance double precision, azimuth double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_project(geog geography, distance double precision, azimuth double precision) TO argo;
GRANT ALL ON FUNCTION st_project(geog geography, distance double precision, azimuth double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_project(geog geography, distance double precision, azimuth double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_project(geog geography, distance double precision, azimuth double precision) TO harvest_read_group;


--
-- Name: st_quantile(raster, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_quantile(raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rast raster, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rast raster, quantile double precision) TO harvest_read_group;


--
-- Name: st_quantile(text, text, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_quantile(text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, quantile double precision) TO harvest_read_group;


--
-- Name: st_quantile(raster, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rast raster, exclude_nodata_value boolean, quantile double precision) TO harvest_read_group;


--
-- Name: st_quantile(raster, integer, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_quantile(raster, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, quantile double precision) TO harvest_read_group;


--
-- Name: st_quantile(text, text, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision) TO harvest_read_group;


--
-- Name: st_quantile(text, text, integer, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_quantile(text, text, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, quantile double precision) TO harvest_read_group;


--
-- Name: st_quantile(raster, integer, boolean, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_quantile(raster, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantile double precision) TO harvest_read_group;


--
-- Name: st_quantile(text, text, integer, boolean, double precision[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantiles double precision[], OUT quantile double precision, OUT value double precision) TO harvest_read_group;


--
-- Name: st_quantile(text, text, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantile double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantile double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantile double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantile double precision) TO soop;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantile double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantile double precision) TO argo;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantile double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantile double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantile double precision) TO harvest_read_group;


--
-- Name: st_range4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_range4ma(double precision[], text, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO soop;
GRANT ALL ON FUNCTION st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO argo;
GRANT ALL ON FUNCTION st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_read_group;


--
-- Name: st_rastertoworldcoord(raster, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO soop;
GRANT ALL ON FUNCTION st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO argo;
GRANT ALL ON FUNCTION st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision) TO harvest_read_group;


--
-- Name: st_rastertoworldcoordx(raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer) TO soop;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer) TO argo;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer) TO harvest_read_group;


--
-- Name: st_rastertoworldcoordx(raster, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer, yr integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer, yr integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer, yr integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer, yr integer) TO soop;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer, yr integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer, yr integer) TO argo;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer, yr integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer, yr integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rastertoworldcoordx(rast raster, xr integer, yr integer) TO harvest_read_group;


--
-- Name: st_rastertoworldcoordy(raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, yr integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, yr integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, yr integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, yr integer) TO soop;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, yr integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, yr integer) TO argo;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, yr integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, yr integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, yr integer) TO harvest_read_group;


--
-- Name: st_rastertoworldcoordy(raster, integer, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, xr integer, yr integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, xr integer, yr integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, xr integer, yr integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, xr integer, yr integer) TO soop;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, xr integer, yr integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, xr integer, yr integer) TO argo;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, xr integer, yr integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, xr integer, yr integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rastertoworldcoordy(rast raster, xr integer, yr integer) TO harvest_read_group;


--
-- Name: st_reclass(raster, reclassarg[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO soop;
GRANT ALL ON FUNCTION st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO argo;
GRANT ALL ON FUNCTION st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_reclass(rast raster, VARIADIC reclassargset reclassarg[]) TO harvest_read_group;


--
-- Name: st_reclass(raster, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_reclass(rast raster, reclassexpr text, pixeltype text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_reclass(rast raster, reclassexpr text, pixeltype text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_reclass(rast raster, reclassexpr text, pixeltype text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_reclass(rast raster, reclassexpr text, pixeltype text) TO soop;
GRANT ALL ON FUNCTION st_reclass(rast raster, reclassexpr text, pixeltype text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_reclass(rast raster, reclassexpr text, pixeltype text) TO argo;
GRANT ALL ON FUNCTION st_reclass(rast raster, reclassexpr text, pixeltype text) TO aodn_dart;
GRANT ALL ON FUNCTION st_reclass(rast raster, reclassexpr text, pixeltype text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_reclass(rast raster, reclassexpr text, pixeltype text) TO harvest_read_group;


--
-- Name: st_reclass(raster, integer, text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_reclass(rast raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_reclass(rast raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_reclass(rast raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_reclass(rast raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_reclass(rast raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_reclass(rast raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_reclass(rast raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_reclass(rast raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_reclass(rast raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision) TO harvest_read_group;


--
-- Name: st_relate(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_relate(geometry, geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, integer) TO harvest_read_group;


--
-- Name: st_relate(geometry, geometry, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, text) TO soop;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, text) TO argo;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_relate(geom1 geometry, geom2 geometry, text) TO harvest_read_group;


--
-- Name: st_relatematch(text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_relatematch(text, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_relatematch(text, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_relatematch(text, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_relatematch(text, text) TO soop;
GRANT ALL ON FUNCTION st_relatematch(text, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_relatematch(text, text) TO argo;
GRANT ALL ON FUNCTION st_relatematch(text, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_relatematch(text, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_relatematch(text, text) TO harvest_read_group;


--
-- Name: st_removepoint(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_removepoint(geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_removepoint(geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_removepoint(geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_removepoint(geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_removepoint(geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_removepoint(geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_removepoint(geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_removepoint(geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_removepoint(geometry, integer) TO harvest_read_group;


--
-- Name: st_removerepeatedpoints(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_removerepeatedpoints(geom geometry, tolerance double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_removerepeatedpoints(geom geometry, tolerance double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_removerepeatedpoints(geom geometry, tolerance double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_removerepeatedpoints(geom geometry, tolerance double precision) TO soop;
GRANT ALL ON FUNCTION st_removerepeatedpoints(geom geometry, tolerance double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_removerepeatedpoints(geom geometry, tolerance double precision) TO argo;
GRANT ALL ON FUNCTION st_removerepeatedpoints(geom geometry, tolerance double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_removerepeatedpoints(geom geometry, tolerance double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_removerepeatedpoints(geom geometry, tolerance double precision) TO harvest_read_group;


--
-- Name: st_resample(raster, raster, boolean, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, usescale boolean, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, usescale boolean, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, usescale boolean, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, usescale boolean, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, usescale boolean, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, usescale boolean, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, usescale boolean, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, usescale boolean, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, usescale boolean, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_resample(raster, raster, text, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, algorithm text, maxerr double precision, usescale boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, algorithm text, maxerr double precision, usescale boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, algorithm text, maxerr double precision, usescale boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, algorithm text, maxerr double precision, usescale boolean) TO soop;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, algorithm text, maxerr double precision, usescale boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, algorithm text, maxerr double precision, usescale boolean) TO argo;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, algorithm text, maxerr double precision, usescale boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, algorithm text, maxerr double precision, usescale boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_resample(rast raster, ref raster, algorithm text, maxerr double precision, usescale boolean) TO harvest_read_group;


--
-- Name: st_resample(raster, double precision, double precision, double precision, double precision, double precision, double precision, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_resample(rast raster, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_resample(rast raster, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_resample(rast raster, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_resample(rast raster, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_resample(rast raster, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_resample(rast raster, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_resample(rast raster, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_resample(rast raster, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_resample(rast raster, scalex double precision, scaley double precision, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_resample(raster, integer, integer, double precision, double precision, double precision, double precision, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_resample(rast raster, width integer, height integer, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_resample(rast raster, width integer, height integer, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_resample(rast raster, width integer, height integer, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_resample(rast raster, width integer, height integer, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_resample(rast raster, width integer, height integer, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_resample(rast raster, width integer, height integer, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_resample(rast raster, width integer, height integer, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_resample(rast raster, width integer, height integer, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_resample(rast raster, width integer, height integer, gridx double precision, gridy double precision, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_rescale(raster, double precision, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rescale(rast raster, scalexy double precision, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalexy double precision, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalexy double precision, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalexy double precision, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalexy double precision, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalexy double precision, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalexy double precision, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalexy double precision, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalexy double precision, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_rescale(raster, double precision, double precision, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rescale(rast raster, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rescale(rast raster, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_resize(raster, double precision, double precision, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_resize(rast raster, percentwidth double precision, percentheight double precision, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_resize(rast raster, percentwidth double precision, percentheight double precision, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_resize(rast raster, percentwidth double precision, percentheight double precision, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_resize(rast raster, percentwidth double precision, percentheight double precision, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_resize(rast raster, percentwidth double precision, percentheight double precision, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_resize(rast raster, percentwidth double precision, percentheight double precision, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_resize(rast raster, percentwidth double precision, percentheight double precision, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_resize(rast raster, percentwidth double precision, percentheight double precision, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_resize(rast raster, percentwidth double precision, percentheight double precision, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_resize(raster, integer, integer, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_resize(rast raster, width integer, height integer, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_resize(rast raster, width integer, height integer, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_resize(rast raster, width integer, height integer, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_resize(rast raster, width integer, height integer, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_resize(rast raster, width integer, height integer, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_resize(rast raster, width integer, height integer, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_resize(rast raster, width integer, height integer, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_resize(rast raster, width integer, height integer, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_resize(rast raster, width integer, height integer, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_resize(raster, text, text, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_resize(rast raster, width text, height text, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_resize(rast raster, width text, height text, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_resize(rast raster, width text, height text, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_resize(rast raster, width text, height text, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_resize(rast raster, width text, height text, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_resize(rast raster, width text, height text, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_resize(rast raster, width text, height text, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_resize(rast raster, width text, height text, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_resize(rast raster, width text, height text, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_reskew(raster, double precision, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_reskew(rast raster, skewxy double precision, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewxy double precision, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewxy double precision, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewxy double precision, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewxy double precision, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewxy double precision, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewxy double precision, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewxy double precision, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewxy double precision, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_reskew(raster, double precision, double precision, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_reskew(rast raster, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_reskew(rast raster, skewx double precision, skewy double precision, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_retile(regclass, name, geometry, double precision, double precision, integer, integer, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_retile(tab regclass, col name, ext geometry, sfx double precision, sfy double precision, tw integer, th integer, algo text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_retile(tab regclass, col name, ext geometry, sfx double precision, sfy double precision, tw integer, th integer, algo text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_retile(tab regclass, col name, ext geometry, sfx double precision, sfy double precision, tw integer, th integer, algo text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_retile(tab regclass, col name, ext geometry, sfx double precision, sfy double precision, tw integer, th integer, algo text) TO soop;
GRANT ALL ON FUNCTION st_retile(tab regclass, col name, ext geometry, sfx double precision, sfy double precision, tw integer, th integer, algo text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_retile(tab regclass, col name, ext geometry, sfx double precision, sfy double precision, tw integer, th integer, algo text) TO argo;
GRANT ALL ON FUNCTION st_retile(tab regclass, col name, ext geometry, sfx double precision, sfy double precision, tw integer, th integer, algo text) TO aodn_dart;
GRANT ALL ON FUNCTION st_retile(tab regclass, col name, ext geometry, sfx double precision, sfy double precision, tw integer, th integer, algo text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_retile(tab regclass, col name, ext geometry, sfx double precision, sfy double precision, tw integer, th integer, algo text) TO harvest_read_group;


--
-- Name: st_reverse(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_reverse(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_reverse(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_reverse(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_reverse(geometry) TO soop;
GRANT ALL ON FUNCTION st_reverse(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_reverse(geometry) TO argo;
GRANT ALL ON FUNCTION st_reverse(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_reverse(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_reverse(geometry) TO harvest_read_group;


--
-- Name: st_rotate(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rotate(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision) TO harvest_read_group;


--
-- Name: st_rotate(geometry, double precision, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rotate(geometry, double precision, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, geometry) TO soop;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, geometry) TO argo;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, geometry) TO harvest_read_group;


--
-- Name: st_rotate(geometry, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rotate(geometry, double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rotate(geometry, double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: st_rotatex(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rotatex(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rotatex(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rotatex(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rotatex(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_rotatex(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rotatex(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_rotatex(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_rotatex(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rotatex(geometry, double precision) TO harvest_read_group;


--
-- Name: st_rotatey(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rotatey(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rotatey(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rotatey(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rotatey(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_rotatey(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rotatey(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_rotatey(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_rotatey(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rotatey(geometry, double precision) TO harvest_read_group;


--
-- Name: st_rotatez(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rotatez(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rotatez(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rotatez(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rotatez(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_rotatez(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rotatez(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_rotatez(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_rotatez(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rotatez(geometry, double precision) TO harvest_read_group;


--
-- Name: st_rotation(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_rotation(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_rotation(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_rotation(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_rotation(raster) TO soop;
GRANT ALL ON FUNCTION st_rotation(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_rotation(raster) TO argo;
GRANT ALL ON FUNCTION st_rotation(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_rotation(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_rotation(raster) TO harvest_read_group;


--
-- Name: st_roughness(raster, integer, text, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO soop;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO argo;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO harvest_read_group;


--
-- Name: st_roughness(raster, integer, raster, text, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO soop;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO argo;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_roughness(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO harvest_read_group;


--
-- Name: st_samealignment(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_samealignment(rast1 raster, rast2 raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_samealignment(rast1 raster, rast2 raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_samealignment(rast1 raster, rast2 raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_samealignment(rast1 raster, rast2 raster) TO soop;
GRANT ALL ON FUNCTION st_samealignment(rast1 raster, rast2 raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_samealignment(rast1 raster, rast2 raster) TO argo;
GRANT ALL ON FUNCTION st_samealignment(rast1 raster, rast2 raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_samealignment(rast1 raster, rast2 raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_samealignment(rast1 raster, rast2 raster) TO harvest_read_group;


--
-- Name: st_samealignment(double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision) TO soop;
GRANT ALL ON FUNCTION st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision) TO argo;
GRANT ALL ON FUNCTION st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision) TO harvest_read_group;


--
-- Name: st_scale(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_scale(geometry, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_scale(geometry, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_scale(geometry, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_scale(geometry, geometry) TO soop;
GRANT ALL ON FUNCTION st_scale(geometry, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_scale(geometry, geometry) TO argo;
GRANT ALL ON FUNCTION st_scale(geometry, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_scale(geometry, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_scale(geometry, geometry) TO harvest_read_group;


--
-- Name: st_scale(geometry, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision) TO harvest_read_group;


--
-- Name: st_scale(geometry, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_scale(geometry, double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: st_scalex(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_scalex(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_scalex(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_scalex(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_scalex(raster) TO soop;
GRANT ALL ON FUNCTION st_scalex(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_scalex(raster) TO argo;
GRANT ALL ON FUNCTION st_scalex(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_scalex(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_scalex(raster) TO harvest_read_group;


--
-- Name: st_scaley(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_scaley(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_scaley(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_scaley(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_scaley(raster) TO soop;
GRANT ALL ON FUNCTION st_scaley(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_scaley(raster) TO argo;
GRANT ALL ON FUNCTION st_scaley(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_scaley(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_scaley(raster) TO harvest_read_group;


--
-- Name: st_segmentize(geography, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_segmentize(geog geography, max_segment_length double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_segmentize(geog geography, max_segment_length double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_segmentize(geog geography, max_segment_length double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_segmentize(geog geography, max_segment_length double precision) TO soop;
GRANT ALL ON FUNCTION st_segmentize(geog geography, max_segment_length double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_segmentize(geog geography, max_segment_length double precision) TO argo;
GRANT ALL ON FUNCTION st_segmentize(geog geography, max_segment_length double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_segmentize(geog geography, max_segment_length double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_segmentize(geog geography, max_segment_length double precision) TO harvest_read_group;


--
-- Name: st_segmentize(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_segmentize(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_segmentize(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_segmentize(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_segmentize(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_segmentize(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_segmentize(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_segmentize(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_segmentize(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_segmentize(geometry, double precision) TO harvest_read_group;


--
-- Name: st_setbandisnodata(raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setbandisnodata(rast raster, band integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setbandisnodata(rast raster, band integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setbandisnodata(rast raster, band integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setbandisnodata(rast raster, band integer) TO soop;
GRANT ALL ON FUNCTION st_setbandisnodata(rast raster, band integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setbandisnodata(rast raster, band integer) TO argo;
GRANT ALL ON FUNCTION st_setbandisnodata(rast raster, band integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_setbandisnodata(rast raster, band integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setbandisnodata(rast raster, band integer) TO harvest_read_group;


--
-- Name: st_setbandnodatavalue(raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, nodatavalue double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, nodatavalue double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, nodatavalue double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, nodatavalue double precision) TO soop;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, nodatavalue double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, nodatavalue double precision) TO argo;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, nodatavalue double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, nodatavalue double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, nodatavalue double precision) TO harvest_read_group;


--
-- Name: st_setbandnodatavalue(raster, integer, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, band integer, nodatavalue double precision, forcechecking boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, band integer, nodatavalue double precision, forcechecking boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, band integer, nodatavalue double precision, forcechecking boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, band integer, nodatavalue double precision, forcechecking boolean) TO soop;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, band integer, nodatavalue double precision, forcechecking boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, band integer, nodatavalue double precision, forcechecking boolean) TO argo;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, band integer, nodatavalue double precision, forcechecking boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, band integer, nodatavalue double precision, forcechecking boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setbandnodatavalue(rast raster, band integer, nodatavalue double precision, forcechecking boolean) TO harvest_read_group;


--
-- Name: st_seteffectivearea(geometry, double precision, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_seteffectivearea(geometry, double precision, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_seteffectivearea(geometry, double precision, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_seteffectivearea(geometry, double precision, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_seteffectivearea(geometry, double precision, integer) TO soop;
GRANT ALL ON FUNCTION st_seteffectivearea(geometry, double precision, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_seteffectivearea(geometry, double precision, integer) TO argo;
GRANT ALL ON FUNCTION st_seteffectivearea(geometry, double precision, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_seteffectivearea(geometry, double precision, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_seteffectivearea(geometry, double precision, integer) TO harvest_read_group;


--
-- Name: st_setgeoreference(raster, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setgeoreference(rast raster, georef text, format text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, georef text, format text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, georef text, format text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, georef text, format text) TO soop;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, georef text, format text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, georef text, format text) TO argo;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, georef text, format text) TO aodn_dart;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, georef text, format text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, georef text, format text) TO harvest_read_group;


--
-- Name: st_setgeoreference(raster, double precision, double precision, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setgeoreference(rast raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision) TO soop;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision) TO argo;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setgeoreference(rast raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision) TO harvest_read_group;


--
-- Name: st_setgeotransform(raster, double precision, double precision, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setgeotransform(rast raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setgeotransform(rast raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setgeotransform(rast raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setgeotransform(rast raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision) TO soop;
GRANT ALL ON FUNCTION st_setgeotransform(rast raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setgeotransform(rast raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision) TO argo;
GRANT ALL ON FUNCTION st_setgeotransform(rast raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_setgeotransform(rast raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setgeotransform(rast raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision) TO harvest_read_group;


--
-- Name: st_setpoint(geometry, integer, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setpoint(geometry, integer, geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setpoint(geometry, integer, geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setpoint(geometry, integer, geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setpoint(geometry, integer, geometry) TO soop;
GRANT ALL ON FUNCTION st_setpoint(geometry, integer, geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setpoint(geometry, integer, geometry) TO argo;
GRANT ALL ON FUNCTION st_setpoint(geometry, integer, geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_setpoint(geometry, integer, geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setpoint(geometry, integer, geometry) TO harvest_read_group;


--
-- Name: st_setrotation(raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setrotation(rast raster, rotation double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setrotation(rast raster, rotation double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setrotation(rast raster, rotation double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setrotation(rast raster, rotation double precision) TO soop;
GRANT ALL ON FUNCTION st_setrotation(rast raster, rotation double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setrotation(rast raster, rotation double precision) TO argo;
GRANT ALL ON FUNCTION st_setrotation(rast raster, rotation double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_setrotation(rast raster, rotation double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setrotation(rast raster, rotation double precision) TO harvest_read_group;


--
-- Name: st_setscale(raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setscale(rast raster, scale double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setscale(rast raster, scale double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setscale(rast raster, scale double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setscale(rast raster, scale double precision) TO soop;
GRANT ALL ON FUNCTION st_setscale(rast raster, scale double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setscale(rast raster, scale double precision) TO argo;
GRANT ALL ON FUNCTION st_setscale(rast raster, scale double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_setscale(rast raster, scale double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setscale(rast raster, scale double precision) TO harvest_read_group;


--
-- Name: st_setscale(raster, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setscale(rast raster, scalex double precision, scaley double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setscale(rast raster, scalex double precision, scaley double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setscale(rast raster, scalex double precision, scaley double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setscale(rast raster, scalex double precision, scaley double precision) TO soop;
GRANT ALL ON FUNCTION st_setscale(rast raster, scalex double precision, scaley double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setscale(rast raster, scalex double precision, scaley double precision) TO argo;
GRANT ALL ON FUNCTION st_setscale(rast raster, scalex double precision, scaley double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_setscale(rast raster, scalex double precision, scaley double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setscale(rast raster, scalex double precision, scaley double precision) TO harvest_read_group;


--
-- Name: st_setskew(raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setskew(rast raster, skew double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setskew(rast raster, skew double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setskew(rast raster, skew double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setskew(rast raster, skew double precision) TO soop;
GRANT ALL ON FUNCTION st_setskew(rast raster, skew double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setskew(rast raster, skew double precision) TO argo;
GRANT ALL ON FUNCTION st_setskew(rast raster, skew double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_setskew(rast raster, skew double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setskew(rast raster, skew double precision) TO harvest_read_group;


--
-- Name: st_setskew(raster, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setskew(rast raster, skewx double precision, skewy double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setskew(rast raster, skewx double precision, skewy double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setskew(rast raster, skewx double precision, skewy double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setskew(rast raster, skewx double precision, skewy double precision) TO soop;
GRANT ALL ON FUNCTION st_setskew(rast raster, skewx double precision, skewy double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setskew(rast raster, skewx double precision, skewy double precision) TO argo;
GRANT ALL ON FUNCTION st_setskew(rast raster, skewx double precision, skewy double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_setskew(rast raster, skewx double precision, skewy double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setskew(rast raster, skewx double precision, skewy double precision) TO harvest_read_group;


--
-- Name: st_setsrid(geography, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setsrid(geog geography, srid integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setsrid(geog geography, srid integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setsrid(geog geography, srid integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setsrid(geog geography, srid integer) TO soop;
GRANT ALL ON FUNCTION st_setsrid(geog geography, srid integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setsrid(geog geography, srid integer) TO argo;
GRANT ALL ON FUNCTION st_setsrid(geog geography, srid integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_setsrid(geog geography, srid integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setsrid(geog geography, srid integer) TO harvest_read_group;


--
-- Name: st_setsrid(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setsrid(geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setsrid(geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setsrid(geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setsrid(geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_setsrid(geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setsrid(geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_setsrid(geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_setsrid(geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setsrid(geometry, integer) TO harvest_read_group;


--
-- Name: st_setsrid(raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setsrid(rast raster, srid integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setsrid(rast raster, srid integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setsrid(rast raster, srid integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setsrid(rast raster, srid integer) TO soop;
GRANT ALL ON FUNCTION st_setsrid(rast raster, srid integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setsrid(rast raster, srid integer) TO argo;
GRANT ALL ON FUNCTION st_setsrid(rast raster, srid integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_setsrid(rast raster, srid integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setsrid(rast raster, srid integer) TO harvest_read_group;


--
-- Name: st_setupperleft(raster, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setupperleft(rast raster, upperleftx double precision, upperlefty double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setupperleft(rast raster, upperleftx double precision, upperlefty double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setupperleft(rast raster, upperleftx double precision, upperlefty double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setupperleft(rast raster, upperleftx double precision, upperlefty double precision) TO soop;
GRANT ALL ON FUNCTION st_setupperleft(rast raster, upperleftx double precision, upperlefty double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setupperleft(rast raster, upperleftx double precision, upperlefty double precision) TO argo;
GRANT ALL ON FUNCTION st_setupperleft(rast raster, upperleftx double precision, upperlefty double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_setupperleft(rast raster, upperleftx double precision, upperlefty double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setupperleft(rast raster, upperleftx double precision, upperlefty double precision) TO harvest_read_group;


--
-- Name: st_setvalue(raster, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setvalue(rast raster, geom geometry, newvalue double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setvalue(rast raster, geom geometry, newvalue double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setvalue(rast raster, geom geometry, newvalue double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setvalue(rast raster, geom geometry, newvalue double precision) TO soop;
GRANT ALL ON FUNCTION st_setvalue(rast raster, geom geometry, newvalue double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setvalue(rast raster, geom geometry, newvalue double precision) TO argo;
GRANT ALL ON FUNCTION st_setvalue(rast raster, geom geometry, newvalue double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_setvalue(rast raster, geom geometry, newvalue double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setvalue(rast raster, geom geometry, newvalue double precision) TO harvest_read_group;


--
-- Name: st_setvalue(raster, integer, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setvalue(rast raster, x integer, y integer, newvalue double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setvalue(rast raster, x integer, y integer, newvalue double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setvalue(rast raster, x integer, y integer, newvalue double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setvalue(rast raster, x integer, y integer, newvalue double precision) TO soop;
GRANT ALL ON FUNCTION st_setvalue(rast raster, x integer, y integer, newvalue double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setvalue(rast raster, x integer, y integer, newvalue double precision) TO argo;
GRANT ALL ON FUNCTION st_setvalue(rast raster, x integer, y integer, newvalue double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_setvalue(rast raster, x integer, y integer, newvalue double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setvalue(rast raster, x integer, y integer, newvalue double precision) TO harvest_read_group;


--
-- Name: st_setvalue(raster, integer, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setvalue(rast raster, nband integer, geom geometry, newvalue double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setvalue(rast raster, nband integer, geom geometry, newvalue double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setvalue(rast raster, nband integer, geom geometry, newvalue double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setvalue(rast raster, nband integer, geom geometry, newvalue double precision) TO soop;
GRANT ALL ON FUNCTION st_setvalue(rast raster, nband integer, geom geometry, newvalue double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setvalue(rast raster, nband integer, geom geometry, newvalue double precision) TO argo;
GRANT ALL ON FUNCTION st_setvalue(rast raster, nband integer, geom geometry, newvalue double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_setvalue(rast raster, nband integer, geom geometry, newvalue double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setvalue(rast raster, nband integer, geom geometry, newvalue double precision) TO harvest_read_group;


--
-- Name: st_setvalue(raster, integer, integer, integer, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setvalue(rast raster, band integer, x integer, y integer, newvalue double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setvalue(rast raster, band integer, x integer, y integer, newvalue double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setvalue(rast raster, band integer, x integer, y integer, newvalue double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setvalue(rast raster, band integer, x integer, y integer, newvalue double precision) TO soop;
GRANT ALL ON FUNCTION st_setvalue(rast raster, band integer, x integer, y integer, newvalue double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setvalue(rast raster, band integer, x integer, y integer, newvalue double precision) TO argo;
GRANT ALL ON FUNCTION st_setvalue(rast raster, band integer, x integer, y integer, newvalue double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_setvalue(rast raster, band integer, x integer, y integer, newvalue double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setvalue(rast raster, band integer, x integer, y integer, newvalue double precision) TO harvest_read_group;


--
-- Name: st_setvalues(raster, integer, geomval[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, geomvalset geomval[], keepnodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, geomvalset geomval[], keepnodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, geomvalset geomval[], keepnodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, geomvalset geomval[], keepnodata boolean) TO soop;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, geomvalset geomval[], keepnodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, geomvalset geomval[], keepnodata boolean) TO argo;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, geomvalset geomval[], keepnodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, geomvalset geomval[], keepnodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, geomvalset geomval[], keepnodata boolean) TO harvest_read_group;


--
-- Name: st_setvalues(raster, integer, integer, integer, double precision[], boolean[], boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], keepnodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], keepnodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], keepnodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], keepnodata boolean) TO soop;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], keepnodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], keepnodata boolean) TO argo;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], keepnodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], keepnodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[], keepnodata boolean) TO harvest_read_group;


--
-- Name: st_setvalues(raster, integer, integer, integer, double precision[], double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean) TO soop;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean) TO argo;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean) TO harvest_read_group;


--
-- Name: st_setvalues(raster, integer, integer, integer, integer, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setvalues(rast raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setvalues(rast raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setvalues(rast raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setvalues(rast raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO soop;
GRANT ALL ON FUNCTION st_setvalues(rast raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setvalues(rast raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO argo;
GRANT ALL ON FUNCTION st_setvalues(rast raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_setvalues(rast raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setvalues(rast raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO harvest_read_group;


--
-- Name: st_setvalues(raster, integer, integer, integer, integer, integer, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO soop;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO argo;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_setvalues(rast raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean) TO harvest_read_group;


--
-- Name: st_sharedpaths(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_sharedpaths(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_sharedpaths(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_sharedpaths(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_sharedpaths(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_sharedpaths(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_sharedpaths(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_sharedpaths(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_sharedpaths(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_sharedpaths(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_shift_longitude(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_shift_longitude(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_shift_longitude(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_shift_longitude(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_shift_longitude(geometry) TO soop;
GRANT ALL ON FUNCTION st_shift_longitude(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_shift_longitude(geometry) TO argo;
GRANT ALL ON FUNCTION st_shift_longitude(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_shift_longitude(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_shift_longitude(geometry) TO harvest_read_group;


--
-- Name: st_shiftlongitude(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_shiftlongitude(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_shiftlongitude(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_shiftlongitude(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_shiftlongitude(geometry) TO soop;
GRANT ALL ON FUNCTION st_shiftlongitude(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_shiftlongitude(geometry) TO argo;
GRANT ALL ON FUNCTION st_shiftlongitude(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_shiftlongitude(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_shiftlongitude(geometry) TO harvest_read_group;


--
-- Name: st_shortestline(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_shortestline(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_shortestline(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_shortestline(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_shortestline(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_shortestline(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_shortestline(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_shortestline(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_shortestline(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_shortestline(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_simplify(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_simplify(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision) TO harvest_read_group;


--
-- Name: st_simplify(geometry, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_simplify(geometry, double precision, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision, boolean) TO soop;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision, boolean) TO argo;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_simplify(geometry, double precision, boolean) TO harvest_read_group;


--
-- Name: st_simplifypreservetopology(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_simplifypreservetopology(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_simplifypreservetopology(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_simplifypreservetopology(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_simplifypreservetopology(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_simplifypreservetopology(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_simplifypreservetopology(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_simplifypreservetopology(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_simplifypreservetopology(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_simplifypreservetopology(geometry, double precision) TO harvest_read_group;


--
-- Name: st_simplifyvw(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_simplifyvw(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_simplifyvw(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_simplifyvw(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_simplifyvw(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_simplifyvw(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_simplifyvw(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_simplifyvw(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_simplifyvw(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_simplifyvw(geometry, double precision) TO harvest_read_group;


--
-- Name: st_skewx(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_skewx(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_skewx(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_skewx(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_skewx(raster) TO soop;
GRANT ALL ON FUNCTION st_skewx(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_skewx(raster) TO argo;
GRANT ALL ON FUNCTION st_skewx(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_skewx(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_skewx(raster) TO harvest_read_group;


--
-- Name: st_skewy(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_skewy(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_skewy(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_skewy(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_skewy(raster) TO soop;
GRANT ALL ON FUNCTION st_skewy(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_skewy(raster) TO argo;
GRANT ALL ON FUNCTION st_skewy(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_skewy(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_skewy(raster) TO harvest_read_group;


--
-- Name: st_slope(raster, integer, text, text, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO soop;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO argo;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO harvest_read_group;


--
-- Name: st_slope(raster, integer, raster, text, text, double precision, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, customextent raster, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, customextent raster, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, customextent raster, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, customextent raster, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO soop;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, customextent raster, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, customextent raster, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO argo;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, customextent raster, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, customextent raster, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_slope(rast raster, nband integer, customextent raster, pixeltype text, units text, scale double precision, interpolate_nodata boolean) TO harvest_read_group;


--
-- Name: st_snap(geometry, geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_snap(geom1 geometry, geom2 geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_snap(geom1 geometry, geom2 geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_snap(geom1 geometry, geom2 geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_snap(geom1 geometry, geom2 geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_snap(geom1 geometry, geom2 geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_snap(geom1 geometry, geom2 geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_snap(geom1 geometry, geom2 geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_snap(geom1 geometry, geom2 geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_snap(geom1 geometry, geom2 geometry, double precision) TO harvest_read_group;


--
-- Name: st_snaptogrid(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision) TO harvest_read_group;


--
-- Name: st_snaptogrid(geometry, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision) TO harvest_read_group;


--
-- Name: st_snaptogrid(geometry, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_snaptogrid(geometry, double precision, double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: st_snaptogrid(geometry, geometry, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: st_snaptogrid(raster, double precision, double precision, double precision, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_snaptogrid(raster, double precision, double precision, double precision, double precision, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_snaptogrid(raster, double precision, double precision, text, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO soop;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO argo;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_snaptogrid(rast raster, gridx double precision, gridy double precision, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO harvest_read_group;


--
-- Name: st_split(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_split(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_split(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_split(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_split(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_split(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_split(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_split(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_split(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_split(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_srid(geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_srid(geog geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_srid(geog geography) TO harvest_write_group;
GRANT ALL ON FUNCTION st_srid(geog geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_srid(geog geography) TO soop;
GRANT ALL ON FUNCTION st_srid(geog geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_srid(geog geography) TO argo;
GRANT ALL ON FUNCTION st_srid(geog geography) TO aodn_dart;
GRANT ALL ON FUNCTION st_srid(geog geography) TO anmn_metadata;
GRANT ALL ON FUNCTION st_srid(geog geography) TO harvest_read_group;


--
-- Name: st_srid(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_srid(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_srid(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_srid(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_srid(geometry) TO soop;
GRANT ALL ON FUNCTION st_srid(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_srid(geometry) TO argo;
GRANT ALL ON FUNCTION st_srid(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_srid(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_srid(geometry) TO harvest_read_group;


--
-- Name: st_srid(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_srid(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_srid(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_srid(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_srid(raster) TO soop;
GRANT ALL ON FUNCTION st_srid(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_srid(raster) TO argo;
GRANT ALL ON FUNCTION st_srid(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_srid(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_srid(raster) TO harvest_read_group;


--
-- Name: st_startpoint(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_startpoint(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_startpoint(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_startpoint(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_startpoint(geometry) TO soop;
GRANT ALL ON FUNCTION st_startpoint(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_startpoint(geometry) TO argo;
GRANT ALL ON FUNCTION st_startpoint(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_startpoint(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_startpoint(geometry) TO harvest_read_group;


--
-- Name: st_stddev4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_stddev4ma(double precision[], text, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO soop;
GRANT ALL ON FUNCTION st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO argo;
GRANT ALL ON FUNCTION st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_read_group;


--
-- Name: st_subdivide(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_subdivide(geom geometry, maxvertices integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_subdivide(geom geometry, maxvertices integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_subdivide(geom geometry, maxvertices integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_subdivide(geom geometry, maxvertices integer) TO soop;
GRANT ALL ON FUNCTION st_subdivide(geom geometry, maxvertices integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_subdivide(geom geometry, maxvertices integer) TO argo;
GRANT ALL ON FUNCTION st_subdivide(geom geometry, maxvertices integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_subdivide(geom geometry, maxvertices integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_subdivide(geom geometry, maxvertices integer) TO harvest_read_group;


--
-- Name: st_sum4ma(double precision[], integer[], text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO soop;
GRANT ALL ON FUNCTION st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO argo;
GRANT ALL ON FUNCTION st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[]) TO harvest_read_group;


--
-- Name: st_sum4ma(double precision[], text, text[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO soop;
GRANT ALL ON FUNCTION st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO argo;
GRANT ALL ON FUNCTION st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[]) TO harvest_read_group;


--
-- Name: st_summary(geography); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_summary(geography) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_summary(geography) TO harvest_write_group;
GRANT ALL ON FUNCTION st_summary(geography) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_summary(geography) TO soop;
GRANT ALL ON FUNCTION st_summary(geography) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_summary(geography) TO argo;
GRANT ALL ON FUNCTION st_summary(geography) TO aodn_dart;
GRANT ALL ON FUNCTION st_summary(geography) TO anmn_metadata;
GRANT ALL ON FUNCTION st_summary(geography) TO harvest_read_group;


--
-- Name: st_summary(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_summary(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_summary(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_summary(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_summary(geometry) TO soop;
GRANT ALL ON FUNCTION st_summary(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_summary(geometry) TO argo;
GRANT ALL ON FUNCTION st_summary(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_summary(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_summary(geometry) TO harvest_read_group;


--
-- Name: st_summary(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_summary(rast raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_summary(rast raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_summary(rast raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_summary(rast raster) TO soop;
GRANT ALL ON FUNCTION st_summary(rast raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_summary(rast raster) TO argo;
GRANT ALL ON FUNCTION st_summary(rast raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_summary(rast raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_summary(rast raster) TO harvest_read_group;


--
-- Name: st_summarystats(raster, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_summarystats(rast raster, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_summarystats(rast raster, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_summarystats(rast raster, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_summarystats(rast raster, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_summarystats(rast raster, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_summarystats(rast raster, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_summarystats(rast raster, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_summarystats(rast raster, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_summarystats(rast raster, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_summarystats(text, text, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_summarystats(raster, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_summarystats(rast raster, nband integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_summarystats(rast raster, nband integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_summarystats(rast raster, nband integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_summarystats(rast raster, nband integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_summarystats(rast raster, nband integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_summarystats(rast raster, nband integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_summarystats(rast raster, nband integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_summarystats(rast raster, nband integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_summarystats(rast raster, nband integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_summarystats(text, text, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_summarystats(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_swapordinates(geometry, cstring); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_swapordinates(geom geometry, ords cstring) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_swapordinates(geom geometry, ords cstring) TO harvest_write_group;
GRANT ALL ON FUNCTION st_swapordinates(geom geometry, ords cstring) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_swapordinates(geom geometry, ords cstring) TO soop;
GRANT ALL ON FUNCTION st_swapordinates(geom geometry, ords cstring) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_swapordinates(geom geometry, ords cstring) TO argo;
GRANT ALL ON FUNCTION st_swapordinates(geom geometry, ords cstring) TO aodn_dart;
GRANT ALL ON FUNCTION st_swapordinates(geom geometry, ords cstring) TO anmn_metadata;
GRANT ALL ON FUNCTION st_swapordinates(geom geometry, ords cstring) TO harvest_read_group;


--
-- Name: st_symdifference(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_symdifference(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_symdifference(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_symdifference(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_symdifference(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_symdifference(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_symdifference(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_symdifference(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_symdifference(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_symdifference(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_symmetricdifference(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_symmetricdifference(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_symmetricdifference(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_symmetricdifference(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_symmetricdifference(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_symmetricdifference(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_symmetricdifference(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_symmetricdifference(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_symmetricdifference(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_symmetricdifference(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_tile(raster, integer, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_tile(rast raster, width integer, height integer, padwithnodata boolean, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_tile(rast raster, width integer, height integer, padwithnodata boolean, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_tile(rast raster, width integer, height integer, padwithnodata boolean, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_tile(rast raster, width integer, height integer, padwithnodata boolean, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_tile(rast raster, width integer, height integer, padwithnodata boolean, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_tile(rast raster, width integer, height integer, padwithnodata boolean, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_tile(rast raster, width integer, height integer, padwithnodata boolean, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_tile(rast raster, width integer, height integer, padwithnodata boolean, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_tile(rast raster, width integer, height integer, padwithnodata boolean, nodataval double precision) TO harvest_read_group;


--
-- Name: st_tile(raster, integer[], integer, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_tile(rast raster, nband integer[], width integer, height integer, padwithnodata boolean, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer[], width integer, height integer, padwithnodata boolean, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer[], width integer, height integer, padwithnodata boolean, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer[], width integer, height integer, padwithnodata boolean, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer[], width integer, height integer, padwithnodata boolean, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer[], width integer, height integer, padwithnodata boolean, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer[], width integer, height integer, padwithnodata boolean, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer[], width integer, height integer, padwithnodata boolean, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer[], width integer, height integer, padwithnodata boolean, nodataval double precision) TO harvest_read_group;


--
-- Name: st_tile(raster, integer, integer, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_tile(rast raster, nband integer, width integer, height integer, padwithnodata boolean, nodataval double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer, width integer, height integer, padwithnodata boolean, nodataval double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer, width integer, height integer, padwithnodata boolean, nodataval double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer, width integer, height integer, padwithnodata boolean, nodataval double precision) TO soop;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer, width integer, height integer, padwithnodata boolean, nodataval double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer, width integer, height integer, padwithnodata boolean, nodataval double precision) TO argo;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer, width integer, height integer, padwithnodata boolean, nodataval double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer, width integer, height integer, padwithnodata boolean, nodataval double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_tile(rast raster, nband integer, width integer, height integer, padwithnodata boolean, nodataval double precision) TO harvest_read_group;


--
-- Name: st_touches(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_touches(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_touches(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_touches(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_touches(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_touches(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_touches(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_touches(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_touches(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_touches(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_touches(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_touches(rast1 raster, rast2 raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_touches(rast1 raster, rast2 raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_touches(rast1 raster, rast2 raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_touches(rast1 raster, rast2 raster) TO soop;
GRANT ALL ON FUNCTION st_touches(rast1 raster, rast2 raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_touches(rast1 raster, rast2 raster) TO argo;
GRANT ALL ON FUNCTION st_touches(rast1 raster, rast2 raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_touches(rast1 raster, rast2 raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_touches(rast1 raster, rast2 raster) TO harvest_read_group;


--
-- Name: st_touches(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: st_tpi(raster, integer, text, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO soop;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO argo;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO harvest_read_group;


--
-- Name: st_tpi(raster, integer, raster, text, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO soop;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO argo;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_tpi(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO harvest_read_group;


--
-- Name: st_transform(geometry, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_transform(geometry, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_transform(geometry, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_transform(geometry, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_transform(geometry, integer) TO soop;
GRANT ALL ON FUNCTION st_transform(geometry, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_transform(geometry, integer) TO argo;
GRANT ALL ON FUNCTION st_transform(geometry, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_transform(geometry, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_transform(geometry, integer) TO harvest_read_group;


--
-- Name: st_transform(geometry, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_transform(geom geometry, to_proj text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_transform(geom geometry, to_proj text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_transform(geom geometry, to_proj text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_transform(geom geometry, to_proj text) TO soop;
GRANT ALL ON FUNCTION st_transform(geom geometry, to_proj text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_transform(geom geometry, to_proj text) TO argo;
GRANT ALL ON FUNCTION st_transform(geom geometry, to_proj text) TO aodn_dart;
GRANT ALL ON FUNCTION st_transform(geom geometry, to_proj text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_transform(geom geometry, to_proj text) TO harvest_read_group;


--
-- Name: st_transform(geometry, text, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_srid integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_srid integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_srid integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_srid integer) TO soop;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_srid integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_srid integer) TO argo;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_srid integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_srid integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_srid integer) TO harvest_read_group;


--
-- Name: st_transform(geometry, text, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_proj text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_proj text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_proj text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_proj text) TO soop;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_proj text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_proj text) TO argo;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_proj text) TO aodn_dart;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_proj text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_transform(geom geometry, from_proj text, to_proj text) TO harvest_read_group;


--
-- Name: st_transform(raster, raster, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_transform(rast raster, alignto raster, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_transform(rast raster, alignto raster, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_transform(rast raster, alignto raster, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_transform(rast raster, alignto raster, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_transform(rast raster, alignto raster, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_transform(rast raster, alignto raster, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_transform(rast raster, alignto raster, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_transform(rast raster, alignto raster, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_transform(rast raster, alignto raster, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_transform(raster, integer, double precision, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalexy double precision, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalexy double precision, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalexy double precision, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalexy double precision, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalexy double precision, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalexy double precision, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalexy double precision, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalexy double precision, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalexy double precision, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_transform(raster, integer, double precision, double precision, text, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO soop;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO argo;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, scalex double precision, scaley double precision, algorithm text, maxerr double precision) TO harvest_read_group;


--
-- Name: st_transform(raster, integer, text, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO soop;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO argo;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_transform(rast raster, srid integer, algorithm text, maxerr double precision, scalex double precision, scaley double precision) TO harvest_read_group;


--
-- Name: st_translate(geometry, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision) TO harvest_read_group;


--
-- Name: st_translate(geometry, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_translate(geometry, double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: st_transscale(geometry, double precision, double precision, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision) TO soop;
GRANT ALL ON FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision) TO argo;
GRANT ALL ON FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_transscale(geometry, double precision, double precision, double precision, double precision) TO harvest_read_group;


--
-- Name: st_tri(raster, integer, text, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO soop;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO argo;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, pixeltype text, interpolate_nodata boolean) TO harvest_read_group;


--
-- Name: st_tri(raster, integer, raster, text, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO soop;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO argo;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_tri(rast raster, nband integer, customextent raster, pixeltype text, interpolate_nodata boolean) TO harvest_read_group;


--
-- Name: st_unaryunion(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_unaryunion(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_unaryunion(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_unaryunion(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_unaryunion(geometry) TO soop;
GRANT ALL ON FUNCTION st_unaryunion(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_unaryunion(geometry) TO argo;
GRANT ALL ON FUNCTION st_unaryunion(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_unaryunion(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_unaryunion(geometry) TO harvest_read_group;


--
-- Name: st_union(geometry[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_union(geometry[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_union(geometry[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_union(geometry[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_union(geometry[]) TO soop;
GRANT ALL ON FUNCTION st_union(geometry[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_union(geometry[]) TO argo;
GRANT ALL ON FUNCTION st_union(geometry[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_union(geometry[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_union(geometry[]) TO harvest_read_group;


--
-- Name: st_union(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_union(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_union(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_union(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_union(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_union(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_union(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_union(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_union(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_union(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_upperleftx(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_upperleftx(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_upperleftx(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_upperleftx(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_upperleftx(raster) TO soop;
GRANT ALL ON FUNCTION st_upperleftx(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_upperleftx(raster) TO argo;
GRANT ALL ON FUNCTION st_upperleftx(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_upperleftx(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_upperleftx(raster) TO harvest_read_group;


--
-- Name: st_upperlefty(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_upperlefty(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_upperlefty(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_upperlefty(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_upperlefty(raster) TO soop;
GRANT ALL ON FUNCTION st_upperlefty(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_upperlefty(raster) TO argo;
GRANT ALL ON FUNCTION st_upperlefty(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_upperlefty(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_upperlefty(raster) TO harvest_read_group;


--
-- Name: st_value(raster, geometry, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_value(rast raster, pt geometry, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_value(rast raster, pt geometry, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_value(rast raster, pt geometry, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_value(rast raster, pt geometry, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_value(rast raster, pt geometry, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_value(rast raster, pt geometry, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_value(rast raster, pt geometry, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_value(rast raster, pt geometry, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_value(rast raster, pt geometry, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_value(raster, integer, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_value(rast raster, x integer, y integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_value(rast raster, x integer, y integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_value(rast raster, x integer, y integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_value(rast raster, x integer, y integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_value(rast raster, x integer, y integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_value(rast raster, x integer, y integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_value(rast raster, x integer, y integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_value(rast raster, x integer, y integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_value(rast raster, x integer, y integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_value(raster, integer, geometry, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_value(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, pt geometry, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_value(raster, integer, integer, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_value(rast raster, band integer, x integer, y integer, exclude_nodata_value boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, x integer, y integer, exclude_nodata_value boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, x integer, y integer, exclude_nodata_value boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, x integer, y integer, exclude_nodata_value boolean) TO soop;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, x integer, y integer, exclude_nodata_value boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, x integer, y integer, exclude_nodata_value boolean) TO argo;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, x integer, y integer, exclude_nodata_value boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, x integer, y integer, exclude_nodata_value boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_value(rast raster, band integer, x integer, y integer, exclude_nodata_value boolean) TO harvest_read_group;


--
-- Name: st_valuecount(raster, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO soop;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO argo;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO harvest_read_group;


--
-- Name: st_valuecount(raster, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalue double precision, roundto double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalue double precision, roundto double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalue double precision, roundto double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalue double precision, roundto double precision) TO soop;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalue double precision, roundto double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalue double precision, roundto double precision) TO argo;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalue double precision, roundto double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalue double precision, roundto double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuecount(rast raster, searchvalue double precision, roundto double precision) TO harvest_read_group;


--
-- Name: st_valuecount(text, text, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO soop;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO argo;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO harvest_read_group;


--
-- Name: st_valuecount(text, text, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO soop;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO argo;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO harvest_read_group;


--
-- Name: st_valuecount(raster, integer, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO soop;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO argo;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO harvest_read_group;


--
-- Name: st_valuecount(raster, integer, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalue double precision, roundto double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalue double precision, roundto double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalue double precision, roundto double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalue double precision, roundto double precision) TO soop;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalue double precision, roundto double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalue double precision, roundto double precision) TO argo;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalue double precision, roundto double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalue double precision, roundto double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, searchvalue double precision, roundto double precision) TO harvest_read_group;


--
-- Name: st_valuecount(text, text, integer, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO soop;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO argo;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO harvest_read_group;


--
-- Name: st_valuecount(text, text, integer, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO soop;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO argo;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO harvest_read_group;


--
-- Name: st_valuecount(raster, integer, boolean, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO soop;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO argo;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO harvest_read_group;


--
-- Name: st_valuecount(raster, integer, boolean, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO soop;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO argo;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO harvest_read_group;


--
-- Name: st_valuecount(text, text, integer, boolean, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO soop;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO argo;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT count integer) TO harvest_read_group;


--
-- Name: st_valuecount(text, text, integer, boolean, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO soop;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO argo;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO harvest_read_group;


--
-- Name: st_valuepercent(raster, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_valuepercent(raster, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalue double precision, roundto double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalue double precision, roundto double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalue double precision, roundto double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalue double precision, roundto double precision) TO soop;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalue double precision, roundto double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalue double precision, roundto double precision) TO argo;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalue double precision, roundto double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalue double precision, roundto double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, searchvalue double precision, roundto double precision) TO harvest_read_group;


--
-- Name: st_valuepercent(text, text, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_valuepercent(text, text, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO soop;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO argo;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision) TO harvest_read_group;


--
-- Name: st_valuepercent(raster, integer, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_valuepercent(raster, integer, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalue double precision, roundto double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalue double precision, roundto double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalue double precision, roundto double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalue double precision, roundto double precision) TO soop;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalue double precision, roundto double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalue double precision, roundto double precision) TO argo;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalue double precision, roundto double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalue double precision, roundto double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, searchvalue double precision, roundto double precision) TO harvest_read_group;


--
-- Name: st_valuepercent(text, text, integer, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_valuepercent(text, text, integer, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO soop;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO argo;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision) TO harvest_read_group;


--
-- Name: st_valuepercent(raster, integer, boolean, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_valuepercent(raster, integer, boolean, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO soop;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO argo;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO harvest_read_group;


--
-- Name: st_valuepercent(text, text, integer, boolean, double precision[], double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO soop;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO argo;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalues double precision[], roundto double precision, OUT value double precision, OUT percent double precision) TO harvest_read_group;


--
-- Name: st_valuepercent(text, text, integer, boolean, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO soop;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO argo;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision) TO harvest_read_group;


--
-- Name: st_voronoilines(geometry, double precision, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_voronoilines(g1 geometry, tolerance double precision, extend_to geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_voronoilines(g1 geometry, tolerance double precision, extend_to geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_voronoilines(g1 geometry, tolerance double precision, extend_to geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_voronoilines(g1 geometry, tolerance double precision, extend_to geometry) TO soop;
GRANT ALL ON FUNCTION st_voronoilines(g1 geometry, tolerance double precision, extend_to geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_voronoilines(g1 geometry, tolerance double precision, extend_to geometry) TO argo;
GRANT ALL ON FUNCTION st_voronoilines(g1 geometry, tolerance double precision, extend_to geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_voronoilines(g1 geometry, tolerance double precision, extend_to geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_voronoilines(g1 geometry, tolerance double precision, extend_to geometry) TO harvest_read_group;


--
-- Name: st_voronoipolygons(geometry, double precision, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_voronoipolygons(g1 geometry, tolerance double precision, extend_to geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_voronoipolygons(g1 geometry, tolerance double precision, extend_to geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_voronoipolygons(g1 geometry, tolerance double precision, extend_to geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_voronoipolygons(g1 geometry, tolerance double precision, extend_to geometry) TO soop;
GRANT ALL ON FUNCTION st_voronoipolygons(g1 geometry, tolerance double precision, extend_to geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_voronoipolygons(g1 geometry, tolerance double precision, extend_to geometry) TO argo;
GRANT ALL ON FUNCTION st_voronoipolygons(g1 geometry, tolerance double precision, extend_to geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_voronoipolygons(g1 geometry, tolerance double precision, extend_to geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_voronoipolygons(g1 geometry, tolerance double precision, extend_to geometry) TO harvest_read_group;


--
-- Name: st_width(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_width(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_width(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_width(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_width(raster) TO soop;
GRANT ALL ON FUNCTION st_width(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_width(raster) TO argo;
GRANT ALL ON FUNCTION st_width(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_width(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_width(raster) TO harvest_read_group;


--
-- Name: st_within(geometry, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_within(geom1 geometry, geom2 geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_within(geom1 geometry, geom2 geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_within(geom1 geometry, geom2 geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_within(geom1 geometry, geom2 geometry) TO soop;
GRANT ALL ON FUNCTION st_within(geom1 geometry, geom2 geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_within(geom1 geometry, geom2 geometry) TO argo;
GRANT ALL ON FUNCTION st_within(geom1 geometry, geom2 geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_within(geom1 geometry, geom2 geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_within(geom1 geometry, geom2 geometry) TO harvest_read_group;


--
-- Name: st_within(raster, raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_within(rast1 raster, rast2 raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_within(rast1 raster, rast2 raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_within(rast1 raster, rast2 raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_within(rast1 raster, rast2 raster) TO soop;
GRANT ALL ON FUNCTION st_within(rast1 raster, rast2 raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_within(rast1 raster, rast2 raster) TO argo;
GRANT ALL ON FUNCTION st_within(rast1 raster, rast2 raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_within(rast1 raster, rast2 raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_within(rast1 raster, rast2 raster) TO harvest_read_group;


--
-- Name: st_within(raster, integer, raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO soop;
GRANT ALL ON FUNCTION st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO argo;
GRANT ALL ON FUNCTION st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer) TO harvest_read_group;


--
-- Name: st_wkbtosql(bytea); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_wkbtosql(wkb bytea) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_wkbtosql(wkb bytea) TO harvest_write_group;
GRANT ALL ON FUNCTION st_wkbtosql(wkb bytea) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_wkbtosql(wkb bytea) TO soop;
GRANT ALL ON FUNCTION st_wkbtosql(wkb bytea) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_wkbtosql(wkb bytea) TO argo;
GRANT ALL ON FUNCTION st_wkbtosql(wkb bytea) TO aodn_dart;
GRANT ALL ON FUNCTION st_wkbtosql(wkb bytea) TO anmn_metadata;
GRANT ALL ON FUNCTION st_wkbtosql(wkb bytea) TO harvest_read_group;


--
-- Name: st_wkttosql(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_wkttosql(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_wkttosql(text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_wkttosql(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_wkttosql(text) TO soop;
GRANT ALL ON FUNCTION st_wkttosql(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_wkttosql(text) TO argo;
GRANT ALL ON FUNCTION st_wkttosql(text) TO aodn_dart;
GRANT ALL ON FUNCTION st_wkttosql(text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_wkttosql(text) TO harvest_read_group;


--
-- Name: st_worldtorastercoord(raster, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, pt geometry, OUT columnx integer, OUT rowy integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, pt geometry, OUT columnx integer, OUT rowy integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, pt geometry, OUT columnx integer, OUT rowy integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, pt geometry, OUT columnx integer, OUT rowy integer) TO soop;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, pt geometry, OUT columnx integer, OUT rowy integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, pt geometry, OUT columnx integer, OUT rowy integer) TO argo;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, pt geometry, OUT columnx integer, OUT rowy integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, pt geometry, OUT columnx integer, OUT rowy integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, pt geometry, OUT columnx integer, OUT rowy integer) TO harvest_read_group;


--
-- Name: st_worldtorastercoord(raster, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO soop;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO argo;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer) TO harvest_read_group;


--
-- Name: st_worldtorastercoordx(raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision) TO soop;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision) TO argo;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision) TO harvest_read_group;


--
-- Name: st_worldtorastercoordx(raster, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, pt geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, pt geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, pt geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, pt geometry) TO soop;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, pt geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, pt geometry) TO argo;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, pt geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, pt geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, pt geometry) TO harvest_read_group;


--
-- Name: st_worldtorastercoordx(raster, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision, yw double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision, yw double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision, yw double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision, yw double precision) TO soop;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision, yw double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision, yw double precision) TO argo;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision, yw double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision, yw double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_worldtorastercoordx(rast raster, xw double precision, yw double precision) TO harvest_read_group;


--
-- Name: st_worldtorastercoordy(raster, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, yw double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, yw double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, yw double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, yw double precision) TO soop;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, yw double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, yw double precision) TO argo;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, yw double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, yw double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, yw double precision) TO harvest_read_group;


--
-- Name: st_worldtorastercoordy(raster, geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, pt geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, pt geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, pt geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, pt geometry) TO soop;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, pt geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, pt geometry) TO argo;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, pt geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, pt geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, pt geometry) TO harvest_read_group;


--
-- Name: st_worldtorastercoordy(raster, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, xw double precision, yw double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, xw double precision, yw double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, xw double precision, yw double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, xw double precision, yw double precision) TO soop;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, xw double precision, yw double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, xw double precision, yw double precision) TO argo;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, xw double precision, yw double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, xw double precision, yw double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_worldtorastercoordy(rast raster, xw double precision, yw double precision) TO harvest_read_group;


--
-- Name: st_wrapx(geometry, double precision, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_wrapx(geom geometry, wrap double precision, move double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_wrapx(geom geometry, wrap double precision, move double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_wrapx(geom geometry, wrap double precision, move double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_wrapx(geom geometry, wrap double precision, move double precision) TO soop;
GRANT ALL ON FUNCTION st_wrapx(geom geometry, wrap double precision, move double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_wrapx(geom geometry, wrap double precision, move double precision) TO argo;
GRANT ALL ON FUNCTION st_wrapx(geom geometry, wrap double precision, move double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_wrapx(geom geometry, wrap double precision, move double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_wrapx(geom geometry, wrap double precision, move double precision) TO harvest_read_group;


--
-- Name: st_x(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_x(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_x(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_x(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_x(geometry) TO soop;
GRANT ALL ON FUNCTION st_x(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_x(geometry) TO argo;
GRANT ALL ON FUNCTION st_x(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_x(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_x(geometry) TO harvest_read_group;


--
-- Name: st_xmax(box3d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_xmax(box3d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_xmax(box3d) TO harvest_write_group;
GRANT ALL ON FUNCTION st_xmax(box3d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_xmax(box3d) TO soop;
GRANT ALL ON FUNCTION st_xmax(box3d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_xmax(box3d) TO argo;
GRANT ALL ON FUNCTION st_xmax(box3d) TO aodn_dart;
GRANT ALL ON FUNCTION st_xmax(box3d) TO anmn_metadata;
GRANT ALL ON FUNCTION st_xmax(box3d) TO harvest_read_group;


--
-- Name: st_xmin(box3d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_xmin(box3d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_xmin(box3d) TO harvest_write_group;
GRANT ALL ON FUNCTION st_xmin(box3d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_xmin(box3d) TO soop;
GRANT ALL ON FUNCTION st_xmin(box3d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_xmin(box3d) TO argo;
GRANT ALL ON FUNCTION st_xmin(box3d) TO aodn_dart;
GRANT ALL ON FUNCTION st_xmin(box3d) TO anmn_metadata;
GRANT ALL ON FUNCTION st_xmin(box3d) TO harvest_read_group;


--
-- Name: st_y(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_y(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_y(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_y(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_y(geometry) TO soop;
GRANT ALL ON FUNCTION st_y(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_y(geometry) TO argo;
GRANT ALL ON FUNCTION st_y(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_y(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_y(geometry) TO harvest_read_group;


--
-- Name: st_ymax(box3d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_ymax(box3d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_ymax(box3d) TO harvest_write_group;
GRANT ALL ON FUNCTION st_ymax(box3d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_ymax(box3d) TO soop;
GRANT ALL ON FUNCTION st_ymax(box3d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_ymax(box3d) TO argo;
GRANT ALL ON FUNCTION st_ymax(box3d) TO aodn_dart;
GRANT ALL ON FUNCTION st_ymax(box3d) TO anmn_metadata;
GRANT ALL ON FUNCTION st_ymax(box3d) TO harvest_read_group;


--
-- Name: st_ymin(box3d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_ymin(box3d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_ymin(box3d) TO harvest_write_group;
GRANT ALL ON FUNCTION st_ymin(box3d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_ymin(box3d) TO soop;
GRANT ALL ON FUNCTION st_ymin(box3d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_ymin(box3d) TO argo;
GRANT ALL ON FUNCTION st_ymin(box3d) TO aodn_dart;
GRANT ALL ON FUNCTION st_ymin(box3d) TO anmn_metadata;
GRANT ALL ON FUNCTION st_ymin(box3d) TO harvest_read_group;


--
-- Name: st_z(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_z(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_z(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_z(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_z(geometry) TO soop;
GRANT ALL ON FUNCTION st_z(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_z(geometry) TO argo;
GRANT ALL ON FUNCTION st_z(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_z(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_z(geometry) TO harvest_read_group;


--
-- Name: st_zmax(box3d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_zmax(box3d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_zmax(box3d) TO harvest_write_group;
GRANT ALL ON FUNCTION st_zmax(box3d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_zmax(box3d) TO soop;
GRANT ALL ON FUNCTION st_zmax(box3d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_zmax(box3d) TO argo;
GRANT ALL ON FUNCTION st_zmax(box3d) TO aodn_dart;
GRANT ALL ON FUNCTION st_zmax(box3d) TO anmn_metadata;
GRANT ALL ON FUNCTION st_zmax(box3d) TO harvest_read_group;


--
-- Name: st_zmflag(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_zmflag(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_zmflag(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_zmflag(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_zmflag(geometry) TO soop;
GRANT ALL ON FUNCTION st_zmflag(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_zmflag(geometry) TO argo;
GRANT ALL ON FUNCTION st_zmflag(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_zmflag(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_zmflag(geometry) TO harvest_read_group;


--
-- Name: st_zmin(box3d); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_zmin(box3d) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_zmin(box3d) TO harvest_write_group;
GRANT ALL ON FUNCTION st_zmin(box3d) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_zmin(box3d) TO soop;
GRANT ALL ON FUNCTION st_zmin(box3d) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_zmin(box3d) TO argo;
GRANT ALL ON FUNCTION st_zmin(box3d) TO aodn_dart;
GRANT ALL ON FUNCTION st_zmin(box3d) TO anmn_metadata;
GRANT ALL ON FUNCTION st_zmin(box3d) TO harvest_read_group;


--
-- Name: text(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION text(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION text(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION text(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION text(geometry) TO soop;
GRANT ALL ON FUNCTION text(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION text(geometry) TO argo;
GRANT ALL ON FUNCTION text(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION text(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION text(geometry) TO harvest_read_group;


--
-- Name: unlockrows(text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION unlockrows(text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION unlockrows(text) TO harvest_write_group;
GRANT ALL ON FUNCTION unlockrows(text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION unlockrows(text) TO soop;
GRANT ALL ON FUNCTION unlockrows(text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION unlockrows(text) TO argo;
GRANT ALL ON FUNCTION unlockrows(text) TO aodn_dart;
GRANT ALL ON FUNCTION unlockrows(text) TO anmn_metadata;
GRANT ALL ON FUNCTION unlockrows(text) TO harvest_read_group;


--
-- Name: updategeometrysrid(character varying, character varying, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, integer) TO soop;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, integer) TO argo;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, integer) TO aodn_dart;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, integer) TO harvest_read_group;


--
-- Name: updategeometrysrid(character varying, character varying, character varying, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) TO soop;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) TO argo;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) TO aodn_dart;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION updategeometrysrid(character varying, character varying, character varying, integer) TO harvest_read_group;


--
-- Name: updategeometrysrid(character varying, character varying, character varying, character varying, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer) TO harvest_write_group;
GRANT ALL ON FUNCTION updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer) TO soop;
GRANT ALL ON FUNCTION updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer) TO argo;
GRANT ALL ON FUNCTION updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer) TO aodn_dart;
GRANT ALL ON FUNCTION updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer) TO anmn_metadata;
GRANT ALL ON FUNCTION updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer) TO harvest_read_group;


--
-- Name: updaterastersrid(name, name, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION updaterastersrid(table_name name, column_name name, new_srid integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION updaterastersrid(table_name name, column_name name, new_srid integer) TO harvest_write_group;
GRANT ALL ON FUNCTION updaterastersrid(table_name name, column_name name, new_srid integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION updaterastersrid(table_name name, column_name name, new_srid integer) TO soop;
GRANT ALL ON FUNCTION updaterastersrid(table_name name, column_name name, new_srid integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION updaterastersrid(table_name name, column_name name, new_srid integer) TO argo;
GRANT ALL ON FUNCTION updaterastersrid(table_name name, column_name name, new_srid integer) TO aodn_dart;
GRANT ALL ON FUNCTION updaterastersrid(table_name name, column_name name, new_srid integer) TO anmn_metadata;
GRANT ALL ON FUNCTION updaterastersrid(table_name name, column_name name, new_srid integer) TO harvest_read_group;


--
-- Name: updaterastersrid(name, name, name, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO harvest_write_group;
GRANT ALL ON FUNCTION updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO soop;
GRANT ALL ON FUNCTION updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO argo;
GRANT ALL ON FUNCTION updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO aodn_dart;
GRANT ALL ON FUNCTION updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO anmn_metadata;
GRANT ALL ON FUNCTION updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer) TO harvest_read_group;


--
-- Name: uuid_generate_v1(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION uuid_generate_v1() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION uuid_generate_v1() TO harvest_write_group;
GRANT ALL ON FUNCTION uuid_generate_v1() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION uuid_generate_v1() TO soop;
GRANT ALL ON FUNCTION uuid_generate_v1() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION uuid_generate_v1() TO argo;
GRANT ALL ON FUNCTION uuid_generate_v1() TO aodn_dart;
GRANT ALL ON FUNCTION uuid_generate_v1() TO anmn_metadata;
GRANT ALL ON FUNCTION uuid_generate_v1() TO harvest_read_group;


--
-- Name: uuid_generate_v1mc(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION uuid_generate_v1mc() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION uuid_generate_v1mc() TO harvest_write_group;
GRANT ALL ON FUNCTION uuid_generate_v1mc() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION uuid_generate_v1mc() TO soop;
GRANT ALL ON FUNCTION uuid_generate_v1mc() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION uuid_generate_v1mc() TO argo;
GRANT ALL ON FUNCTION uuid_generate_v1mc() TO aodn_dart;
GRANT ALL ON FUNCTION uuid_generate_v1mc() TO anmn_metadata;
GRANT ALL ON FUNCTION uuid_generate_v1mc() TO harvest_read_group;


--
-- Name: uuid_generate_v3(uuid, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION uuid_generate_v3(namespace uuid, name text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION uuid_generate_v3(namespace uuid, name text) TO harvest_write_group;
GRANT ALL ON FUNCTION uuid_generate_v3(namespace uuid, name text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION uuid_generate_v3(namespace uuid, name text) TO soop;
GRANT ALL ON FUNCTION uuid_generate_v3(namespace uuid, name text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION uuid_generate_v3(namespace uuid, name text) TO argo;
GRANT ALL ON FUNCTION uuid_generate_v3(namespace uuid, name text) TO aodn_dart;
GRANT ALL ON FUNCTION uuid_generate_v3(namespace uuid, name text) TO anmn_metadata;
GRANT ALL ON FUNCTION uuid_generate_v3(namespace uuid, name text) TO harvest_read_group;


--
-- Name: uuid_generate_v4(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION uuid_generate_v4() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION uuid_generate_v4() TO harvest_write_group;
GRANT ALL ON FUNCTION uuid_generate_v4() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION uuid_generate_v4() TO soop;
GRANT ALL ON FUNCTION uuid_generate_v4() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION uuid_generate_v4() TO argo;
GRANT ALL ON FUNCTION uuid_generate_v4() TO aodn_dart;
GRANT ALL ON FUNCTION uuid_generate_v4() TO anmn_metadata;
GRANT ALL ON FUNCTION uuid_generate_v4() TO harvest_read_group;


--
-- Name: uuid_generate_v5(uuid, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION uuid_generate_v5(namespace uuid, name text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION uuid_generate_v5(namespace uuid, name text) TO harvest_write_group;
GRANT ALL ON FUNCTION uuid_generate_v5(namespace uuid, name text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION uuid_generate_v5(namespace uuid, name text) TO soop;
GRANT ALL ON FUNCTION uuid_generate_v5(namespace uuid, name text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION uuid_generate_v5(namespace uuid, name text) TO argo;
GRANT ALL ON FUNCTION uuid_generate_v5(namespace uuid, name text) TO aodn_dart;
GRANT ALL ON FUNCTION uuid_generate_v5(namespace uuid, name text) TO anmn_metadata;
GRANT ALL ON FUNCTION uuid_generate_v5(namespace uuid, name text) TO harvest_read_group;


--
-- Name: uuid_nil(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION uuid_nil() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION uuid_nil() TO harvest_write_group;
GRANT ALL ON FUNCTION uuid_nil() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION uuid_nil() TO soop;
GRANT ALL ON FUNCTION uuid_nil() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION uuid_nil() TO argo;
GRANT ALL ON FUNCTION uuid_nil() TO aodn_dart;
GRANT ALL ON FUNCTION uuid_nil() TO anmn_metadata;
GRANT ALL ON FUNCTION uuid_nil() TO harvest_read_group;


--
-- Name: uuid_ns_dns(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION uuid_ns_dns() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION uuid_ns_dns() TO harvest_write_group;
GRANT ALL ON FUNCTION uuid_ns_dns() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION uuid_ns_dns() TO soop;
GRANT ALL ON FUNCTION uuid_ns_dns() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION uuid_ns_dns() TO argo;
GRANT ALL ON FUNCTION uuid_ns_dns() TO aodn_dart;
GRANT ALL ON FUNCTION uuid_ns_dns() TO anmn_metadata;
GRANT ALL ON FUNCTION uuid_ns_dns() TO harvest_read_group;


--
-- Name: uuid_ns_oid(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION uuid_ns_oid() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION uuid_ns_oid() TO harvest_write_group;
GRANT ALL ON FUNCTION uuid_ns_oid() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION uuid_ns_oid() TO soop;
GRANT ALL ON FUNCTION uuid_ns_oid() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION uuid_ns_oid() TO argo;
GRANT ALL ON FUNCTION uuid_ns_oid() TO aodn_dart;
GRANT ALL ON FUNCTION uuid_ns_oid() TO anmn_metadata;
GRANT ALL ON FUNCTION uuid_ns_oid() TO harvest_read_group;


--
-- Name: uuid_ns_url(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION uuid_ns_url() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION uuid_ns_url() TO harvest_write_group;
GRANT ALL ON FUNCTION uuid_ns_url() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION uuid_ns_url() TO soop;
GRANT ALL ON FUNCTION uuid_ns_url() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION uuid_ns_url() TO argo;
GRANT ALL ON FUNCTION uuid_ns_url() TO aodn_dart;
GRANT ALL ON FUNCTION uuid_ns_url() TO anmn_metadata;
GRANT ALL ON FUNCTION uuid_ns_url() TO harvest_read_group;


--
-- Name: uuid_ns_x500(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION uuid_ns_x500() TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION uuid_ns_x500() TO harvest_write_group;
GRANT ALL ON FUNCTION uuid_ns_x500() TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION uuid_ns_x500() TO soop;
GRANT ALL ON FUNCTION uuid_ns_x500() TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION uuid_ns_x500() TO argo;
GRANT ALL ON FUNCTION uuid_ns_x500() TO aodn_dart;
GRANT ALL ON FUNCTION uuid_ns_x500() TO anmn_metadata;
GRANT ALL ON FUNCTION uuid_ns_x500() TO harvest_read_group;


SET search_path = soop_trv, pg_catalog;

--
-- Name: clean_data(integer); Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON FUNCTION clean_data(p_file_id integer) TO harvest_read_group;
GRANT ALL ON FUNCTION clean_data(p_file_id integer) TO harvest_write_group;


SET search_path = public, pg_catalog;

--
-- Name: make_trajectory(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION make_trajectory(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION make_trajectory(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION make_trajectory(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION make_trajectory(geometry) TO soop;
GRANT ALL ON FUNCTION make_trajectory(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION make_trajectory(geometry) TO argo;
GRANT ALL ON FUNCTION make_trajectory(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION make_trajectory(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION make_trajectory(geometry) TO harvest_read_group;


--
-- Name: st_3dextent(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_3dextent(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_3dextent(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_3dextent(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_3dextent(geometry) TO soop;
GRANT ALL ON FUNCTION st_3dextent(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_3dextent(geometry) TO argo;
GRANT ALL ON FUNCTION st_3dextent(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_3dextent(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_3dextent(geometry) TO harvest_read_group;


--
-- Name: st_accum(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_accum(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_accum(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_accum(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_accum(geometry) TO soop;
GRANT ALL ON FUNCTION st_accum(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_accum(geometry) TO argo;
GRANT ALL ON FUNCTION st_accum(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_accum(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_accum(geometry) TO harvest_read_group;


--
-- Name: st_clusterintersecting(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_clusterintersecting(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry) TO soop;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry) TO argo;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_clusterintersecting(geometry) TO harvest_read_group;


--
-- Name: st_clusterwithin(geometry, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_clusterwithin(geometry, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_clusterwithin(geometry, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_clusterwithin(geometry, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_clusterwithin(geometry, double precision) TO soop;
GRANT ALL ON FUNCTION st_clusterwithin(geometry, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_clusterwithin(geometry, double precision) TO argo;
GRANT ALL ON FUNCTION st_clusterwithin(geometry, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_clusterwithin(geometry, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_clusterwithin(geometry, double precision) TO harvest_read_group;


--
-- Name: st_collect(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_collect(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_collect(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_collect(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_collect(geometry) TO soop;
GRANT ALL ON FUNCTION st_collect(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_collect(geometry) TO argo;
GRANT ALL ON FUNCTION st_collect(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_collect(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_collect(geometry) TO harvest_read_group;


--
-- Name: st_countagg(raster, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_countagg(raster, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_countagg(raster, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_countagg(raster, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_countagg(raster, boolean) TO soop;
GRANT ALL ON FUNCTION st_countagg(raster, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_countagg(raster, boolean) TO argo;
GRANT ALL ON FUNCTION st_countagg(raster, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_countagg(raster, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_countagg(raster, boolean) TO harvest_read_group;


--
-- Name: st_countagg(raster, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean) TO soop;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean) TO argo;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean) TO harvest_read_group;


--
-- Name: st_countagg(raster, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean, double precision) TO soop;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean, double precision) TO argo;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_countagg(raster, integer, boolean, double precision) TO harvest_read_group;


--
-- Name: st_extent(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_extent(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_extent(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_extent(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_extent(geometry) TO soop;
GRANT ALL ON FUNCTION st_extent(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_extent(geometry) TO argo;
GRANT ALL ON FUNCTION st_extent(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_extent(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_extent(geometry) TO harvest_read_group;


--
-- Name: st_makeline(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_makeline(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_makeline(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_makeline(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_makeline(geometry) TO soop;
GRANT ALL ON FUNCTION st_makeline(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_makeline(geometry) TO argo;
GRANT ALL ON FUNCTION st_makeline(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_makeline(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_makeline(geometry) TO harvest_read_group;


--
-- Name: st_memcollect(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_memcollect(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_memcollect(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_memcollect(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_memcollect(geometry) TO soop;
GRANT ALL ON FUNCTION st_memcollect(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_memcollect(geometry) TO argo;
GRANT ALL ON FUNCTION st_memcollect(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_memcollect(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_memcollect(geometry) TO harvest_read_group;


--
-- Name: st_memunion(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_memunion(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_memunion(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_memunion(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_memunion(geometry) TO soop;
GRANT ALL ON FUNCTION st_memunion(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_memunion(geometry) TO argo;
GRANT ALL ON FUNCTION st_memunion(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_memunion(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_memunion(geometry) TO harvest_read_group;


--
-- Name: st_polygonize(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_polygonize(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_polygonize(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_polygonize(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_polygonize(geometry) TO soop;
GRANT ALL ON FUNCTION st_polygonize(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_polygonize(geometry) TO argo;
GRANT ALL ON FUNCTION st_polygonize(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_polygonize(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_polygonize(geometry) TO harvest_read_group;


--
-- Name: st_samealignment(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_samealignment(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_samealignment(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_samealignment(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_samealignment(raster) TO soop;
GRANT ALL ON FUNCTION st_samealignment(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_samealignment(raster) TO argo;
GRANT ALL ON FUNCTION st_samealignment(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_samealignment(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_samealignment(raster) TO harvest_read_group;


--
-- Name: st_summarystatsagg(raster, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_summarystatsagg(raster, boolean, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, boolean, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, boolean, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, boolean, double precision) TO soop;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, boolean, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, boolean, double precision) TO argo;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, boolean, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, boolean, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, boolean, double precision) TO harvest_read_group;


--
-- Name: st_summarystatsagg(raster, integer, boolean); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean) TO harvest_write_group;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean) TO soop;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean) TO argo;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean) TO aodn_dart;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean) TO anmn_metadata;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean) TO harvest_read_group;


--
-- Name: st_summarystatsagg(raster, integer, boolean, double precision); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean, double precision) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean, double precision) TO harvest_write_group;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean, double precision) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean, double precision) TO soop;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean, double precision) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean, double precision) TO argo;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean, double precision) TO aodn_dart;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean, double precision) TO anmn_metadata;
GRANT ALL ON FUNCTION st_summarystatsagg(raster, integer, boolean, double precision) TO harvest_read_group;


--
-- Name: st_union(geometry); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_union(geometry) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_union(geometry) TO harvest_write_group;
GRANT ALL ON FUNCTION st_union(geometry) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_union(geometry) TO soop;
GRANT ALL ON FUNCTION st_union(geometry) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_union(geometry) TO argo;
GRANT ALL ON FUNCTION st_union(geometry) TO aodn_dart;
GRANT ALL ON FUNCTION st_union(geometry) TO anmn_metadata;
GRANT ALL ON FUNCTION st_union(geometry) TO harvest_read_group;


--
-- Name: st_union(raster); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_union(raster) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_union(raster) TO harvest_write_group;
GRANT ALL ON FUNCTION st_union(raster) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_union(raster) TO soop;
GRANT ALL ON FUNCTION st_union(raster) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_union(raster) TO argo;
GRANT ALL ON FUNCTION st_union(raster) TO aodn_dart;
GRANT ALL ON FUNCTION st_union(raster) TO anmn_metadata;
GRANT ALL ON FUNCTION st_union(raster) TO harvest_read_group;


--
-- Name: st_union(raster, integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_union(raster, integer) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_union(raster, integer) TO harvest_write_group;
GRANT ALL ON FUNCTION st_union(raster, integer) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_union(raster, integer) TO soop;
GRANT ALL ON FUNCTION st_union(raster, integer) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_union(raster, integer) TO argo;
GRANT ALL ON FUNCTION st_union(raster, integer) TO aodn_dart;
GRANT ALL ON FUNCTION st_union(raster, integer) TO anmn_metadata;
GRANT ALL ON FUNCTION st_union(raster, integer) TO harvest_read_group;


--
-- Name: st_union(raster, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_union(raster, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_union(raster, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_union(raster, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_union(raster, text) TO soop;
GRANT ALL ON FUNCTION st_union(raster, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_union(raster, text) TO argo;
GRANT ALL ON FUNCTION st_union(raster, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_union(raster, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_union(raster, text) TO harvest_read_group;


--
-- Name: st_union(raster, unionarg[]); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_union(raster, unionarg[]) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_union(raster, unionarg[]) TO harvest_write_group;
GRANT ALL ON FUNCTION st_union(raster, unionarg[]) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_union(raster, unionarg[]) TO soop;
GRANT ALL ON FUNCTION st_union(raster, unionarg[]) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_union(raster, unionarg[]) TO argo;
GRANT ALL ON FUNCTION st_union(raster, unionarg[]) TO aodn_dart;
GRANT ALL ON FUNCTION st_union(raster, unionarg[]) TO anmn_metadata;
GRANT ALL ON FUNCTION st_union(raster, unionarg[]) TO harvest_read_group;


--
-- Name: st_union(raster, integer, text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION st_union(raster, integer, text) TO dw_aatams_acoustic;
GRANT ALL ON FUNCTION st_union(raster, integer, text) TO harvest_write_group;
GRANT ALL ON FUNCTION st_union(raster, integer, text) TO aatams_sattag_nrt;
GRANT ALL ON FUNCTION st_union(raster, integer, text) TO soop;
GRANT ALL ON FUNCTION st_union(raster, integer, text) TO aatams_biologging_penguin;
GRANT ALL ON FUNCTION st_union(raster, integer, text) TO argo;
GRANT ALL ON FUNCTION st_union(raster, integer, text) TO aodn_dart;
GRANT ALL ON FUNCTION st_union(raster, integer, text) TO anmn_metadata;
GRANT ALL ON FUNCTION st_union(raster, integer, text) TO harvest_read_group;


SET search_path = aatams_sattag_qc_ctd, pg_catalog;

--
-- Name: file_metadata; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE file_metadata TO harvest_read_group;
GRANT ALL ON TABLE file_metadata TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: profile_general; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE profile_general TO harvest_read_group;
GRANT ALL ON TABLE profile_general TO harvest_write_group;


--
-- Name: profile_measurements; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE profile_measurements TO harvest_read_group;
GRANT ALL ON TABLE profile_measurements TO harvest_write_group;


--
-- Name: profile_summary; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE profile_summary TO harvest_read_group;
GRANT ALL ON TABLE profile_summary TO harvest_write_group;


--
-- Name: aatams_sattag_qc_ctd_profile_data; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE aatams_sattag_qc_ctd_profile_data TO harvest_read_group;
GRANT ALL ON TABLE aatams_sattag_qc_ctd_profile_data TO harvest_write_group;


--
-- Name: aatams_sattag_qc_ctd_profile_map; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE aatams_sattag_qc_ctd_profile_map TO harvest_read_group;
GRANT ALL ON TABLE aatams_sattag_qc_ctd_profile_map TO harvest_write_group;


--
-- Name: best_cycle_location; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE best_cycle_location TO harvest_read_group;
GRANT ALL ON TABLE best_cycle_location TO harvest_write_group;


--
-- Name: data_centre; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE data_centre TO harvest_read_group;
GRANT ALL ON TABLE data_centre TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: file_metadata_id_seq; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON SEQUENCE file_metadata_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_metadata_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: platform_metadata; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE platform_metadata TO harvest_read_group;
GRANT ALL ON TABLE platform_metadata TO harvest_write_group;


--
-- Name: platform_metadata_current; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE platform_metadata_current TO harvest_read_group;
GRANT ALL ON TABLE platform_metadata_current TO harvest_write_group;


--
-- Name: platform_metadata_id_seq; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON SEQUENCE platform_metadata_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE platform_metadata_id_seq TO harvest_write_group;


--
-- Name: profile_general_current; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE profile_general_current TO harvest_read_group;
GRANT ALL ON TABLE profile_general_current TO harvest_write_group;


--
-- Name: profile_metadata; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE profile_metadata TO harvest_read_group;
GRANT ALL ON TABLE profile_metadata TO harvest_write_group;


--
-- Name: profile_param_calibration; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE profile_param_calibration TO harvest_read_group;
GRANT ALL ON TABLE profile_param_calibration TO harvest_write_group;


--
-- Name: profile_params; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE profile_params TO harvest_read_group;
GRANT ALL ON TABLE profile_params TO harvest_write_group;


--
-- Name: region; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE region TO harvest_read_group;
GRANT ALL ON TABLE region TO harvest_write_group;


--
-- Name: srdl_float; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE srdl_float TO harvest_read_group;
GRANT ALL ON TABLE srdl_float TO harvest_write_group;


--
-- Name: srdl_float_aodn; Type: ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

GRANT SELECT ON TABLE srdl_float_aodn TO harvest_read_group;
GRANT ALL ON TABLE srdl_float_aodn TO harvest_write_group;


SET search_path = abos, pg_catalog;

--
-- Name: index_job; Type: ACL; Schema: abos; Owner: postgres
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: abos; Owner: postgres
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: abos_file_vw; Type: ACL; Schema: abos; Owner: postgres
--

GRANT SELECT ON TABLE abos_file_vw TO harvest_read_group;
GRANT ALL ON TABLE abos_file_vw TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: abos; Owner: postgres
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: abos; Owner: postgres
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: abos; Owner: postgres
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: abos; Owner: postgres
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: global_attribute; Type: ACL; Schema: abos; Owner: postgres
--

GRANT SELECT ON TABLE global_attribute TO harvest_read_group;
GRANT ALL ON TABLE global_attribute TO harvest_write_group;


--
-- Name: global_attribute_id_seq; Type: ACL; Schema: abos; Owner: postgres
--

GRANT SELECT ON SEQUENCE global_attribute_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE global_attribute_id_seq TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: abos; Owner: postgres
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: abos; Owner: postgres
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


SET search_path = abos_sots, pg_catalog;

--
-- Name: indexed_file; Type: ACL; Schema: abos_sots; Owner: abos_sots
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: timeseries; Type: ACL; Schema: abos_sots; Owner: abos_sots
--

GRANT SELECT ON TABLE timeseries TO harvest_read_group;
GRANT ALL ON TABLE timeseries TO harvest_write_group;


--
-- Name: abos_sots_map; Type: ACL; Schema: abos_sots; Owner: abos_sots
--

GRANT SELECT ON TABLE abos_sots_map TO harvest_read_group;
GRANT ALL ON TABLE abos_sots_map TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: abos_sots; Owner: abos_sots
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: abos_sots; Owner: abos_sots
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: abos_sots; Owner: abos_sots
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: abos_sots; Owner: abos_sots
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: abos_sots; Owner: abos_sots
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: abos_sots; Owner: abos_sots
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: abos_sots; Owner: abos_sots
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: timeseries_id_seq; Type: ACL; Schema: abos_sots; Owner: abos_sots
--

GRANT SELECT ON SEQUENCE timeseries_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE timeseries_id_seq TO harvest_write_group;


SET search_path = anfog_dm, pg_catalog;

--
-- Name: anfog_dm_trajectory_wms; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE anfog_dm_trajectory_wms TO harvest_read_group;
GRANT ALL ON TABLE anfog_dm_trajectory_wms TO harvest_write_group;


--
-- Name: deployments; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE deployments TO harvest_read_group;
GRANT ALL ON TABLE deployments TO harvest_write_group;


--
-- Name: measurements; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE measurements TO harvest_read_group;
GRANT ALL ON TABLE measurements TO harvest_write_group;


--
-- Name: anfog_dm_trajectory_data; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE anfog_dm_trajectory_data TO harvest_read_group;
GRANT ALL ON TABLE anfog_dm_trajectory_data TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: anfog_dm_trajectory_map; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE anfog_dm_trajectory_map TO harvest_read_group;
GRANT ALL ON TABLE anfog_dm_trajectory_map TO harvest_write_group;


--
-- Name: attribute; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE attribute TO harvest_read_group;
GRANT ALL ON TABLE attribute TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: deployments_deploy_id_seq; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON SEQUENCE deployments_deploy_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE deployments_deploy_id_seq TO harvest_write_group;


--
-- Name: file; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE file TO harvest_read_group;
GRANT ALL ON TABLE file TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: measurements_measurement_seq; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON SEQUENCE measurements_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_measurement_seq TO harvest_write_group;


--
-- Name: platform_metadata; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE platform_metadata TO harvest_read_group;
GRANT ALL ON TABLE platform_metadata TO harvest_write_group;


--
-- Name: sensors_metadata; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE sensors_metadata TO harvest_read_group;
GRANT ALL ON TABLE sensors_metadata TO harvest_write_group;


--
-- Name: sensors_metadata_sensor_id_seq; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON SEQUENCE sensors_metadata_sensor_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE sensors_metadata_sensor_id_seq TO harvest_write_group;


--
-- Name: variable; Type: ACL; Schema: anfog_dm; Owner: anfog_dm
--

GRANT SELECT ON TABLE variable TO harvest_read_group;
GRANT ALL ON TABLE variable TO harvest_write_group;


SET search_path = anmn_acidification_nrt, pg_catalog;

--
-- Name: measurement; Type: ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

GRANT SELECT ON TABLE measurement TO harvest_read_group;
GRANT ALL ON TABLE measurement TO harvest_write_group;


--
-- Name: timeseries; Type: ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

GRANT SELECT ON TABLE timeseries TO harvest_read_group;
GRANT ALL ON TABLE timeseries TO harvest_write_group;


--
-- Name: anmn_am_nrt_data; Type: ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

GRANT SELECT ON TABLE anmn_am_nrt_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_am_nrt_data TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: anmn_am_nrt_map; Type: ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

GRANT SELECT ON TABLE anmn_am_nrt_map TO harvest_read_group;
GRANT ALL ON TABLE anmn_am_nrt_map TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


SET search_path = anmn_am_dm, pg_catalog;

--
-- Name: measurements; Type: ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

GRANT SELECT ON TABLE measurements TO harvest_read_group;
GRANT ALL ON TABLE measurements TO harvest_write_group;


--
-- Name: timeseries; Type: ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

GRANT SELECT ON TABLE timeseries TO harvest_read_group;
GRANT ALL ON TABLE timeseries TO harvest_write_group;


--
-- Name: anmn_am_dm_data; Type: ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

GRANT SELECT ON TABLE anmn_am_dm_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_am_dm_data TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: anmn_am_dm_map; Type: ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

GRANT SELECT ON TABLE anmn_am_dm_map TO harvest_read_group;
GRANT ALL ON TABLE anmn_am_dm_map TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


SET search_path = anmn_burst_avg, pg_catalog;

--
-- Name: measurement; Type: ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

GRANT SELECT ON TABLE measurement TO harvest_read_group;
GRANT ALL ON TABLE measurement TO harvest_write_group;


--
-- Name: timeseries; Type: ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

GRANT SELECT ON TABLE timeseries TO harvest_read_group;
GRANT ALL ON TABLE timeseries TO harvest_write_group;


--
-- Name: anmn_burst_avg_timeseries_data; Type: ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

GRANT SELECT ON TABLE anmn_burst_avg_timeseries_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_burst_avg_timeseries_data TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: anmn_burst_avg_timeseries_map; Type: ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

GRANT SELECT ON TABLE anmn_burst_avg_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE anmn_burst_avg_timeseries_map TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: timeseries_id_seq; Type: ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

GRANT ALL ON SEQUENCE timeseries_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE timeseries_id_seq TO harvest_read_group;


SET search_path = anmn_metadata, pg_catalog;

--
-- Name: file_metadata; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON TABLE file_metadata TO harvest_read_group;
GRANT ALL ON TABLE file_metadata TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: moorings_all_map; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON TABLE moorings_all_map TO harvest_read_group;
GRANT ALL ON TABLE moorings_all_map TO harvest_write_group;


--
-- Name: abos_all_map; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON TABLE abos_all_map TO harvest_read_group;
GRANT ALL ON TABLE abos_all_map TO harvest_write_group;


--
-- Name: anmn_all_map; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON TABLE anmn_all_map TO harvest_read_group;
GRANT ALL ON TABLE anmn_all_map TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: file_metadata_id_seq; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON SEQUENCE file_metadata_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_metadata_id_seq TO harvest_write_group;


--
-- Name: global_attribute; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON TABLE global_attribute TO harvest_read_group;
GRANT ALL ON TABLE global_attribute TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: variable; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON TABLE variable TO harvest_read_group;
GRANT ALL ON TABLE variable TO harvest_write_group;


--
-- Name: variable_attribute; Type: ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

GRANT SELECT ON TABLE variable_attribute TO harvest_read_group;
GRANT ALL ON TABLE variable_attribute TO harvest_write_group;


SET search_path = anmn_mhlwave, pg_catalog;

--
-- Name: databasechangelog; Type: ACL; Schema: anmn_mhlwave; Owner: anmn_mhlwave
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: anmn_mhlwave; Owner: anmn_mhlwave
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: harvest_mhlwave; Type: ACL; Schema: anmn_mhlwave; Owner: anmn_mhlwave
--

GRANT SELECT ON TABLE harvest_mhlwave TO harvest_read_group;
GRANT ALL ON TABLE harvest_mhlwave TO harvest_write_group;


--
-- Name: harvest_mhlwave_pkid_seq; Type: ACL; Schema: anmn_mhlwave; Owner: anmn_mhlwave
--

GRANT SELECT ON SEQUENCE harvest_mhlwave_pkid_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE harvest_mhlwave_pkid_seq TO harvest_write_group;


SET search_path = anmn_nrs_bgc, pg_catalog;

--
-- Name: anmn_nrs_bgc_chemistry; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_chemistry TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_chemistry TO harvest_write_group;


--
-- Name: station_name; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE station_name TO harvest_read_group;
GRANT ALL ON TABLE station_name TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_chemistry_data; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_chemistry_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_chemistry_data TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_chemistry_measurement_seq; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON SEQUENCE anmn_nrs_bgc_chemistry_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE anmn_nrs_bgc_chemistry_measurement_seq TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_phypig; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_phypig TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_phypig TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_phypig_data; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_phypig_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_phypig_data TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_phypig_measurement_seq; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON SEQUENCE anmn_nrs_bgc_phypig_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE anmn_nrs_bgc_phypig_measurement_seq TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_picoplankton; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_picoplankton TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_picoplankton TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_picoplankton_data; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_picoplankton_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_picoplankton_data TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_picoplankton_measurement_seq; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON SEQUENCE anmn_nrs_bgc_picoplankton_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE anmn_nrs_bgc_picoplankton_measurement_seq TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_plankton_biomass; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_plankton_biomass TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_plankton_biomass TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_plankton_biomass_data; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_plankton_biomass_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_plankton_biomass_data TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_plankton_biomass_measurement_seq; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON SEQUENCE anmn_nrs_bgc_plankton_biomass_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE anmn_nrs_bgc_plankton_biomass_measurement_seq TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_plankton_phytoplankton; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_plankton_phytoplankton TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_plankton_phytoplankton TO harvest_write_group;


--
-- Name: nrs_phyto_taxon_changelog; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE nrs_phyto_taxon_changelog TO harvest_read_group;
GRANT ALL ON TABLE nrs_phyto_taxon_changelog TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_plankton_phytoplankton_data; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_plankton_phytoplankton_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_plankton_phytoplankton_data TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_plankton_phytoplankton_measurement_seq; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON SEQUENCE anmn_nrs_bgc_plankton_phytoplankton_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE anmn_nrs_bgc_plankton_phytoplankton_measurement_seq TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_plankton_zooplankton; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_plankton_zooplankton TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_plankton_zooplankton TO harvest_write_group;


--
-- Name: nrs_zoop_taxon_changelog; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE nrs_zoop_taxon_changelog TO harvest_read_group;
GRANT ALL ON TABLE nrs_zoop_taxon_changelog TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_plankton_zooplankton_data; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_plankton_zooplankton_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_plankton_zooplankton_data TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_plankton_zooplankton_measurement_seq; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON SEQUENCE anmn_nrs_bgc_plankton_zooplankton_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE anmn_nrs_bgc_plankton_zooplankton_measurement_seq TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_tss_secchi; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_tss_secchi TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_tss_secchi TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_tss_secchi_data; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE anmn_nrs_bgc_tss_secchi_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_bgc_tss_secchi_data TO harvest_write_group;


--
-- Name: anmn_nrs_bgc_tss_secchi_measurement_seq; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON SEQUENCE anmn_nrs_bgc_tss_secchi_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE anmn_nrs_bgc_tss_secchi_measurement_seq TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: qc_flags; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON TABLE qc_flags TO harvest_read_group;
GRANT ALL ON TABLE qc_flags TO harvest_write_group;


--
-- Name: station_name_station_id_seq; Type: ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

GRANT SELECT ON SEQUENCE station_name_station_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE station_name_station_id_seq TO harvest_write_group;


SET search_path = anmn_nrs_ctd_profiles, pg_catalog;

--
-- Name: deployments; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON TABLE deployments TO harvest_write_group;
GRANT SELECT ON TABLE deployments TO harvest_read_group;


--
-- Name: measurements; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON TABLE measurements TO harvest_write_group;
GRANT SELECT ON TABLE measurements TO harvest_read_group;


--
-- Name: anmn_nrs_ctd_profiles_data; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON TABLE anmn_nrs_ctd_profiles_data TO harvest_write_group;
GRANT SELECT ON TABLE anmn_nrs_ctd_profiles_data TO harvest_read_group;


--
-- Name: indexed_file; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON TABLE indexed_file TO harvest_write_group;
GRANT SELECT ON TABLE indexed_file TO harvest_read_group;


--
-- Name: anmn_nrs_ctd_profiles_map; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON TABLE anmn_nrs_ctd_profiles_map TO harvest_write_group;
GRANT SELECT ON TABLE anmn_nrs_ctd_profiles_map TO harvest_read_group;


--
-- Name: attribute; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON TABLE attribute TO harvest_write_group;
GRANT SELECT ON TABLE attribute TO harvest_read_group;


--
-- Name: databasechangelog; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON TABLE databasechangelog TO harvest_write_group;
GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;
GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;


--
-- Name: file; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON TABLE file TO harvest_write_group;
GRANT SELECT ON TABLE file TO harvest_read_group;


--
-- Name: file_harvest; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON TABLE file_harvest TO harvest_write_group;
GRANT SELECT ON TABLE file_harvest TO harvest_read_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON TABLE index_job TO harvest_write_group;
GRANT SELECT ON TABLE index_job TO harvest_read_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: measurements_measurement_seq; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON SEQUENCE measurements_measurement_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_measurement_seq TO harvest_read_group;


--
-- Name: variable; Type: ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

GRANT ALL ON TABLE variable TO harvest_write_group;
GRANT SELECT ON TABLE variable TO harvest_read_group;


SET search_path = anmn_nrs_dar_yon, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE attribute TO harvest_read_group;
GRANT ALL ON TABLE attribute TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: measurements_noqaqc; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE measurements_noqaqc TO harvest_read_group;
GRANT ALL ON TABLE measurements_noqaqc TO harvest_write_group;


--
-- Name: measurements_qaqc; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE measurements_qaqc TO harvest_read_group;
GRANT ALL ON TABLE measurements_qaqc TO harvest_write_group;


--
-- Name: timeseries_feature_deployments_varname; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE timeseries_feature_deployments_varname TO harvest_read_group;
GRANT ALL ON TABLE timeseries_feature_deployments_varname TO harvest_write_group;


--
-- Name: variables_info; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE variables_info TO harvest_read_group;
GRANT ALL ON TABLE variables_info TO harvest_write_group;


--
-- Name: anmn_nrs_dar_yon_timeseries_data; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE anmn_nrs_dar_yon_timeseries_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_dar_yon_timeseries_data TO harvest_write_group;


--
-- Name: anmn_nrs_dar_yon_timeseries_map; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE anmn_nrs_dar_yon_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_dar_yon_timeseries_map TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE file TO harvest_read_group;
GRANT ALL ON TABLE file TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: global_attributes_file; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE global_attributes_file TO harvest_read_group;
GRANT ALL ON TABLE global_attributes_file TO harvest_write_group;


--
-- Name: global_attributes_file_id_seq; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON SEQUENCE global_attributes_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE global_attributes_file_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: measurements_noqaqc_measurement_seq; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON SEQUENCE measurements_noqaqc_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_noqaqc_measurement_seq TO harvest_write_group;


--
-- Name: measurements_qaqc_measurement_seq; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON SEQUENCE measurements_qaqc_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_qaqc_measurement_seq TO harvest_write_group;


--
-- Name: timeseries_feature_deployments; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE timeseries_feature_deployments TO harvest_read_group;
GRANT ALL ON TABLE timeseries_feature_deployments TO harvest_write_group;


--
-- Name: variable; Type: ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

GRANT SELECT ON TABLE variable TO harvest_read_group;
GRANT ALL ON TABLE variable TO harvest_write_group;


SET search_path = anmn_nrs_rt_bio, pg_catalog;

--
-- Name: measurement; Type: ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

GRANT SELECT ON TABLE measurement TO harvest_read_group;
GRANT ALL ON TABLE measurement TO harvest_write_group;


--
-- Name: timeseries; Type: ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

GRANT SELECT ON TABLE timeseries TO harvest_read_group;
GRANT ALL ON TABLE timeseries TO harvest_write_group;


--
-- Name: anmn_nrs_rt_bio_timeseries_data; Type: ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

GRANT SELECT ON TABLE anmn_nrs_rt_bio_timeseries_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_rt_bio_timeseries_data TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: anmn_nrs_rt_bio_timeseries_map; Type: ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

GRANT SELECT ON TABLE anmn_nrs_rt_bio_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_rt_bio_timeseries_map TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: timeseries_id_seq; Type: ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

GRANT ALL ON SEQUENCE timeseries_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE timeseries_id_seq TO harvest_read_group;


SET search_path = anmn_nrs_rt_meteo, pg_catalog;

--
-- Name: measurement; Type: ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

GRANT SELECT ON TABLE measurement TO harvest_read_group;
GRANT ALL ON TABLE measurement TO harvest_write_group;


--
-- Name: timeseries; Type: ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

GRANT SELECT ON TABLE timeseries TO harvest_read_group;
GRANT ALL ON TABLE timeseries TO harvest_write_group;


--
-- Name: anmn_nrs_rt_meteo_timeseries_data; Type: ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

GRANT SELECT ON TABLE anmn_nrs_rt_meteo_timeseries_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_rt_meteo_timeseries_data TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: anmn_nrs_rt_meteo_timeseries_map; Type: ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

GRANT SELECT ON TABLE anmn_nrs_rt_meteo_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_rt_meteo_timeseries_map TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: timeseries_id_seq; Type: ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

GRANT ALL ON SEQUENCE timeseries_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE timeseries_id_seq TO harvest_read_group;


SET search_path = anmn_nrs_rt_wave, pg_catalog;

--
-- Name: measurement; Type: ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

GRANT SELECT ON TABLE measurement TO harvest_read_group;
GRANT ALL ON TABLE measurement TO harvest_write_group;


--
-- Name: timeseries; Type: ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

GRANT SELECT ON TABLE timeseries TO harvest_read_group;
GRANT ALL ON TABLE timeseries TO harvest_write_group;


--
-- Name: anmn_nrs_rt_wave_timeseries_data; Type: ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

GRANT SELECT ON TABLE anmn_nrs_rt_wave_timeseries_data TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_rt_wave_timeseries_data TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: anmn_nrs_rt_wave_timeseries_map; Type: ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

GRANT SELECT ON TABLE anmn_nrs_rt_wave_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE anmn_nrs_rt_wave_timeseries_map TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: timeseries_id_seq; Type: ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

GRANT SELECT ON SEQUENCE timeseries_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE timeseries_id_seq TO harvest_write_group;


SET search_path = anmn_ts, pg_catalog;

--
-- Name: measurement; Type: ACL; Schema: anmn_ts; Owner: anmn_ts
--

GRANT ALL ON TABLE measurement TO harvest_write_group;
GRANT SELECT ON TABLE measurement TO harvest_read_group;


--
-- Name: timeseries; Type: ACL; Schema: anmn_ts; Owner: anmn_ts
--

GRANT ALL ON TABLE timeseries TO harvest_write_group;
GRANT SELECT ON TABLE timeseries TO harvest_read_group;


--
-- Name: anmn_ts_timeseries_data; Type: ACL; Schema: anmn_ts; Owner: anmn_ts
--

GRANT ALL ON TABLE anmn_ts_timeseries_data TO harvest_write_group;
GRANT SELECT ON TABLE anmn_ts_timeseries_data TO harvest_read_group;


--
-- Name: indexed_file; Type: ACL; Schema: anmn_ts; Owner: anmn_ts
--

GRANT ALL ON TABLE indexed_file TO harvest_write_group;
GRANT SELECT ON TABLE indexed_file TO harvest_read_group;


--
-- Name: anmn_ts_timeseries_map; Type: ACL; Schema: anmn_ts; Owner: anmn_ts
--

GRANT ALL ON TABLE anmn_ts_timeseries_map TO harvest_write_group;
GRANT SELECT ON TABLE anmn_ts_timeseries_map TO harvest_read_group;


--
-- Name: databasechangelog; Type: ACL; Schema: anmn_ts; Owner: anmn_ts
--

GRANT ALL ON TABLE databasechangelog TO harvest_write_group;
GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: anmn_ts; Owner: anmn_ts
--

GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;
GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;


--
-- Name: file_harvest; Type: ACL; Schema: anmn_ts; Owner: anmn_ts
--

GRANT ALL ON TABLE file_harvest TO harvest_write_group;
GRANT SELECT ON TABLE file_harvest TO harvest_read_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: anmn_ts; Owner: anmn_ts
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: anmn_ts; Owner: anmn_ts
--

GRANT ALL ON TABLE index_job TO harvest_write_group;
GRANT SELECT ON TABLE index_job TO harvest_read_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: anmn_ts; Owner: anmn_ts
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: anmn_ts; Owner: anmn_ts
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: timeseries_id_seq; Type: ACL; Schema: anmn_ts; Owner: anmn_ts
--

GRANT ALL ON SEQUENCE timeseries_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE timeseries_id_seq TO harvest_read_group;


SET search_path = aodn_dart, pg_catalog;

--
-- Name: dart_records; Type: ACL; Schema: aodn_dart; Owner: aodn_dart
--

GRANT SELECT ON TABLE dart_records TO harvest_read_group;
GRANT ALL ON TABLE dart_records TO harvest_write_group;


--
-- Name: dart_stations; Type: ACL; Schema: aodn_dart; Owner: aodn_dart
--

GRANT SELECT ON TABLE dart_stations TO harvest_read_group;
GRANT ALL ON TABLE dart_stations TO harvest_write_group;


--
-- Name: dart_latest; Type: ACL; Schema: aodn_dart; Owner: aodn_dart
--

GRANT SELECT ON TABLE dart_latest TO harvest_read_group;
GRANT ALL ON TABLE dart_latest TO harvest_write_group;


--
-- Name: dart_records_pkid_seq; Type: ACL; Schema: aodn_dart; Owner: aodn_dart
--

GRANT ALL ON SEQUENCE dart_records_pkid_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE dart_records_pkid_seq TO harvest_read_group;


--
-- Name: databasechangelog; Type: ACL; Schema: aodn_dart; Owner: aodn_dart
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: aodn_dart; Owner: aodn_dart
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: maxtype; Type: ACL; Schema: aodn_dart; Owner: aodn_dart
--

GRANT SELECT ON TABLE maxtype TO harvest_read_group;
GRANT ALL ON TABLE maxtype TO harvest_write_group;


SET search_path = aodn_imas_fluorometry, pg_catalog;

--
-- Name: deployments; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON TABLE deployments TO harvest_write_group;
GRANT SELECT ON TABLE deployments TO harvest_read_group;


--
-- Name: measurements; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON TABLE measurements TO harvest_write_group;
GRANT SELECT ON TABLE measurements TO harvest_read_group;


--
-- Name: aodn_imas_fluorometry_data; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON TABLE aodn_imas_fluorometry_data TO harvest_write_group;
GRANT SELECT ON TABLE aodn_imas_fluorometry_data TO harvest_read_group;


--
-- Name: aodn_imas_fluorometry_map; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON TABLE aodn_imas_fluorometry_map TO harvest_write_group;
GRANT SELECT ON TABLE aodn_imas_fluorometry_map TO harvest_read_group;


--
-- Name: attribute; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON TABLE attribute TO harvest_write_group;
GRANT SELECT ON TABLE attribute TO harvest_read_group;


--
-- Name: databasechangelog; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON TABLE databasechangelog TO harvest_write_group;
GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;
GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;


--
-- Name: file_harvest; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON TABLE file_harvest TO harvest_write_group;
GRANT SELECT ON TABLE file_harvest TO harvest_read_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON TABLE index_job TO harvest_write_group;
GRANT SELECT ON TABLE index_job TO harvest_read_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON TABLE indexed_file TO harvest_write_group;
GRANT SELECT ON TABLE indexed_file TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: measurements_measurement_id_seq; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON SEQUENCE measurements_measurement_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_measurement_id_seq TO harvest_read_group;


--
-- Name: variable; Type: ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

GRANT ALL ON TABLE variable TO harvest_write_group;
GRANT SELECT ON TABLE variable TO harvest_read_group;


SET search_path = aodn_mhl_sst, pg_catalog;

--
-- Name: deployments; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON TABLE deployments TO harvest_write_group;
GRANT SELECT ON TABLE deployments TO harvest_read_group;


--
-- Name: measurements; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON TABLE measurements TO harvest_write_group;
GRANT SELECT ON TABLE measurements TO harvest_read_group;


--
-- Name: aodn_mhl_sst_data; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON TABLE aodn_mhl_sst_data TO harvest_write_group;
GRANT SELECT ON TABLE aodn_mhl_sst_data TO harvest_read_group;


--
-- Name: indexed_file; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON TABLE indexed_file TO harvest_write_group;
GRANT SELECT ON TABLE indexed_file TO harvest_read_group;


--
-- Name: aodn_mhl_sst_map; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON TABLE aodn_mhl_sst_map TO harvest_write_group;
GRANT SELECT ON TABLE aodn_mhl_sst_map TO harvest_read_group;


--
-- Name: attribute; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON TABLE attribute TO harvest_write_group;
GRANT SELECT ON TABLE attribute TO harvest_read_group;


--
-- Name: databasechangelog; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON TABLE databasechangelog TO harvest_write_group;
GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;
GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;


--
-- Name: file; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON TABLE file TO harvest_write_group;
GRANT SELECT ON TABLE file TO harvest_read_group;


--
-- Name: file_harvest; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON TABLE file_harvest TO harvest_write_group;
GRANT SELECT ON TABLE file_harvest TO harvest_read_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON TABLE index_job TO harvest_write_group;
GRANT SELECT ON TABLE index_job TO harvest_read_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: measurements_measurement_id_seq; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON SEQUENCE measurements_measurement_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_measurement_id_seq TO harvest_read_group;


--
-- Name: variable; Type: ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

GRANT ALL ON TABLE variable TO harvest_write_group;
GRANT SELECT ON TABLE variable TO harvest_read_group;


SET search_path = aodn_nsw_oeh, pg_catalog;

--
-- Name: indexed_file; Type: ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: survey_metadata; Type: ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

GRANT SELECT ON TABLE survey_metadata TO harvest_read_group;
GRANT ALL ON TABLE survey_metadata TO harvest_write_group;


--
-- Name: aodn_nsw_oeh_bathy_map; Type: ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

GRANT SELECT ON TABLE aodn_nsw_oeh_bathy_map TO harvest_read_group;
GRANT ALL ON TABLE aodn_nsw_oeh_bathy_map TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: survey_metadata_id_seq; Type: ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

GRANT ALL ON SEQUENCE survey_metadata_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE survey_metadata_id_seq TO harvest_read_group;


SET search_path = aodn_ran_ctd, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON TABLE attribute TO harvest_write_group;
GRANT SELECT ON TABLE attribute TO harvest_read_group;


--
-- Name: databasechangelog; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON TABLE databasechangelog TO harvest_write_group;
GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;
GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;


--
-- Name: deployments; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON TABLE deployments TO harvest_write_group;
GRANT SELECT ON TABLE deployments TO harvest_read_group;


--
-- Name: file; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON TABLE file TO harvest_write_group;
GRANT SELECT ON TABLE file TO harvest_read_group;


--
-- Name: file_harvest; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON TABLE file_harvest TO harvest_write_group;
GRANT SELECT ON TABLE file_harvest TO harvest_read_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON TABLE index_job TO harvest_write_group;
GRANT SELECT ON TABLE index_job TO harvest_read_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON TABLE indexed_file TO harvest_write_group;
GRANT SELECT ON TABLE indexed_file TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: measurements; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON TABLE measurements TO harvest_write_group;
GRANT SELECT ON TABLE measurements TO harvest_read_group;


--
-- Name: measurements_measurement_id_seq; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON SEQUENCE measurements_measurement_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_measurement_id_seq TO harvest_read_group;


--
-- Name: variable; Type: ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

GRANT ALL ON TABLE variable TO harvest_write_group;
GRANT SELECT ON TABLE variable TO harvest_read_group;


SET search_path = aodn_wamsi_sediment, pg_catalog;

--
-- Name: aodn_wamsi_sediment_data; Type: ACL; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

GRANT SELECT ON TABLE aodn_wamsi_sediment_data TO harvest_read_group;
GRANT ALL ON TABLE aodn_wamsi_sediment_data TO harvest_write_group;


--
-- Name: aodn_wamsi_sediment_data_measurement_id_seq; Type: ACL; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

GRANT SELECT ON SEQUENCE aodn_wamsi_sediment_data_measurement_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE aodn_wamsi_sediment_data_measurement_id_seq TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


SET search_path = aus_phyto_db_ongoing, pg_catalog;

--
-- Name: apd_data; Type: ACL; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

GRANT SELECT ON TABLE apd_data TO harvest_read_group;
GRANT ALL ON TABLE apd_data TO harvest_write_group;


--
-- Name: apd_metadata; Type: ACL; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

GRANT SELECT ON TABLE apd_metadata TO harvest_read_group;
GRANT ALL ON TABLE apd_metadata TO harvest_write_group;


--
-- Name: aus_phyto_db_data; Type: ACL; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

GRANT SELECT ON TABLE aus_phyto_db_data TO harvest_read_group;
GRANT ALL ON TABLE aus_phyto_db_data TO harvest_write_group;


--
-- Name: aus_phyto_db_map; Type: ACL; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

GRANT SELECT ON TABLE aus_phyto_db_map TO harvest_read_group;
GRANT ALL ON TABLE aus_phyto_db_map TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


SET search_path = auv, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE attribute TO harvest_read_group;
GRANT ALL ON TABLE attribute TO harvest_write_group;


--
-- Name: measurements_b; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE measurements_b TO harvest_read_group;
GRANT ALL ON TABLE measurements_b TO harvest_write_group;


--
-- Name: auv_trajectory_b_data; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE auv_trajectory_b_data TO harvest_read_group;
GRANT ALL ON TABLE auv_trajectory_b_data TO harvest_write_group;


--
-- Name: matchup_dive_url; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE matchup_dive_url TO harvest_read_group;
GRANT ALL ON TABLE matchup_dive_url TO harvest_write_group;


--
-- Name: visualisation_wms; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE visualisation_wms TO harvest_read_group;
GRANT ALL ON TABLE visualisation_wms TO harvest_write_group;


--
-- Name: auv_trajectory_map; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE auv_trajectory_map TO harvest_read_group;
GRANT ALL ON TABLE auv_trajectory_map TO harvest_write_group;


--
-- Name: measurements_st; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE measurements_st TO harvest_read_group;
GRANT ALL ON TABLE measurements_st TO harvest_write_group;


--
-- Name: auv_trajectory_st_data; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE auv_trajectory_st_data TO harvest_read_group;
GRANT ALL ON TABLE auv_trajectory_st_data TO harvest_write_group;


--
-- Name: campaign_names; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE campaign_names TO harvest_read_group;
GRANT ALL ON TABLE campaign_names TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: deployments; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE deployments TO harvest_read_group;
GRANT ALL ON TABLE deployments TO harvest_write_group;


--
-- Name: deployments_deploy_id_seq; Type: ACL; Schema: auv; Owner: auv
--

GRANT ALL ON SEQUENCE deployments_deploy_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE deployments_deploy_id_seq TO harvest_read_group;


--
-- Name: file; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE file TO harvest_read_group;
GRANT ALL ON TABLE file TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: auv; Owner: auv
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: auv; Owner: auv
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: auv; Owner: auv
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: measurements_b_measurement_seq; Type: ACL; Schema: auv; Owner: auv
--

GRANT ALL ON SEQUENCE measurements_b_measurement_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_b_measurement_seq TO harvest_read_group;


--
-- Name: measurements_merged_data; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE measurements_merged_data TO harvest_read_group;
GRANT ALL ON TABLE measurements_merged_data TO harvest_write_group;


--
-- Name: measurements_st_measurement_seq; Type: ACL; Schema: auv; Owner: auv
--

GRANT ALL ON SEQUENCE measurements_st_measurement_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_st_measurement_seq TO harvest_read_group;


--
-- Name: table_master; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE table_master TO harvest_read_group;
GRANT ALL ON TABLE table_master TO harvest_write_group;


--
-- Name: variable; Type: ACL; Schema: auv; Owner: auv
--

GRANT SELECT ON TABLE variable TO harvest_read_group;
GRANT ALL ON TABLE variable TO harvest_write_group;


SET search_path = auv_viewer_track, pg_catalog;

--
-- Name: auv_images; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON TABLE auv_images TO harvest_read_group;
GRANT ALL ON TABLE auv_images TO harvest_write_group;


--
-- Name: auv_images_pkid_seq; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON SEQUENCE auv_images_pkid_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE auv_images_pkid_seq TO harvest_write_group;


--
-- Name: auv_tracks; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON TABLE auv_tracks TO harvest_read_group;
GRANT ALL ON TABLE auv_tracks TO harvest_write_group;


--
-- Name: auv_images_vw; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON TABLE auv_images_vw TO harvest_read_group;
GRANT ALL ON TABLE auv_images_vw TO harvest_write_group;


--
-- Name: auv_reporting; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON TABLE auv_reporting TO harvest_read_group;
GRANT ALL ON TABLE auv_reporting TO harvest_write_group;


--
-- Name: auv_tracks_pkid_seq; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON SEQUENCE auv_tracks_pkid_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE auv_tracks_pkid_seq TO harvest_write_group;


--
-- Name: auv_tracks_vw; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON TABLE auv_tracks_vw TO harvest_read_group;
GRANT ALL ON TABLE auv_tracks_vw TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


SET search_path = dw_aatams_acoustic, pg_catalog;

--
-- Name: aatams_acoustic_detections_data; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE aatams_acoustic_detections_data TO harvest_write_group;
GRANT SELECT ON TABLE aatams_acoustic_detections_data TO harvest_read_group;


--
-- Name: aatams_acoustic_detections_data_pkid_seq; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON SEQUENCE aatams_acoustic_detections_data_pkid_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE aatams_acoustic_detections_data_pkid_seq TO harvest_read_group;


--
-- Name: aatams_acoustic_detections_map; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE aatams_acoustic_detections_map TO harvest_write_group;
GRANT SELECT ON TABLE aatams_acoustic_detections_map TO harvest_read_group;


--
-- Name: aatams_acoustic_detections_map_id_seq; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON SEQUENCE aatams_acoustic_detections_map_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE aatams_acoustic_detections_map_id_seq TO harvest_read_group;


--
-- Name: aatams_acoustic_embargo_totals_view; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE aatams_acoustic_embargo_totals_view TO harvest_write_group;
GRANT SELECT ON TABLE aatams_acoustic_embargo_totals_view TO harvest_read_group;


--
-- Name: aatams_acoustic_project_all_deployments_view; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE aatams_acoustic_project_all_deployments_view TO harvest_write_group;
GRANT SELECT ON TABLE aatams_acoustic_project_all_deployments_view TO harvest_read_group;


--
-- Name: aatams_acoustic_project_data_summary_view; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE aatams_acoustic_project_data_summary_view TO harvest_write_group;
GRANT SELECT ON TABLE aatams_acoustic_project_data_summary_view TO harvest_read_group;


--
-- Name: aatams_acoustic_project_totals_view; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE aatams_acoustic_project_totals_view TO harvest_write_group;
GRANT SELECT ON TABLE aatams_acoustic_project_totals_view TO harvest_read_group;


--
-- Name: aatams_acoustic_registered_totals_view; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE aatams_acoustic_registered_totals_view TO harvest_write_group;
GRANT SELECT ON TABLE aatams_acoustic_registered_totals_view TO harvest_read_group;


--
-- Name: aatams_acoustic_species_all_deployments_view; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE aatams_acoustic_species_all_deployments_view TO harvest_write_group;
GRANT SELECT ON TABLE aatams_acoustic_species_all_deployments_view TO harvest_read_group;


--
-- Name: aatams_acoustic_species_data_summary_view; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE aatams_acoustic_species_data_summary_view TO harvest_write_group;
GRANT SELECT ON TABLE aatams_acoustic_species_data_summary_view TO harvest_read_group;


--
-- Name: aatams_acoustic_stats_view; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE aatams_acoustic_stats_view TO harvest_write_group;
GRANT SELECT ON TABLE aatams_acoustic_stats_view TO harvest_read_group;


--
-- Name: animal; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE animal TO harvest_write_group;
GRANT SELECT ON TABLE animal TO harvest_read_group;


--
-- Name: animal_measurement; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE animal_measurement TO harvest_write_group;
GRANT SELECT ON TABLE animal_measurement TO harvest_read_group;


--
-- Name: animal_measurement_type; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE animal_measurement_type TO harvest_write_group;
GRANT SELECT ON TABLE animal_measurement_type TO harvest_read_group;


--
-- Name: animal_release; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE animal_release TO harvest_write_group;
GRANT SELECT ON TABLE animal_release TO harvest_read_group;


--
-- Name: databasechangelog; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE databasechangelog TO harvest_write_group;
GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;
GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;


--
-- Name: device; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE device TO harvest_write_group;
GRANT SELECT ON TABLE device TO harvest_read_group;


--
-- Name: device_model; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE device_model TO harvest_write_group;
GRANT SELECT ON TABLE device_model TO harvest_read_group;


--
-- Name: installation; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE installation TO harvest_write_group;
GRANT SELECT ON TABLE installation TO harvest_read_group;


--
-- Name: installation_configuration; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE installation_configuration TO harvest_write_group;
GRANT SELECT ON TABLE installation_configuration TO harvest_read_group;


--
-- Name: installation_station; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE installation_station TO harvest_write_group;
GRANT SELECT ON TABLE installation_station TO harvest_read_group;


--
-- Name: installation_summary; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE installation_summary TO harvest_write_group;
GRANT SELECT ON TABLE installation_summary TO harvest_read_group;


--
-- Name: measurement_unit; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE measurement_unit TO harvest_write_group;
GRANT SELECT ON TABLE measurement_unit TO harvest_read_group;


--
-- Name: project; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE project TO harvest_write_group;
GRANT SELECT ON TABLE project TO harvest_read_group;


--
-- Name: receiver_deployment; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE receiver_deployment TO harvest_write_group;
GRANT SELECT ON TABLE receiver_deployment TO harvest_read_group;


--
-- Name: receiver_recovery; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE receiver_recovery TO harvest_write_group;
GRANT SELECT ON TABLE receiver_recovery TO harvest_read_group;


--
-- Name: sensor; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE sensor TO harvest_write_group;
GRANT SELECT ON TABLE sensor TO harvest_read_group;


--
-- Name: sex; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE sex TO harvest_write_group;
GRANT SELECT ON TABLE sex TO harvest_read_group;


--
-- Name: species; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE species TO harvest_write_group;
GRANT SELECT ON TABLE species TO harvest_read_group;


--
-- Name: surgery; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE surgery TO harvest_write_group;
GRANT SELECT ON TABLE surgery TO harvest_read_group;


--
-- Name: transmitter_type; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE transmitter_type TO harvest_write_group;
GRANT SELECT ON TABLE transmitter_type TO harvest_read_group;


--
-- Name: valid_detection; Type: ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

GRANT ALL ON TABLE valid_detection TO harvest_write_group;
GRANT SELECT ON TABLE valid_detection TO harvest_read_group;


SET search_path = dw_abos, pg_catalog;

--
-- Name: abos_file; Type: ACL; Schema: dw_abos; Owner: dw_abos
--

GRANT SELECT ON TABLE abos_file TO harvest_read_group;
GRANT ALL ON TABLE abos_file TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: dw_abos; Owner: dw_abos
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: dw_abos; Owner: dw_abos
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


SET search_path = faimms, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE attribute TO harvest_read_group;
GRANT ALL ON TABLE attribute TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: measurements_noqaqc; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE measurements_noqaqc TO harvest_read_group;
GRANT ALL ON TABLE measurements_noqaqc TO harvest_write_group;


--
-- Name: measurements_qaqc; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE measurements_qaqc TO harvest_read_group;
GRANT ALL ON TABLE measurements_qaqc TO harvest_write_group;


--
-- Name: timeseries_feature_deployments_varname; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE timeseries_feature_deployments_varname TO harvest_read_group;
GRANT ALL ON TABLE timeseries_feature_deployments_varname TO harvest_write_group;


--
-- Name: faimms_timeseries_data; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE faimms_timeseries_data TO harvest_read_group;
GRANT ALL ON TABLE faimms_timeseries_data TO harvest_write_group;


--
-- Name: faimms_timeseries_map; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE faimms_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE faimms_timeseries_map TO harvest_write_group;


--
-- Name: file; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE file TO harvest_read_group;
GRANT ALL ON TABLE file TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: global_attributes_file; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE global_attributes_file TO harvest_read_group;
GRANT ALL ON TABLE global_attributes_file TO harvest_write_group;


--
-- Name: global_attributes_file_id_seq; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON SEQUENCE global_attributes_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE global_attributes_file_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: measurements_noqaqc_measurement_seq; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON SEQUENCE measurements_noqaqc_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_noqaqc_measurement_seq TO harvest_write_group;


--
-- Name: measurements_qaqc_measurement_seq; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON SEQUENCE measurements_qaqc_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_qaqc_measurement_seq TO harvest_write_group;


--
-- Name: timeseries_feature_deployments; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE timeseries_feature_deployments TO harvest_read_group;
GRANT ALL ON TABLE timeseries_feature_deployments TO harvest_write_group;


--
-- Name: variable; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE variable TO harvest_read_group;
GRANT ALL ON TABLE variable TO harvest_write_group;


--
-- Name: variables_info; Type: ACL; Schema: faimms; Owner: faimms
--

GRANT SELECT ON TABLE variables_info TO harvest_read_group;
GRANT ALL ON TABLE variables_info TO harvest_write_group;


SET search_path = future_reef_map, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON TABLE attribute TO harvest_read_group;
GRANT ALL ON TABLE attribute TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: deployments; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON TABLE deployments TO harvest_read_group;
GRANT ALL ON TABLE deployments TO harvest_write_group;


--
-- Name: deployments_deploy_id_seq; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON SEQUENCE deployments_deploy_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE deployments_deploy_id_seq TO harvest_write_group;


--
-- Name: file; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON TABLE file TO harvest_read_group;
GRANT ALL ON TABLE file TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: measurements; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON TABLE measurements TO harvest_read_group;
GRANT ALL ON TABLE measurements TO harvest_write_group;


--
-- Name: future_reef_map_trajectory_data; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON TABLE future_reef_map_trajectory_data TO harvest_read_group;
GRANT ALL ON TABLE future_reef_map_trajectory_data TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: visualisation_wms; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON TABLE visualisation_wms TO harvest_read_group;
GRANT ALL ON TABLE visualisation_wms TO harvest_write_group;


--
-- Name: future_reef_map_trajectory_map; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON TABLE future_reef_map_trajectory_map TO harvest_read_group;
GRANT ALL ON TABLE future_reef_map_trajectory_map TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: measurements_measurement_seq; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON SEQUENCE measurements_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_measurement_seq TO harvest_write_group;


--
-- Name: variable; Type: ACL; Schema: future_reef_map; Owner: future_reef_map
--

GRANT SELECT ON TABLE variable TO harvest_read_group;
GRANT ALL ON TABLE variable TO harvest_write_group;


SET search_path = generic_timestep, pg_catalog;

--
-- Name: collection; Type: ACL; Schema: generic_timestep; Owner: generic_timestep
--

GRANT SELECT ON TABLE collection TO harvest_read_group;
GRANT ALL ON TABLE collection TO harvest_write_group;


--
-- Name: collection_id_seq; Type: ACL; Schema: generic_timestep; Owner: generic_timestep
--

GRANT ALL ON SEQUENCE collection_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE collection_id_seq TO harvest_read_group;


--
-- Name: databasechangelog; Type: ACL; Schema: generic_timestep; Owner: generic_timestep
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: generic_timestep; Owner: generic_timestep
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: generic_timestep; Owner: generic_timestep
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: generic_timestep; Owner: generic_timestep
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: generic_timestep; Owner: generic_timestep
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: generic_timestep; Owner: generic_timestep
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file; Type: ACL; Schema: generic_timestep; Owner: generic_timestep
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: generic_timestep; Owner: generic_timestep
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: timestep; Type: ACL; Schema: generic_timestep; Owner: generic_timestep
--

GRANT SELECT ON TABLE timestep TO harvest_read_group;
GRANT ALL ON TABLE timestep TO harvest_write_group;


--
-- Name: timestep_id_seq; Type: ACL; Schema: generic_timestep; Owner: generic_timestep
--

GRANT ALL ON SEQUENCE timestep_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE timestep_id_seq TO harvest_read_group;


--
-- Name: timestep_url; Type: ACL; Schema: generic_timestep; Owner: generic_timestep
--

GRANT SELECT ON TABLE timestep_url TO harvest_read_group;
GRANT ALL ON TABLE timestep_url TO harvest_write_group;


SET search_path = soop_asf_fmt, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE attribute TO harvest_read_group;
GRANT ALL ON TABLE attribute TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: deployments; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE deployments TO harvest_read_group;
GRANT ALL ON TABLE deployments TO harvest_write_group;


--
-- Name: deployments_deploy_id_seq; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON SEQUENCE deployments_deploy_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE deployments_deploy_id_seq TO harvest_write_group;


--
-- Name: file; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE file TO harvest_read_group;
GRANT ALL ON TABLE file TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: measurements; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE measurements TO harvest_read_group;
GRANT ALL ON TABLE measurements TO harvest_write_group;


--
-- Name: measurements_measurement_seq; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON SEQUENCE measurements_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_measurement_seq TO harvest_write_group;


--
-- Name: visualisation_wms; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE visualisation_wms TO harvest_read_group;
GRANT ALL ON TABLE visualisation_wms TO harvest_write_group;


--
-- Name: soop_asf_fmt_trajectory_data; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE soop_asf_fmt_trajectory_data TO harvest_read_group;
GRANT ALL ON TABLE soop_asf_fmt_trajectory_data TO harvest_write_group;


--
-- Name: soop_asf_fmt_trajectory_map; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE soop_asf_fmt_trajectory_map TO harvest_read_group;
GRANT ALL ON TABLE soop_asf_fmt_trajectory_map TO harvest_write_group;


--
-- Name: variable; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE variable TO harvest_read_group;
GRANT ALL ON TABLE variable TO harvest_write_group;


--
-- Name: vessel_names; Type: ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

GRANT SELECT ON TABLE vessel_names TO harvest_read_group;
GRANT ALL ON TABLE vessel_names TO harvest_write_group;


SET search_path = soop_asf_mt, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE attribute TO harvest_write_group;
GRANT SELECT ON TABLE attribute TO harvest_read_group;


--
-- Name: databasechangelog; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE databasechangelog TO harvest_write_group;
GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;
GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;


--
-- Name: deployments; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE deployments TO harvest_write_group;
GRANT SELECT ON TABLE deployments TO harvest_read_group;


--
-- Name: deployments_deploy_id_seq; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON SEQUENCE deployments_deploy_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE deployments_deploy_id_seq TO harvest_read_group;


--
-- Name: file; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE file TO harvest_write_group;
GRANT SELECT ON TABLE file TO harvest_read_group;


--
-- Name: file_harvest; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE file_harvest TO harvest_write_group;
GRANT SELECT ON TABLE file_harvest TO harvest_read_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE index_job TO harvest_write_group;
GRANT SELECT ON TABLE index_job TO harvest_read_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE indexed_file TO harvest_write_group;
GRANT SELECT ON TABLE indexed_file TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: measurements; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE measurements TO harvest_write_group;
GRANT SELECT ON TABLE measurements TO harvest_read_group;


--
-- Name: measurements_measurement_seq; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON SEQUENCE measurements_measurement_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_measurement_seq TO harvest_read_group;


--
-- Name: visualisation_wms; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE visualisation_wms TO harvest_write_group;
GRANT SELECT ON TABLE visualisation_wms TO harvest_read_group;


--
-- Name: soop_asf_mt_trajectory_data; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE soop_asf_mt_trajectory_data TO harvest_write_group;
GRANT SELECT ON TABLE soop_asf_mt_trajectory_data TO harvest_read_group;


--
-- Name: soop_asf_mt_trajectory_map; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE soop_asf_mt_trajectory_map TO harvest_write_group;
GRANT SELECT ON TABLE soop_asf_mt_trajectory_map TO harvest_read_group;


--
-- Name: variable; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE variable TO harvest_write_group;
GRANT SELECT ON TABLE variable TO harvest_read_group;


--
-- Name: vessel_names; Type: ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

GRANT ALL ON TABLE vessel_names TO harvest_write_group;
GRANT SELECT ON TABLE vessel_names TO harvest_read_group;


SET search_path = soop_auscpr, pg_catalog;

--
-- Name: databasechangelog; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: pci; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON TABLE pci TO harvest_read_group;
GRANT ALL ON TABLE pci TO harvest_write_group;


--
-- Name: pci_measurement_seq; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON SEQUENCE pci_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE pci_measurement_seq TO harvest_write_group;


--
-- Name: phyto; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON TABLE phyto TO harvest_read_group;
GRANT ALL ON TABLE phyto TO harvest_write_group;


--
-- Name: phyto_measurement_seq; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON SEQUENCE phyto_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE phyto_measurement_seq TO harvest_write_group;


--
-- Name: phyto_taxon_changelog; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON TABLE phyto_taxon_changelog TO harvest_read_group;
GRANT ALL ON TABLE phyto_taxon_changelog TO harvest_write_group;


--
-- Name: phyto_taxon_changelog_measurement_seq; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON SEQUENCE phyto_taxon_changelog_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE phyto_taxon_changelog_measurement_seq TO harvest_write_group;


--
-- Name: soop_auscpr_pci_trajectory_map; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON TABLE soop_auscpr_pci_trajectory_map TO harvest_read_group;
GRANT ALL ON TABLE soop_auscpr_pci_trajectory_map TO harvest_write_group;


--
-- Name: soop_auscpr_phyto_trajectory_map; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON TABLE soop_auscpr_phyto_trajectory_map TO harvest_read_group;
GRANT ALL ON TABLE soop_auscpr_phyto_trajectory_map TO harvest_write_group;


--
-- Name: zoop; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON TABLE zoop TO harvest_read_group;
GRANT ALL ON TABLE zoop TO harvest_write_group;


--
-- Name: zoop_taxon_changelog; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON TABLE zoop_taxon_changelog TO harvest_read_group;
GRANT ALL ON TABLE zoop_taxon_changelog TO harvest_write_group;


--
-- Name: soop_auscpr_zoop_trajectory_map; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON TABLE soop_auscpr_zoop_trajectory_map TO harvest_read_group;
GRANT ALL ON TABLE soop_auscpr_zoop_trajectory_map TO harvest_write_group;


--
-- Name: zoop_measurement_seq; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON SEQUENCE zoop_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE zoop_measurement_seq TO harvest_write_group;


--
-- Name: zoop_taxon_changelog_measurement_seq; Type: ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

GRANT SELECT ON SEQUENCE zoop_taxon_changelog_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE zoop_taxon_changelog_measurement_seq TO harvest_write_group;


SET search_path = soop_ba, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON TABLE attribute TO harvest_read_group;
GRANT ALL ON TABLE attribute TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: deployments; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON TABLE deployments TO harvest_read_group;
GRANT ALL ON TABLE deployments TO harvest_write_group;


--
-- Name: deployments_deploy_id_seq; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON SEQUENCE deployments_deploy_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE deployments_deploy_id_seq TO harvest_write_group;


--
-- Name: file; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON TABLE file TO harvest_read_group;
GRANT ALL ON TABLE file TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: measurements; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON TABLE measurements TO harvest_read_group;
GRANT ALL ON TABLE measurements TO harvest_write_group;


--
-- Name: measurements_measurement_seq; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON SEQUENCE measurements_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_measurement_seq TO harvest_write_group;


--
-- Name: visualisation_wms; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON TABLE visualisation_wms TO harvest_read_group;
GRANT ALL ON TABLE visualisation_wms TO harvest_write_group;


--
-- Name: soop_ba_trajectory_map; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON TABLE soop_ba_trajectory_map TO harvest_read_group;
GRANT ALL ON TABLE soop_ba_trajectory_map TO harvest_write_group;


--
-- Name: variable; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON TABLE variable TO harvest_read_group;
GRANT ALL ON TABLE variable TO harvest_write_group;


--
-- Name: vessel_names; Type: ACL; Schema: soop_ba; Owner: soop_ba
--

GRANT SELECT ON TABLE vessel_names TO harvest_read_group;
GRANT ALL ON TABLE vessel_names TO harvest_write_group;


SET search_path = soop_co2, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE attribute TO harvest_write_group;
GRANT SELECT ON TABLE attribute TO harvest_read_group;


--
-- Name: databasechangelog; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE databasechangelog TO harvest_write_group;
GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;
GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;


--
-- Name: deployments; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE deployments TO harvest_write_group;
GRANT SELECT ON TABLE deployments TO harvest_read_group;


--
-- Name: deployments_deploy_id_seq; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON SEQUENCE deployments_deploy_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE deployments_deploy_id_seq TO harvest_read_group;


--
-- Name: file; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE file TO harvest_write_group;
GRANT SELECT ON TABLE file TO harvest_read_group;


--
-- Name: file_harvest; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE file_harvest TO harvest_write_group;
GRANT SELECT ON TABLE file_harvest TO harvest_read_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE index_job TO harvest_write_group;
GRANT SELECT ON TABLE index_job TO harvest_read_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE indexed_file TO harvest_write_group;
GRANT SELECT ON TABLE indexed_file TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: measurements; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE measurements TO harvest_write_group;
GRANT SELECT ON TABLE measurements TO harvest_read_group;


--
-- Name: measurements_measurement_seq; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON SEQUENCE measurements_measurement_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_measurement_seq TO harvest_read_group;


--
-- Name: visualisation_wms; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE visualisation_wms TO harvest_write_group;
GRANT SELECT ON TABLE visualisation_wms TO harvest_read_group;


--
-- Name: soop_co2_trajectory_data; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE soop_co2_trajectory_data TO harvest_write_group;
GRANT SELECT ON TABLE soop_co2_trajectory_data TO harvest_read_group;


--
-- Name: soop_co2_trajectory_map; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE soop_co2_trajectory_map TO harvest_write_group;
GRANT SELECT ON TABLE soop_co2_trajectory_map TO harvest_read_group;


--
-- Name: variable; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE variable TO harvest_write_group;
GRANT SELECT ON TABLE variable TO harvest_read_group;


--
-- Name: vessel_names; Type: ACL; Schema: soop_co2; Owner: soop_co2
--

GRANT ALL ON TABLE vessel_names TO harvest_write_group;
GRANT SELECT ON TABLE vessel_names TO harvest_read_group;


SET search_path = soop_sst, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE attribute TO harvest_read_group;
GRANT ALL ON TABLE attribute TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE file TO harvest_read_group;
GRANT ALL ON TABLE file TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: measurements; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE measurements TO harvest_read_group;
GRANT ALL ON TABLE measurements TO harvest_write_group;


--
-- Name: measurements_measurement_id_seq; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON SEQUENCE measurements_measurement_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_measurement_id_seq TO harvest_write_group;


--
-- Name: soop_sst_dm_trajectory_map; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE soop_sst_dm_trajectory_map TO harvest_read_group;
GRANT ALL ON TABLE soop_sst_dm_trajectory_map TO harvest_write_group;


--
-- Name: soop_sst_dm_trajectory_data; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE soop_sst_dm_trajectory_data TO harvest_read_group;
GRANT ALL ON TABLE soop_sst_dm_trajectory_data TO harvest_write_group;


--
-- Name: soop_sst_nrt_trajectory_map; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE soop_sst_nrt_trajectory_map TO harvest_read_group;
GRANT ALL ON TABLE soop_sst_nrt_trajectory_map TO harvest_write_group;


--
-- Name: soop_sst_nrt_trajectory_data; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE soop_sst_nrt_trajectory_data TO harvest_read_group;
GRANT ALL ON TABLE soop_sst_nrt_trajectory_data TO harvest_write_group;


--
-- Name: variable; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE variable TO harvest_read_group;
GRANT ALL ON TABLE variable TO harvest_write_group;


--
-- Name: vessel_names; Type: ACL; Schema: soop_sst; Owner: soop_sst
--

GRANT SELECT ON TABLE vessel_names TO harvest_read_group;
GRANT ALL ON TABLE vessel_names TO harvest_write_group;


SET search_path = soop_tmv, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE attribute TO harvest_read_group;
GRANT ALL ON TABLE attribute TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: deployments; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE deployments TO harvest_read_group;
GRANT ALL ON TABLE deployments TO harvest_write_group;


--
-- Name: deployments_deploy_id_seq; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON SEQUENCE deployments_deploy_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE deployments_deploy_id_seq TO harvest_write_group;


--
-- Name: file; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE file TO harvest_read_group;
GRANT ALL ON TABLE file TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: measurements; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE measurements TO harvest_read_group;
GRANT ALL ON TABLE measurements TO harvest_write_group;


--
-- Name: measurements_measurement_seq; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON SEQUENCE measurements_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_measurement_seq TO harvest_write_group;


--
-- Name: visualisation_wms; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE visualisation_wms TO harvest_read_group;
GRANT ALL ON TABLE visualisation_wms TO harvest_write_group;


--
-- Name: soop_tmv_trajectory_data; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE soop_tmv_trajectory_data TO harvest_read_group;
GRANT ALL ON TABLE soop_tmv_trajectory_data TO harvest_write_group;


--
-- Name: soop_tmv_trajectory_map; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE soop_tmv_trajectory_map TO harvest_read_group;
GRANT ALL ON TABLE soop_tmv_trajectory_map TO harvest_write_group;


--
-- Name: variable; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE variable TO harvest_read_group;
GRANT ALL ON TABLE variable TO harvest_write_group;


--
-- Name: vessel_names; Type: ACL; Schema: soop_tmv; Owner: soop_tmv
--

GRANT SELECT ON TABLE vessel_names TO harvest_read_group;
GRANT ALL ON TABLE vessel_names TO harvest_write_group;


SET search_path = soop_tmv_nrt, pg_catalog;

--
-- Name: databasechangelog; Type: ACL; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


SET search_path = soop_trv, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE attribute TO harvest_write_group;
GRANT SELECT ON TABLE attribute TO harvest_read_group;


--
-- Name: databasechangelog; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE databasechangelog TO harvest_write_group;
GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;
GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;


--
-- Name: deployments; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE deployments TO harvest_write_group;
GRANT SELECT ON TABLE deployments TO harvest_read_group;


--
-- Name: deployments_deploy_id_seq; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON SEQUENCE deployments_deploy_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE deployments_deploy_id_seq TO harvest_read_group;


--
-- Name: file; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE file TO harvest_write_group;
GRANT SELECT ON TABLE file TO harvest_read_group;


--
-- Name: file_harvest; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE file_harvest TO harvest_write_group;
GRANT SELECT ON TABLE file_harvest TO harvest_read_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE index_job TO harvest_write_group;
GRANT SELECT ON TABLE index_job TO harvest_read_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE indexed_file TO harvest_write_group;
GRANT SELECT ON TABLE indexed_file TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: measurements_cphl; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE measurements_cphl TO harvest_write_group;
GRANT SELECT ON TABLE measurements_cphl TO harvest_read_group;


--
-- Name: measurements_cphl_measurement_seq; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON SEQUENCE measurements_cphl_measurement_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_cphl_measurement_seq TO harvest_read_group;


--
-- Name: measurements_merged_data; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE measurements_merged_data TO harvest_write_group;
GRANT SELECT ON TABLE measurements_merged_data TO harvest_read_group;


--
-- Name: measurements_merged_data_measurement_seq; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON SEQUENCE measurements_merged_data_measurement_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_merged_data_measurement_seq TO harvest_read_group;


--
-- Name: measurements_psal; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE measurements_psal TO harvest_write_group;
GRANT SELECT ON TABLE measurements_psal TO harvest_read_group;


--
-- Name: measurements_psal_measurement_seq; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON SEQUENCE measurements_psal_measurement_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_psal_measurement_seq TO harvest_read_group;


--
-- Name: measurements_temp; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE measurements_temp TO harvest_write_group;
GRANT SELECT ON TABLE measurements_temp TO harvest_read_group;


--
-- Name: measurements_temp_measurement_seq; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON SEQUENCE measurements_temp_measurement_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_temp_measurement_seq TO harvest_read_group;


--
-- Name: measurements_turb; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE measurements_turb TO harvest_write_group;
GRANT SELECT ON TABLE measurements_turb TO harvest_read_group;


--
-- Name: measurements_turb_measurement_seq; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON SEQUENCE measurements_turb_measurement_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_turb_measurement_seq TO harvest_read_group;


--
-- Name: visualisation_wms; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE visualisation_wms TO harvest_write_group;
GRANT SELECT ON TABLE visualisation_wms TO harvest_read_group;


--
-- Name: soop_trv_trajectory_data; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE soop_trv_trajectory_data TO harvest_write_group;
GRANT SELECT ON TABLE soop_trv_trajectory_data TO harvest_read_group;


--
-- Name: soop_trv_trajectory_map; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE soop_trv_trajectory_map TO harvest_write_group;
GRANT SELECT ON TABLE soop_trv_trajectory_map TO harvest_read_group;


--
-- Name: table_master; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE table_master TO harvest_write_group;
GRANT SELECT ON TABLE table_master TO harvest_read_group;


--
-- Name: table_master_measurements_seq; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON SEQUENCE table_master_measurements_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE table_master_measurements_seq TO harvest_read_group;


--
-- Name: temporary_sub_select_wms; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE temporary_sub_select_wms TO harvest_write_group;
GRANT SELECT ON TABLE temporary_sub_select_wms TO harvest_read_group;


--
-- Name: variable; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE variable TO harvest_write_group;
GRANT SELECT ON TABLE variable TO harvest_read_group;


--
-- Name: vessel_names; Type: ACL; Schema: soop_trv; Owner: soop_trv
--

GRANT ALL ON TABLE vessel_names TO harvest_write_group;
GRANT SELECT ON TABLE vessel_names TO harvest_read_group;


SET search_path = srs_altimetry, pg_catalog;

--
-- Name: databasechangelog; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: deployments; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON TABLE deployments TO harvest_read_group;
GRANT ALL ON TABLE deployments TO harvest_write_group;


--
-- Name: deployments_deploy_id_seq; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON SEQUENCE deployments_deploy_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE deployments_deploy_id_seq TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: measurements; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON TABLE measurements TO harvest_read_group;
GRANT ALL ON TABLE measurements TO harvest_write_group;


--
-- Name: measurements_measurement_seq; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON SEQUENCE measurements_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_measurement_seq TO harvest_write_group;


--
-- Name: visualisation_wms; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON TABLE visualisation_wms TO harvest_read_group;
GRANT ALL ON TABLE visualisation_wms TO harvest_write_group;


--
-- Name: srs_altimetry_timeseries_data; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON TABLE srs_altimetry_timeseries_data TO harvest_read_group;
GRANT ALL ON TABLE srs_altimetry_timeseries_data TO harvest_write_group;


--
-- Name: srs_altimetry_timeseries_map; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON TABLE srs_altimetry_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE srs_altimetry_timeseries_map TO harvest_write_group;


--
-- Name: temporary_sub_select_wms; Type: ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

GRANT SELECT ON TABLE temporary_sub_select_wms TO harvest_read_group;
GRANT ALL ON TABLE temporary_sub_select_wms TO harvest_write_group;


SET search_path = srs_oc_bodbaw, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT SELECT ON TABLE attribute TO harvest_read_group;
GRANT ALL ON TABLE attribute TO harvest_write_group;


--
-- Name: cruise_id; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT SELECT ON TABLE cruise_id TO harvest_read_group;
GRANT ALL ON TABLE cruise_id TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: deployments; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT SELECT ON TABLE deployments TO harvest_read_group;
GRANT ALL ON TABLE deployments TO harvest_write_group;


--
-- Name: deployments_deploy_id_seq; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT ALL ON SEQUENCE deployments_deploy_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE deployments_deploy_id_seq TO harvest_read_group;


--
-- Name: file; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT SELECT ON TABLE file TO harvest_read_group;
GRANT ALL ON TABLE file TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: measurements; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT SELECT ON TABLE measurements TO harvest_read_group;
GRANT ALL ON TABLE measurements TO harvest_write_group;


--
-- Name: measurements_measurement_seq; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT ALL ON SEQUENCE measurements_measurement_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE measurements_measurement_seq TO harvest_read_group;


--
-- Name: srs_oc_bodbaw_trajectory_profile_map; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT SELECT ON TABLE srs_oc_bodbaw_trajectory_profile_map TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_bodbaw_trajectory_profile_map TO harvest_write_group;


--
-- Name: variable; Type: ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

GRANT SELECT ON TABLE variable TO harvest_read_group;
GRANT ALL ON TABLE variable TO harvest_write_group;


SET search_path = srs_oc_ljco_wws, pg_catalog;

--
-- Name: databasechangelog; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: deployments; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE deployments TO harvest_read_group;
GRANT ALL ON TABLE deployments TO harvest_write_group;


--
-- Name: deployments_deploy_id_seq; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON SEQUENCE deployments_deploy_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE deployments_deploy_id_seq TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: measurements_daily_ecotriplet_fv02; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE measurements_daily_ecotriplet_fv02 TO harvest_read_group;
GRANT ALL ON TABLE measurements_daily_ecotriplet_fv02 TO harvest_write_group;


--
-- Name: measurements_daily_ecotriplet_fv02_measurement_id_seq; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON SEQUENCE measurements_daily_ecotriplet_fv02_measurement_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_daily_ecotriplet_fv02_measurement_id_seq TO harvest_write_group;


--
-- Name: measurements_daily_fv02_gridded; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE measurements_daily_fv02_gridded TO harvest_read_group;
GRANT ALL ON TABLE measurements_daily_fv02_gridded TO harvest_write_group;


--
-- Name: measurements_daily_fv02_gridded_measurement_id_seq; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON SEQUENCE measurements_daily_fv02_gridded_measurement_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_daily_fv02_gridded_measurement_id_seq TO harvest_write_group;


--
-- Name: measurements_daily_wqm_fv02; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE measurements_daily_wqm_fv02 TO harvest_read_group;
GRANT ALL ON TABLE measurements_daily_wqm_fv02 TO harvest_write_group;


--
-- Name: measurements_daily_wqm_fv02_measurement_id_seq; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON SEQUENCE measurements_daily_wqm_fv02_measurement_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_daily_wqm_fv02_measurement_id_seq TO harvest_write_group;


--
-- Name: measurements_hourly_wqm_fv01; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE measurements_hourly_wqm_fv01 TO harvest_read_group;
GRANT ALL ON TABLE measurements_hourly_wqm_fv01 TO harvest_write_group;


--
-- Name: measurements_hourly_wqm_fv01_measurement_id_seq; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON SEQUENCE measurements_hourly_wqm_fv01_measurement_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_hourly_wqm_fv01_measurement_id_seq TO harvest_write_group;


--
-- Name: measurements_mtw_water_monthly_fv01; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE measurements_mtw_water_monthly_fv01 TO harvest_read_group;
GRANT ALL ON TABLE measurements_mtw_water_monthly_fv01 TO harvest_write_group;


--
-- Name: measurements_mtw_water_monthly_fv01_measurement_id_seq; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON SEQUENCE measurements_mtw_water_monthly_fv01_measurement_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_mtw_water_monthly_fv01_measurement_id_seq TO harvest_write_group;


--
-- Name: measurements_mtw_weather_monthly_fv01; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE measurements_mtw_weather_monthly_fv01 TO harvest_read_group;
GRANT ALL ON TABLE measurements_mtw_weather_monthly_fv01 TO harvest_write_group;


--
-- Name: measurements_mtw_weather_monthly_fv01_measurement_id_seq; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON SEQUENCE measurements_mtw_weather_monthly_fv01_measurement_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_mtw_weather_monthly_fv01_measurement_id_seq TO harvest_write_group;


--
-- Name: srs_oc_ljco_wws_daily_acs_fv02_timeseries_map; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE srs_oc_ljco_wws_daily_acs_fv02_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_ljco_wws_daily_acs_fv02_timeseries_map TO harvest_write_group;


--
-- Name: srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_ljco_wws_daily_bb9_fv02_timeseries_map TO harvest_write_group;


--
-- Name: srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_map TO harvest_write_group;


--
-- Name: srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_ljco_wws_daily_hyperocr_fv02_timeseries_map TO harvest_write_group;


--
-- Name: visualisation_wms_daily_wqm_fv02; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE visualisation_wms_daily_wqm_fv02 TO harvest_read_group;
GRANT ALL ON TABLE visualisation_wms_daily_wqm_fv02 TO harvest_write_group;


--
-- Name: srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_ljco_wws_daily_wqm_fv02_timeseries_map TO harvest_write_group;


--
-- Name: srs_oc_ljco_wws_daily_all_products_fv02_timeseries_map; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE srs_oc_ljco_wws_daily_all_products_fv02_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_ljco_wws_daily_all_products_fv02_timeseries_map TO harvest_write_group;


--
-- Name: srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_data; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_data TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_ljco_wws_daily_ecotriplet_fv02_timeseries_data TO harvest_write_group;


--
-- Name: srs_oc_ljco_wws_daily_wqm_fv02_timeseries_data; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE srs_oc_ljco_wws_daily_wqm_fv02_timeseries_data TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_ljco_wws_daily_wqm_fv02_timeseries_data TO harvest_write_group;


--
-- Name: srs_oc_ljco_wws_hourly_wqm_fv01_timeseries_data; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE srs_oc_ljco_wws_hourly_wqm_fv01_timeseries_data TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_ljco_wws_hourly_wqm_fv01_timeseries_data TO harvest_write_group;


--
-- Name: visualisation_wms_hourly_wqm_fv01; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE visualisation_wms_hourly_wqm_fv01 TO harvest_read_group;
GRANT ALL ON TABLE visualisation_wms_hourly_wqm_fv01 TO harvest_write_group;


--
-- Name: srs_oc_ljco_wws_hourly_wqm_fv01_timeseries_map; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE srs_oc_ljco_wws_hourly_wqm_fv01_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_ljco_wws_hourly_wqm_fv01_timeseries_map TO harvest_write_group;


--
-- Name: visualisation_wms_mtw_monthly_fv01; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE visualisation_wms_mtw_monthly_fv01 TO harvest_read_group;
GRANT ALL ON TABLE visualisation_wms_mtw_monthly_fv01 TO harvest_write_group;


--
-- Name: srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_map; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_map TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_map TO harvest_write_group;


--
-- Name: srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_water_data; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_water_data TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_water_data TO harvest_write_group;


--
-- Name: srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_weather_data; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_weather_data TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_ljco_wws_mtw_monthly_fv01_timeseries_weather_data TO harvest_write_group;


--
-- Name: temporary_sub_select_wms_daily_wqm_fv02; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE temporary_sub_select_wms_daily_wqm_fv02 TO harvest_read_group;
GRANT ALL ON TABLE temporary_sub_select_wms_daily_wqm_fv02 TO harvest_write_group;


--
-- Name: temporary_sub_select_wms_hourly_wqm_fv01; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE temporary_sub_select_wms_hourly_wqm_fv01 TO harvest_read_group;
GRANT ALL ON TABLE temporary_sub_select_wms_hourly_wqm_fv01 TO harvest_write_group;


--
-- Name: temporary_sub_select_wms_mtw_monthly_fv01; Type: ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

GRANT SELECT ON TABLE temporary_sub_select_wms_mtw_monthly_fv01 TO harvest_read_group;
GRANT ALL ON TABLE temporary_sub_select_wms_mtw_monthly_fv01 TO harvest_write_group;


SET search_path = srs_oc_soop_rad, pg_catalog;

--
-- Name: attribute; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON TABLE attribute TO harvest_read_group;
GRANT ALL ON TABLE attribute TO harvest_write_group;


--
-- Name: databasechangelog; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;
GRANT ALL ON TABLE databasechangelog TO harvest_write_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;
GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;


--
-- Name: deployments; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON TABLE deployments TO harvest_read_group;
GRANT ALL ON TABLE deployments TO harvest_write_group;


--
-- Name: deployments_deploy_id_seq; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON SEQUENCE deployments_deploy_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE deployments_deploy_id_seq TO harvest_write_group;


--
-- Name: file; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON TABLE file TO harvest_read_group;
GRANT ALL ON TABLE file TO harvest_write_group;


--
-- Name: file_harvest; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON TABLE file_harvest TO harvest_read_group;
GRANT ALL ON TABLE file_harvest TO harvest_write_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;


--
-- Name: index_job; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON TABLE index_job TO harvest_read_group;
GRANT ALL ON TABLE index_job TO harvest_write_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;


--
-- Name: indexed_file; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON TABLE indexed_file TO harvest_read_group;
GRANT ALL ON TABLE indexed_file TO harvest_write_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;


--
-- Name: measurements; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON TABLE measurements TO harvest_read_group;
GRANT ALL ON TABLE measurements TO harvest_write_group;


--
-- Name: measurements_measurement_seq; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON SEQUENCE measurements_measurement_seq TO harvest_read_group;
GRANT ALL ON SEQUENCE measurements_measurement_seq TO harvest_write_group;


--
-- Name: visualisation_wms; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON TABLE visualisation_wms TO harvest_read_group;
GRANT ALL ON TABLE visualisation_wms TO harvest_write_group;


--
-- Name: srs_oc_soop_rad_trajectory_map; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON TABLE srs_oc_soop_rad_trajectory_map TO harvest_read_group;
GRANT ALL ON TABLE srs_oc_soop_rad_trajectory_map TO harvest_write_group;


--
-- Name: variable; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON TABLE variable TO harvest_read_group;
GRANT ALL ON TABLE variable TO harvest_write_group;


--
-- Name: vessel_names; Type: ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

GRANT SELECT ON TABLE vessel_names TO harvest_read_group;
GRANT ALL ON TABLE vessel_names TO harvest_write_group;


SET search_path = srs_sst, pg_catalog;

--
-- Name: databasechangelog; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE databasechangelog TO harvest_write_group;
GRANT SELECT ON TABLE databasechangelog TO harvest_read_group;


--
-- Name: databasechangeloglock; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE databasechangeloglock TO harvest_write_group;
GRANT SELECT ON TABLE databasechangeloglock TO harvest_read_group;


--
-- Name: file_harvest; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE file_harvest TO harvest_write_group;
GRANT SELECT ON TABLE file_harvest TO harvest_read_group;


--
-- Name: file_harvest_id_seq; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON SEQUENCE file_harvest_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE file_harvest_id_seq TO harvest_read_group;


--
-- Name: index_job; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE index_job TO harvest_write_group;
GRANT SELECT ON TABLE index_job TO harvest_read_group;


--
-- Name: index_job_id_seq; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON SEQUENCE index_job_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE index_job_id_seq TO harvest_read_group;


--
-- Name: indexed_file; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE indexed_file TO harvest_write_group;
GRANT SELECT ON TABLE indexed_file TO harvest_read_group;


--
-- Name: indexed_file_id_seq; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON SEQUENCE indexed_file_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE indexed_file_id_seq TO harvest_read_group;


--
-- Name: timeseries; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE timeseries TO harvest_write_group;
GRANT SELECT ON TABLE timeseries TO harvest_read_group;


--
-- Name: srs_sst_l3c_1d_day_n19_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3c_1d_day_n19_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3c_1d_day_n19_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3c_1d_ngt_n19_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3c_1d_ngt_n19_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3c_1d_ngt_n19_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_14d_day_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_14d_day_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_14d_day_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_14d_dn_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_14d_dn_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_14d_dn_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_14d_ngt_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_14d_ngt_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_14d_ngt_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_1d_day_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_1d_day_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_1d_day_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_1d_dn_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_1d_dn_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_1d_dn_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_1d_ngt_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_1d_ngt_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_1d_ngt_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_1d_southern_day_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_1d_southern_day_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_1d_southern_day_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_1d_southern_dn_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_1d_southern_dn_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_1d_southern_dn_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_1d_southern_ngt_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_1d_southern_ngt_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_1d_southern_ngt_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_1m_day_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_1m_day_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_1m_day_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_1m_dn_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_1m_dn_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_1m_dn_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_1m_ngt_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_1m_ngt_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_1m_ngt_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_1m_southern_day_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_1m_southern_day_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_1m_southern_day_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_1m_southern_dn_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_1m_southern_dn_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_1m_southern_dn_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_1m_southern_ngt_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_1m_southern_ngt_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_1m_southern_ngt_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_3d_day_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_3d_day_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_3d_day_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_3d_dn_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_3d_dn_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_3d_dn_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_3d_ngt_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_3d_ngt_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_3d_ngt_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_6d_day_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_6d_day_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_6d_day_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_6d_dn_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_6d_dn_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_6d_dn_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3s_6d_ngt_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3s_6d_ngt_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3s_6d_ngt_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3u_n19_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3u_n19_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3u_n19_gridded_url TO harvest_read_group;


--
-- Name: srs_sst_l3u_southern_n19_gridded_url; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON TABLE srs_sst_l3u_southern_n19_gridded_url TO harvest_write_group;
GRANT SELECT ON TABLE srs_sst_l3u_southern_n19_gridded_url TO harvest_read_group;


--
-- Name: timeseries_id_seq; Type: ACL; Schema: srs_sst; Owner: srs_sst
--

GRANT ALL ON SEQUENCE timeseries_id_seq TO harvest_write_group;
GRANT SELECT ON SEQUENCE timeseries_id_seq TO harvest_read_group;


SET search_path = aatams_biologging_penguin, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aatams_biologging_penguin; Owner: aatams_biologging_penguin
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_penguin IN SCHEMA aatams_biologging_penguin GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_penguin IN SCHEMA aatams_biologging_penguin GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aatams_biologging_penguin; Owner: aatams_biologging_penguin
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_penguin IN SCHEMA aatams_biologging_penguin GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_penguin IN SCHEMA aatams_biologging_penguin GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aatams_biologging_penguin; Owner: aatams_biologging_penguin
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_penguin IN SCHEMA aatams_biologging_penguin GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_penguin IN SCHEMA aatams_biologging_penguin GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aatams_biologging_shearwater, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aatams_biologging_shearwater; Owner: aatams_biologging_shearwater
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_shearwater IN SCHEMA aatams_biologging_shearwater GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_shearwater IN SCHEMA aatams_biologging_shearwater GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aatams_biologging_shearwater; Owner: aatams_biologging_shearwater
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_shearwater IN SCHEMA aatams_biologging_shearwater GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_shearwater IN SCHEMA aatams_biologging_shearwater GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aatams_biologging_shearwater; Owner: aatams_biologging_shearwater
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_shearwater IN SCHEMA aatams_biologging_shearwater GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_shearwater IN SCHEMA aatams_biologging_shearwater GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aatams_biologging_snowpetrel, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aatams_biologging_snowpetrel; Owner: aatams_biologging_snowpetrel
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_snowpetrel IN SCHEMA aatams_biologging_snowpetrel GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_snowpetrel IN SCHEMA aatams_biologging_snowpetrel GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aatams_biologging_snowpetrel; Owner: aatams_biologging_snowpetrel
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_snowpetrel IN SCHEMA aatams_biologging_snowpetrel GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_snowpetrel IN SCHEMA aatams_biologging_snowpetrel GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aatams_biologging_snowpetrel; Owner: aatams_biologging_snowpetrel
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_snowpetrel IN SCHEMA aatams_biologging_snowpetrel GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_biologging_snowpetrel IN SCHEMA aatams_biologging_snowpetrel GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aatams_sattag_dm, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aatams_sattag_dm; Owner: aatams_sattag_dm
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_dm IN SCHEMA aatams_sattag_dm GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_dm IN SCHEMA aatams_sattag_dm GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aatams_sattag_dm; Owner: aatams_sattag_dm
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_dm IN SCHEMA aatams_sattag_dm GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_dm IN SCHEMA aatams_sattag_dm GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aatams_sattag_dm; Owner: aatams_sattag_dm
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_dm IN SCHEMA aatams_sattag_dm GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_dm IN SCHEMA aatams_sattag_dm GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aatams_sattag_nrt, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aatams_sattag_nrt; Owner: aatams_sattag_nrt
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_nrt IN SCHEMA aatams_sattag_nrt GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_nrt IN SCHEMA aatams_sattag_nrt GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aatams_sattag_nrt; Owner: aatams_sattag_nrt
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_nrt IN SCHEMA aatams_sattag_nrt GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_nrt IN SCHEMA aatams_sattag_nrt GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aatams_sattag_nrt; Owner: aatams_sattag_nrt
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_nrt IN SCHEMA aatams_sattag_nrt GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_nrt IN SCHEMA aatams_sattag_nrt GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aatams_sattag_qc_ctd, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_qc_ctd IN SCHEMA aatams_sattag_qc_ctd GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_qc_ctd IN SCHEMA aatams_sattag_qc_ctd GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_qc_ctd IN SCHEMA aatams_sattag_qc_ctd GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_qc_ctd IN SCHEMA aatams_sattag_qc_ctd GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aatams_sattag_qc_ctd; Owner: aatams_sattag_qc_ctd
--

ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_qc_ctd IN SCHEMA aatams_sattag_qc_ctd GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aatams_sattag_qc_ctd IN SCHEMA aatams_sattag_qc_ctd GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = abos_currents, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: abos_currents; Owner: abos_currents
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_currents IN SCHEMA abos_currents GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_currents IN SCHEMA abos_currents GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: abos_currents; Owner: abos_currents
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_currents IN SCHEMA abos_currents GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_currents IN SCHEMA abos_currents GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: abos_currents; Owner: abos_currents
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_currents IN SCHEMA abos_currents GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_currents IN SCHEMA abos_currents GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = abos_sofs_fl, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: abos_sofs_fl; Owner: abos_sofs_fl
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_sofs_fl IN SCHEMA abos_sofs_fl GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_sofs_fl IN SCHEMA abos_sofs_fl GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: abos_sofs_fl; Owner: abos_sofs_fl
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_sofs_fl IN SCHEMA abos_sofs_fl GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_sofs_fl IN SCHEMA abos_sofs_fl GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: abos_sofs_fl; Owner: abos_sofs_fl
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_sofs_fl IN SCHEMA abos_sofs_fl GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_sofs_fl IN SCHEMA abos_sofs_fl GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = abos_sofs_sp, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: abos_sofs_sp; Owner: abos_sofs_sp
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_sofs_sp IN SCHEMA abos_sofs_sp GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_sofs_sp IN SCHEMA abos_sofs_sp GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: abos_sofs_sp; Owner: abos_sofs_sp
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_sofs_sp IN SCHEMA abos_sofs_sp GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_sofs_sp IN SCHEMA abos_sofs_sp GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: abos_sofs_sp; Owner: abos_sofs_sp
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_sofs_sp IN SCHEMA abos_sofs_sp GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_sofs_sp IN SCHEMA abos_sofs_sp GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = abos_sots, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: abos_sots; Owner: abos_sots
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_sots IN SCHEMA abos_sots GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_sots IN SCHEMA abos_sots GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: abos_sots; Owner: abos_sots
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_sots IN SCHEMA abos_sots GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_sots IN SCHEMA abos_sots GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: abos_sots; Owner: abos_sots
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_sots IN SCHEMA abos_sots GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_sots IN SCHEMA abos_sots GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = abos_ts, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: abos_ts; Owner: abos_ts
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_ts IN SCHEMA abos_ts GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_ts IN SCHEMA abos_ts GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: abos_ts; Owner: abos_ts
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_ts IN SCHEMA abos_ts GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_ts IN SCHEMA abos_ts GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: abos_ts; Owner: abos_ts
--

ALTER DEFAULT PRIVILEGES FOR ROLE abos_ts IN SCHEMA abos_ts GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE abos_ts IN SCHEMA abos_ts GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = acorn_hourly_avg_nonqc, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: acorn_hourly_avg_nonqc; Owner: acorn_hourly_avg_nonqc
--

ALTER DEFAULT PRIVILEGES FOR ROLE acorn_hourly_avg_nonqc IN SCHEMA acorn_hourly_avg_nonqc GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE acorn_hourly_avg_nonqc IN SCHEMA acorn_hourly_avg_nonqc GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: acorn_hourly_avg_nonqc; Owner: acorn_hourly_avg_nonqc
--

ALTER DEFAULT PRIVILEGES FOR ROLE acorn_hourly_avg_nonqc IN SCHEMA acorn_hourly_avg_nonqc GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE acorn_hourly_avg_nonqc IN SCHEMA acorn_hourly_avg_nonqc GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: acorn_hourly_avg_nonqc; Owner: acorn_hourly_avg_nonqc
--

ALTER DEFAULT PRIVILEGES FOR ROLE acorn_hourly_avg_nonqc IN SCHEMA acorn_hourly_avg_nonqc GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE acorn_hourly_avg_nonqc IN SCHEMA acorn_hourly_avg_nonqc GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = acorn_hourly_avg_qc, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: acorn_hourly_avg_qc; Owner: acorn_hourly_avg_qc
--

ALTER DEFAULT PRIVILEGES FOR ROLE acorn_hourly_avg_qc IN SCHEMA acorn_hourly_avg_qc GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE acorn_hourly_avg_qc IN SCHEMA acorn_hourly_avg_qc GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: acorn_hourly_avg_qc; Owner: acorn_hourly_avg_qc
--

ALTER DEFAULT PRIVILEGES FOR ROLE acorn_hourly_avg_qc IN SCHEMA acorn_hourly_avg_qc GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE acorn_hourly_avg_qc IN SCHEMA acorn_hourly_avg_qc GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: acorn_hourly_avg_qc; Owner: acorn_hourly_avg_qc
--

ALTER DEFAULT PRIVILEGES FOR ROLE acorn_hourly_avg_qc IN SCHEMA acorn_hourly_avg_qc GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE acorn_hourly_avg_qc IN SCHEMA acorn_hourly_avg_qc GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = acorn_radial_nonqc, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: acorn_radial_nonqc; Owner: acorn_radial_nonqc
--

ALTER DEFAULT PRIVILEGES FOR ROLE acorn_radial_nonqc IN SCHEMA acorn_radial_nonqc GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE acorn_radial_nonqc IN SCHEMA acorn_radial_nonqc GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: acorn_radial_nonqc; Owner: acorn_radial_nonqc
--

ALTER DEFAULT PRIVILEGES FOR ROLE acorn_radial_nonqc IN SCHEMA acorn_radial_nonqc GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE acorn_radial_nonqc IN SCHEMA acorn_radial_nonqc GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: acorn_radial_nonqc; Owner: acorn_radial_nonqc
--

ALTER DEFAULT PRIVILEGES FOR ROLE acorn_radial_nonqc IN SCHEMA acorn_radial_nonqc GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE acorn_radial_nonqc IN SCHEMA acorn_radial_nonqc GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = acorn_radial_qc, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: acorn_radial_qc; Owner: acorn_radial_qc
--

ALTER DEFAULT PRIVILEGES FOR ROLE acorn_radial_qc IN SCHEMA acorn_radial_qc GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE acorn_radial_qc IN SCHEMA acorn_radial_qc GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: acorn_radial_qc; Owner: acorn_radial_qc
--

ALTER DEFAULT PRIVILEGES FOR ROLE acorn_radial_qc IN SCHEMA acorn_radial_qc GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE acorn_radial_qc IN SCHEMA acorn_radial_qc GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: acorn_radial_qc; Owner: acorn_radial_qc
--

ALTER DEFAULT PRIVILEGES FOR ROLE acorn_radial_qc IN SCHEMA acorn_radial_qc GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE acorn_radial_qc IN SCHEMA acorn_radial_qc GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anfog_dm, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anfog_dm; Owner: anfog_dm
--

ALTER DEFAULT PRIVILEGES FOR ROLE anfog_dm IN SCHEMA anfog_dm GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anfog_dm IN SCHEMA anfog_dm GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anfog_dm; Owner: anfog_dm
--

ALTER DEFAULT PRIVILEGES FOR ROLE anfog_dm IN SCHEMA anfog_dm GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anfog_dm IN SCHEMA anfog_dm GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anfog_dm; Owner: anfog_dm
--

ALTER DEFAULT PRIVILEGES FOR ROLE anfog_dm IN SCHEMA anfog_dm GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anfog_dm IN SCHEMA anfog_dm GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anfog_rt, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anfog_rt; Owner: anfog_rt
--

ALTER DEFAULT PRIVILEGES FOR ROLE anfog_rt IN SCHEMA anfog_rt GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anfog_rt IN SCHEMA anfog_rt GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anfog_rt; Owner: anfog_rt
--

ALTER DEFAULT PRIVILEGES FOR ROLE anfog_rt IN SCHEMA anfog_rt GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anfog_rt IN SCHEMA anfog_rt GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anfog_rt; Owner: anfog_rt
--

ALTER DEFAULT PRIVILEGES FOR ROLE anfog_rt IN SCHEMA anfog_rt GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anfog_rt IN SCHEMA anfog_rt GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_acidification_nrt, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acidification_nrt IN SCHEMA anmn_acidification_nrt GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acidification_nrt IN SCHEMA anmn_acidification_nrt GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acidification_nrt IN SCHEMA anmn_acidification_nrt GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acidification_nrt IN SCHEMA anmn_acidification_nrt GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_acidification_nrt; Owner: anmn_acidification_nrt
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acidification_nrt IN SCHEMA anmn_acidification_nrt GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acidification_nrt IN SCHEMA anmn_acidification_nrt GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_acoustics, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_acoustics; Owner: anmn_acoustics
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acoustics IN SCHEMA anmn_acoustics GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acoustics IN SCHEMA anmn_acoustics GRANT ALL ON SEQUENCES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acoustics IN SCHEMA anmn_acoustics GRANT SELECT ON SEQUENCES  TO harvest_anmn_acoustics_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acoustics IN SCHEMA anmn_acoustics GRANT ALL ON SEQUENCES  TO harvest_anmn_acoustics_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_acoustics; Owner: anmn_acoustics
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acoustics IN SCHEMA anmn_acoustics GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acoustics IN SCHEMA anmn_acoustics GRANT ALL ON FUNCTIONS  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acoustics IN SCHEMA anmn_acoustics GRANT ALL ON FUNCTIONS  TO harvest_anmn_acoustics_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acoustics IN SCHEMA anmn_acoustics GRANT ALL ON FUNCTIONS  TO harvest_anmn_acoustics_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_acoustics; Owner: anmn_acoustics
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acoustics IN SCHEMA anmn_acoustics GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acoustics IN SCHEMA anmn_acoustics GRANT ALL ON TABLES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acoustics IN SCHEMA anmn_acoustics GRANT SELECT ON TABLES  TO harvest_anmn_acoustics_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_acoustics IN SCHEMA anmn_acoustics GRANT ALL ON TABLES  TO harvest_anmn_acoustics_write_group;


SET search_path = anmn_am_dm, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_am_dm IN SCHEMA anmn_am_dm GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_am_dm IN SCHEMA anmn_am_dm GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_am_dm IN SCHEMA anmn_am_dm GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_am_dm IN SCHEMA anmn_am_dm GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_am_dm; Owner: anmn_am_dm
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_am_dm IN SCHEMA anmn_am_dm GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_am_dm IN SCHEMA anmn_am_dm GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_burst_avg, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_burst_avg IN SCHEMA anmn_burst_avg GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_burst_avg IN SCHEMA anmn_burst_avg GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_burst_avg IN SCHEMA anmn_burst_avg GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_burst_avg IN SCHEMA anmn_burst_avg GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_burst_avg; Owner: anmn_burst_avg
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_burst_avg IN SCHEMA anmn_burst_avg GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_burst_avg IN SCHEMA anmn_burst_avg GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_metadata, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_metadata IN SCHEMA anmn_metadata GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_metadata IN SCHEMA anmn_metadata GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_metadata IN SCHEMA anmn_metadata GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_metadata IN SCHEMA anmn_metadata GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_metadata; Owner: anmn_metadata
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_metadata IN SCHEMA anmn_metadata GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_metadata IN SCHEMA anmn_metadata GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_mhlwave, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_mhlwave; Owner: anmn_mhlwave
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_mhlwave IN SCHEMA anmn_mhlwave GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_mhlwave IN SCHEMA anmn_mhlwave GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_mhlwave; Owner: anmn_mhlwave
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_mhlwave IN SCHEMA anmn_mhlwave GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_mhlwave IN SCHEMA anmn_mhlwave GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_mhlwave; Owner: anmn_mhlwave
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_mhlwave IN SCHEMA anmn_mhlwave GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_mhlwave IN SCHEMA anmn_mhlwave GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_nrs_bgc, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_bgc IN SCHEMA anmn_nrs_bgc GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_bgc IN SCHEMA anmn_nrs_bgc GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_bgc IN SCHEMA anmn_nrs_bgc GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_bgc IN SCHEMA anmn_nrs_bgc GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_nrs_bgc; Owner: anmn_nrs_bgc
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_bgc IN SCHEMA anmn_nrs_bgc GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_bgc IN SCHEMA anmn_nrs_bgc GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_nrs_ctd_profiles, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_ctd_profiles IN SCHEMA anmn_nrs_ctd_profiles GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_ctd_profiles IN SCHEMA anmn_nrs_ctd_profiles GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_ctd_profiles IN SCHEMA anmn_nrs_ctd_profiles GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_ctd_profiles IN SCHEMA anmn_nrs_ctd_profiles GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_nrs_ctd_profiles; Owner: anmn_nrs_ctd_profiles
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_ctd_profiles IN SCHEMA anmn_nrs_ctd_profiles GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_ctd_profiles IN SCHEMA anmn_nrs_ctd_profiles GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_nrs_dar_yon, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_dar_yon IN SCHEMA anmn_nrs_dar_yon GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_dar_yon IN SCHEMA anmn_nrs_dar_yon GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_dar_yon IN SCHEMA anmn_nrs_dar_yon GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_dar_yon IN SCHEMA anmn_nrs_dar_yon GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_nrs_dar_yon; Owner: anmn_nrs_dar_yon
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_dar_yon IN SCHEMA anmn_nrs_dar_yon GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_dar_yon IN SCHEMA anmn_nrs_dar_yon GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_nrs_long_ts, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_nrs_long_ts; Owner: anmn_nrs_long_ts
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_long_ts IN SCHEMA anmn_nrs_long_ts GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_long_ts IN SCHEMA anmn_nrs_long_ts GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_nrs_long_ts; Owner: anmn_nrs_long_ts
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_long_ts IN SCHEMA anmn_nrs_long_ts GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_long_ts IN SCHEMA anmn_nrs_long_ts GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_nrs_long_ts; Owner: anmn_nrs_long_ts
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_long_ts IN SCHEMA anmn_nrs_long_ts GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_long_ts IN SCHEMA anmn_nrs_long_ts GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_nrs_rt_bio, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_bio IN SCHEMA anmn_nrs_rt_bio GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_bio IN SCHEMA anmn_nrs_rt_bio GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_bio IN SCHEMA anmn_nrs_rt_bio GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_bio IN SCHEMA anmn_nrs_rt_bio GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_nrs_rt_bio; Owner: anmn_nrs_rt_bio
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_bio IN SCHEMA anmn_nrs_rt_bio GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_bio IN SCHEMA anmn_nrs_rt_bio GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_nrs_rt_meteo, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_meteo IN SCHEMA anmn_nrs_rt_meteo GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_meteo IN SCHEMA anmn_nrs_rt_meteo GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_meteo IN SCHEMA anmn_nrs_rt_meteo GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_meteo IN SCHEMA anmn_nrs_rt_meteo GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_nrs_rt_meteo; Owner: anmn_nrs_rt_meteo
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_meteo IN SCHEMA anmn_nrs_rt_meteo GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_meteo IN SCHEMA anmn_nrs_rt_meteo GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_nrs_rt_wave, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_wave IN SCHEMA anmn_nrs_rt_wave GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_wave IN SCHEMA anmn_nrs_rt_wave GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_wave IN SCHEMA anmn_nrs_rt_wave GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_wave IN SCHEMA anmn_nrs_rt_wave GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_nrs_rt_wave; Owner: anmn_nrs_rt_wave
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_wave IN SCHEMA anmn_nrs_rt_wave GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_nrs_rt_wave IN SCHEMA anmn_nrs_rt_wave GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_t_regridded, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_t_regridded; Owner: anmn_t_regridded
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_t_regridded IN SCHEMA anmn_t_regridded GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_t_regridded IN SCHEMA anmn_t_regridded GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_t_regridded; Owner: anmn_t_regridded
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_t_regridded IN SCHEMA anmn_t_regridded GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_t_regridded IN SCHEMA anmn_t_regridded GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_t_regridded; Owner: anmn_t_regridded
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_t_regridded IN SCHEMA anmn_t_regridded GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_t_regridded IN SCHEMA anmn_t_regridded GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_ts, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_ts; Owner: anmn_ts
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_ts IN SCHEMA anmn_ts GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_ts IN SCHEMA anmn_ts GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_ts; Owner: anmn_ts
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_ts IN SCHEMA anmn_ts GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_ts IN SCHEMA anmn_ts GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_ts; Owner: anmn_ts
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_ts IN SCHEMA anmn_ts GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_ts IN SCHEMA anmn_ts GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_velocity, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_velocity; Owner: anmn_velocity
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_velocity IN SCHEMA anmn_velocity GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_velocity IN SCHEMA anmn_velocity GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_velocity; Owner: anmn_velocity
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_velocity IN SCHEMA anmn_velocity GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_velocity IN SCHEMA anmn_velocity GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_velocity; Owner: anmn_velocity
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_velocity IN SCHEMA anmn_velocity GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_velocity IN SCHEMA anmn_velocity GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = anmn_wave, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: anmn_wave; Owner: anmn_wave
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_wave IN SCHEMA anmn_wave GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_wave IN SCHEMA anmn_wave GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: anmn_wave; Owner: anmn_wave
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_wave IN SCHEMA anmn_wave GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_wave IN SCHEMA anmn_wave GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: anmn_wave; Owner: anmn_wave
--

ALTER DEFAULT PRIVILEGES FOR ROLE anmn_wave IN SCHEMA anmn_wave GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE anmn_wave IN SCHEMA anmn_wave GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aodn_aims_ctd, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aodn_aims_ctd; Owner: aodn_aims_ctd
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_aims_ctd IN SCHEMA aodn_aims_ctd GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_aims_ctd IN SCHEMA aodn_aims_ctd GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aodn_aims_ctd; Owner: aodn_aims_ctd
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_aims_ctd IN SCHEMA aodn_aims_ctd GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_aims_ctd IN SCHEMA aodn_aims_ctd GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aodn_aims_ctd; Owner: aodn_aims_ctd
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_aims_ctd IN SCHEMA aodn_aims_ctd GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_aims_ctd IN SCHEMA aodn_aims_ctd GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aodn_coastal_watch, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aodn_coastal_watch; Owner: legacy
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA aodn_coastal_watch GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA aodn_coastal_watch GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aodn_coastal_watch; Owner: legacy
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA aodn_coastal_watch GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA aodn_coastal_watch GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aodn_coastal_watch; Owner: legacy
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA aodn_coastal_watch GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA aodn_coastal_watch GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aodn_csiro_cmar, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aodn_csiro_cmar; Owner: aodn_csiro_cmar
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_csiro_cmar IN SCHEMA aodn_csiro_cmar GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_csiro_cmar IN SCHEMA aodn_csiro_cmar GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aodn_csiro_cmar; Owner: aodn_csiro_cmar
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_csiro_cmar IN SCHEMA aodn_csiro_cmar GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_csiro_cmar IN SCHEMA aodn_csiro_cmar GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aodn_csiro_cmar; Owner: aodn_csiro_cmar
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_csiro_cmar IN SCHEMA aodn_csiro_cmar GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_csiro_cmar IN SCHEMA aodn_csiro_cmar GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aodn_dart, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aodn_dart; Owner: aodn_dart
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_dart IN SCHEMA aodn_dart GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_dart IN SCHEMA aodn_dart GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aodn_dart; Owner: aodn_dart
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_dart IN SCHEMA aodn_dart GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_dart IN SCHEMA aodn_dart GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aodn_dart; Owner: aodn_dart
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_dart IN SCHEMA aodn_dart GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_dart IN SCHEMA aodn_dart GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aodn_dsto, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aodn_dsto; Owner: aodn_dsto
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_dsto IN SCHEMA aodn_dsto GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_dsto IN SCHEMA aodn_dsto GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aodn_dsto; Owner: aodn_dsto
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_dsto IN SCHEMA aodn_dsto GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_dsto IN SCHEMA aodn_dsto GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aodn_dsto; Owner: aodn_dsto
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_dsto IN SCHEMA aodn_dsto GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_dsto IN SCHEMA aodn_dsto GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aodn_imas_fluorometry, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_imas_fluorometry IN SCHEMA aodn_imas_fluorometry GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_imas_fluorometry IN SCHEMA aodn_imas_fluorometry GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_imas_fluorometry IN SCHEMA aodn_imas_fluorometry GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_imas_fluorometry IN SCHEMA aodn_imas_fluorometry GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aodn_imas_fluorometry; Owner: aodn_imas_fluorometry
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_imas_fluorometry IN SCHEMA aodn_imas_fluorometry GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_imas_fluorometry IN SCHEMA aodn_imas_fluorometry GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aodn_mhl_sst, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_mhl_sst IN SCHEMA aodn_mhl_sst GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_mhl_sst IN SCHEMA aodn_mhl_sst GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_mhl_sst IN SCHEMA aodn_mhl_sst GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_mhl_sst IN SCHEMA aodn_mhl_sst GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aodn_mhl_sst; Owner: aodn_mhl_sst
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_mhl_sst IN SCHEMA aodn_mhl_sst GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_mhl_sst IN SCHEMA aodn_mhl_sst GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aodn_nsw_oeh, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nsw_oeh IN SCHEMA aodn_nsw_oeh GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nsw_oeh IN SCHEMA aodn_nsw_oeh GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nsw_oeh IN SCHEMA aodn_nsw_oeh GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nsw_oeh IN SCHEMA aodn_nsw_oeh GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aodn_nsw_oeh; Owner: aodn_nsw_oeh
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nsw_oeh IN SCHEMA aodn_nsw_oeh GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nsw_oeh IN SCHEMA aodn_nsw_oeh GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aodn_nt_sattag_hawksbill, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aodn_nt_sattag_hawksbill; Owner: aodn_nt_sattag_hawksbill
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nt_sattag_hawksbill IN SCHEMA aodn_nt_sattag_hawksbill GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nt_sattag_hawksbill IN SCHEMA aodn_nt_sattag_hawksbill GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aodn_nt_sattag_hawksbill; Owner: aodn_nt_sattag_hawksbill
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nt_sattag_hawksbill IN SCHEMA aodn_nt_sattag_hawksbill GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nt_sattag_hawksbill IN SCHEMA aodn_nt_sattag_hawksbill GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aodn_nt_sattag_hawksbill; Owner: aodn_nt_sattag_hawksbill
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nt_sattag_hawksbill IN SCHEMA aodn_nt_sattag_hawksbill GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nt_sattag_hawksbill IN SCHEMA aodn_nt_sattag_hawksbill GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aodn_nt_sattag_oliveridley, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aodn_nt_sattag_oliveridley; Owner: aodn_nt_sattag_oliveridley
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nt_sattag_oliveridley IN SCHEMA aodn_nt_sattag_oliveridley GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nt_sattag_oliveridley IN SCHEMA aodn_nt_sattag_oliveridley GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aodn_nt_sattag_oliveridley; Owner: aodn_nt_sattag_oliveridley
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nt_sattag_oliveridley IN SCHEMA aodn_nt_sattag_oliveridley GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nt_sattag_oliveridley IN SCHEMA aodn_nt_sattag_oliveridley GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aodn_nt_sattag_oliveridley; Owner: aodn_nt_sattag_oliveridley
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nt_sattag_oliveridley IN SCHEMA aodn_nt_sattag_oliveridley GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_nt_sattag_oliveridley IN SCHEMA aodn_nt_sattag_oliveridley GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aodn_ran_ctd, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_ran_ctd IN SCHEMA aodn_ran_ctd GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_ran_ctd IN SCHEMA aodn_ran_ctd GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_ran_ctd IN SCHEMA aodn_ran_ctd GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_ran_ctd IN SCHEMA aodn_ran_ctd GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aodn_ran_ctd; Owner: aodn_ran_ctd
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_ran_ctd IN SCHEMA aodn_ran_ctd GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_ran_ctd IN SCHEMA aodn_ran_ctd GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aodn_wamsi_sediment, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_wamsi_sediment IN SCHEMA aodn_wamsi_sediment GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_wamsi_sediment IN SCHEMA aodn_wamsi_sediment GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_wamsi_sediment IN SCHEMA aodn_wamsi_sediment GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_wamsi_sediment IN SCHEMA aodn_wamsi_sediment GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aodn_wamsi_sediment; Owner: aodn_wamsi_sediment
--

ALTER DEFAULT PRIVILEGES FOR ROLE aodn_wamsi_sediment IN SCHEMA aodn_wamsi_sediment GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aodn_wamsi_sediment IN SCHEMA aodn_wamsi_sediment GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = argo, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: argo; Owner: argo
--

ALTER DEFAULT PRIVILEGES FOR ROLE argo IN SCHEMA argo GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE argo IN SCHEMA argo GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: argo; Owner: argo
--

ALTER DEFAULT PRIVILEGES FOR ROLE argo IN SCHEMA argo GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE argo IN SCHEMA argo GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: argo; Owner: argo
--

ALTER DEFAULT PRIVILEGES FOR ROLE argo IN SCHEMA argo GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE argo IN SCHEMA argo GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aus_phyto_db, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aus_phyto_db; Owner: aus_phyto_db
--

ALTER DEFAULT PRIVILEGES FOR ROLE aus_phyto_db IN SCHEMA aus_phyto_db GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aus_phyto_db IN SCHEMA aus_phyto_db GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aus_phyto_db; Owner: aus_phyto_db
--

ALTER DEFAULT PRIVILEGES FOR ROLE aus_phyto_db IN SCHEMA aus_phyto_db GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aus_phyto_db IN SCHEMA aus_phyto_db GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aus_phyto_db; Owner: aus_phyto_db
--

ALTER DEFAULT PRIVILEGES FOR ROLE aus_phyto_db IN SCHEMA aus_phyto_db GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aus_phyto_db IN SCHEMA aus_phyto_db GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = aus_phyto_db_ongoing, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

ALTER DEFAULT PRIVILEGES FOR ROLE aus_phyto_db_ongoing IN SCHEMA aus_phyto_db_ongoing GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aus_phyto_db_ongoing IN SCHEMA aus_phyto_db_ongoing GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

ALTER DEFAULT PRIVILEGES FOR ROLE aus_phyto_db_ongoing IN SCHEMA aus_phyto_db_ongoing GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aus_phyto_db_ongoing IN SCHEMA aus_phyto_db_ongoing GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: aus_phyto_db_ongoing; Owner: aus_phyto_db_ongoing
--

ALTER DEFAULT PRIVILEGES FOR ROLE aus_phyto_db_ongoing IN SCHEMA aus_phyto_db_ongoing GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE aus_phyto_db_ongoing IN SCHEMA aus_phyto_db_ongoing GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = auv, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auv; Owner: auv
--

ALTER DEFAULT PRIVILEGES FOR ROLE auv IN SCHEMA auv GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE auv IN SCHEMA auv GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auv; Owner: auv
--

ALTER DEFAULT PRIVILEGES FOR ROLE auv IN SCHEMA auv GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE auv IN SCHEMA auv GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auv; Owner: auv
--

ALTER DEFAULT PRIVILEGES FOR ROLE auv IN SCHEMA auv GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE auv IN SCHEMA auv GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = auv_viewer_track, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER DEFAULT PRIVILEGES FOR ROLE auv_viewer_track IN SCHEMA auv_viewer_track GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE auv_viewer_track IN SCHEMA auv_viewer_track GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER DEFAULT PRIVILEGES FOR ROLE auv_viewer_track IN SCHEMA auv_viewer_track GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE auv_viewer_track IN SCHEMA auv_viewer_track GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auv_viewer_track; Owner: auv_viewer_track
--

ALTER DEFAULT PRIVILEGES FOR ROLE auv_viewer_track IN SCHEMA auv_viewer_track GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE auv_viewer_track IN SCHEMA auv_viewer_track GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = contr_vocab_db, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: contr_vocab_db; Owner: contr_vocab_db
--

ALTER DEFAULT PRIVILEGES FOR ROLE contr_vocab_db IN SCHEMA contr_vocab_db GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE contr_vocab_db IN SCHEMA contr_vocab_db GRANT ALL ON SEQUENCES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE contr_vocab_db IN SCHEMA contr_vocab_db GRANT ALL ON SEQUENCES  TO harvest_contr_vocab_db_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: contr_vocab_db; Owner: contr_vocab_db
--

ALTER DEFAULT PRIVILEGES FOR ROLE contr_vocab_db IN SCHEMA contr_vocab_db GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE contr_vocab_db IN SCHEMA contr_vocab_db GRANT ALL ON FUNCTIONS  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE contr_vocab_db IN SCHEMA contr_vocab_db GRANT ALL ON FUNCTIONS  TO harvest_contr_vocab_db_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: contr_vocab_db; Owner: contr_vocab_db
--

ALTER DEFAULT PRIVILEGES FOR ROLE contr_vocab_db IN SCHEMA contr_vocab_db GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE contr_vocab_db IN SCHEMA contr_vocab_db GRANT ALL ON TABLES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE contr_vocab_db IN SCHEMA contr_vocab_db GRANT ALL ON TABLES  TO harvest_contr_vocab_db_write_group;


SET search_path = dw_aatams_acoustic, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER DEFAULT PRIVILEGES FOR ROLE dw_aatams_acoustic IN SCHEMA dw_aatams_acoustic GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE dw_aatams_acoustic IN SCHEMA dw_aatams_acoustic GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER DEFAULT PRIVILEGES FOR ROLE dw_aatams_acoustic IN SCHEMA dw_aatams_acoustic GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE dw_aatams_acoustic IN SCHEMA dw_aatams_acoustic GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: dw_aatams_acoustic; Owner: dw_aatams_acoustic
--

ALTER DEFAULT PRIVILEGES FOR ROLE dw_aatams_acoustic IN SCHEMA dw_aatams_acoustic GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE dw_aatams_acoustic IN SCHEMA dw_aatams_acoustic GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = dw_abos, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: dw_abos; Owner: dw_abos
--

ALTER DEFAULT PRIVILEGES FOR ROLE dw_abos IN SCHEMA dw_abos GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE dw_abos IN SCHEMA dw_abos GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: dw_abos; Owner: dw_abos
--

ALTER DEFAULT PRIVILEGES FOR ROLE dw_abos IN SCHEMA dw_abos GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE dw_abos IN SCHEMA dw_abos GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: dw_abos; Owner: dw_abos
--

ALTER DEFAULT PRIVILEGES FOR ROLE dw_abos IN SCHEMA dw_abos GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE dw_abos IN SCHEMA dw_abos GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = faimms, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: faimms; Owner: faimms
--

ALTER DEFAULT PRIVILEGES FOR ROLE faimms IN SCHEMA faimms GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE faimms IN SCHEMA faimms GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: faimms; Owner: faimms
--

ALTER DEFAULT PRIVILEGES FOR ROLE faimms IN SCHEMA faimms GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE faimms IN SCHEMA faimms GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: faimms; Owner: faimms
--

ALTER DEFAULT PRIVILEGES FOR ROLE faimms IN SCHEMA faimms GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE faimms IN SCHEMA faimms GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = future_reef_map, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: future_reef_map; Owner: future_reef_map
--

ALTER DEFAULT PRIVILEGES FOR ROLE future_reef_map IN SCHEMA future_reef_map GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE future_reef_map IN SCHEMA future_reef_map GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: future_reef_map; Owner: future_reef_map
--

ALTER DEFAULT PRIVILEGES FOR ROLE future_reef_map IN SCHEMA future_reef_map GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE future_reef_map IN SCHEMA future_reef_map GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: future_reef_map; Owner: future_reef_map
--

ALTER DEFAULT PRIVILEGES FOR ROLE future_reef_map IN SCHEMA future_reef_map GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE future_reef_map IN SCHEMA future_reef_map GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = generic_timestep, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: generic_timestep; Owner: generic_timestep
--

ALTER DEFAULT PRIVILEGES FOR ROLE generic_timestep IN SCHEMA generic_timestep GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE generic_timestep IN SCHEMA generic_timestep GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: generic_timestep; Owner: generic_timestep
--

ALTER DEFAULT PRIVILEGES FOR ROLE generic_timestep IN SCHEMA generic_timestep GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE generic_timestep IN SCHEMA generic_timestep GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: generic_timestep; Owner: generic_timestep
--

ALTER DEFAULT PRIVILEGES FOR ROLE generic_timestep IN SCHEMA generic_timestep GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE generic_timestep IN SCHEMA generic_timestep GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = gsla_dm00, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: gsla_dm00; Owner: gsla_dm00
--

ALTER DEFAULT PRIVILEGES FOR ROLE gsla_dm00 IN SCHEMA gsla_dm00 GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE gsla_dm00 IN SCHEMA gsla_dm00 GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: gsla_dm00; Owner: gsla_dm00
--

ALTER DEFAULT PRIVILEGES FOR ROLE gsla_dm00 IN SCHEMA gsla_dm00 GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE gsla_dm00 IN SCHEMA gsla_dm00 GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: gsla_dm00; Owner: gsla_dm00
--

ALTER DEFAULT PRIVILEGES FOR ROLE gsla_dm00 IN SCHEMA gsla_dm00 GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE gsla_dm00 IN SCHEMA gsla_dm00 GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = gsla_nrt00, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: gsla_nrt00; Owner: gsla_nrt00
--

ALTER DEFAULT PRIVILEGES FOR ROLE gsla_nrt00 IN SCHEMA gsla_nrt00 GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE gsla_nrt00 IN SCHEMA gsla_nrt00 GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: gsla_nrt00; Owner: gsla_nrt00
--

ALTER DEFAULT PRIVILEGES FOR ROLE gsla_nrt00 IN SCHEMA gsla_nrt00 GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE gsla_nrt00 IN SCHEMA gsla_nrt00 GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: gsla_nrt00; Owner: gsla_nrt00
--

ALTER DEFAULT PRIVILEGES FOR ROLE gsla_nrt00 IN SCHEMA gsla_nrt00 GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE gsla_nrt00 IN SCHEMA gsla_nrt00 GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = legacy_baselayer, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: legacy_baselayer; Owner: legacy
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_baselayer GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_baselayer GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: legacy_baselayer; Owner: legacy
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_baselayer GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_baselayer GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: legacy_baselayer; Owner: legacy
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_baselayer GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_baselayer GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = legacy_bathy, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: legacy_bathy; Owner: legacy
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bathy GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bathy GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: legacy_bathy; Owner: legacy
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bathy GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bathy GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: legacy_bathy; Owner: legacy
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bathy GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bathy GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = legacy_bluenet_aodn, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: legacy_bluenet_aodn; Owner: legacy
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bluenet_aodn GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bluenet_aodn GRANT ALL ON SEQUENCES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bluenet_aodn GRANT ALL ON SEQUENCES  TO harvest_legacy_bluenet_aodn_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: legacy_bluenet_aodn; Owner: legacy
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bluenet_aodn GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bluenet_aodn GRANT ALL ON FUNCTIONS  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bluenet_aodn GRANT ALL ON FUNCTIONS  TO harvest_legacy_bluenet_aodn_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: legacy_bluenet_aodn; Owner: legacy
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bluenet_aodn GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bluenet_aodn GRANT ALL ON TABLES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy IN SCHEMA legacy_bluenet_aodn GRANT ALL ON TABLES  TO harvest_legacy_bluenet_aodn_write_group;


SET search_path = legacy_cpr, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: legacy_cpr; Owner: legacy_cpr
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy_cpr IN SCHEMA legacy_cpr GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy_cpr IN SCHEMA legacy_cpr GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: legacy_cpr; Owner: legacy_cpr
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy_cpr IN SCHEMA legacy_cpr GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy_cpr IN SCHEMA legacy_cpr GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: legacy_cpr; Owner: legacy_cpr
--

ALTER DEFAULT PRIVILEGES FOR ROLE legacy_cpr IN SCHEMA legacy_cpr GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE legacy_cpr IN SCHEMA legacy_cpr GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = marvl3, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: marvl3; Owner: marvl3
--

ALTER DEFAULT PRIVILEGES FOR ROLE marvl3 IN SCHEMA marvl3 GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE marvl3 IN SCHEMA marvl3 GRANT ALL ON SEQUENCES  TO marvl3;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: marvl3; Owner: marvl3
--

ALTER DEFAULT PRIVILEGES FOR ROLE marvl3 IN SCHEMA marvl3 GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE marvl3 IN SCHEMA marvl3 GRANT ALL ON FUNCTIONS  TO marvl3;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: marvl3; Owner: marvl3
--

ALTER DEFAULT PRIVILEGES FOR ROLE marvl3 IN SCHEMA marvl3 GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE marvl3 IN SCHEMA marvl3 GRANT ALL ON TABLES  TO marvl3;


SET search_path = noaa_drifters, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: noaa_drifters; Owner: noaa_drifters
--

ALTER DEFAULT PRIVILEGES FOR ROLE noaa_drifters IN SCHEMA noaa_drifters GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE noaa_drifters IN SCHEMA noaa_drifters GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: noaa_drifters; Owner: noaa_drifters
--

ALTER DEFAULT PRIVILEGES FOR ROLE noaa_drifters IN SCHEMA noaa_drifters GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE noaa_drifters IN SCHEMA noaa_drifters GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: noaa_drifters; Owner: noaa_drifters
--

ALTER DEFAULT PRIVILEGES FOR ROLE noaa_drifters IN SCHEMA noaa_drifters GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE noaa_drifters IN SCHEMA noaa_drifters GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = parameters_mapping, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: parameters_mapping; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA parameters_mapping GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA parameters_mapping GRANT ALL ON SEQUENCES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA parameters_mapping GRANT ALL ON SEQUENCES  TO harvest_parameters_mapping_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: parameters_mapping; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA parameters_mapping GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA parameters_mapping GRANT ALL ON FUNCTIONS  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA parameters_mapping GRANT ALL ON FUNCTIONS  TO harvest_parameters_mapping_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: parameters_mapping; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA parameters_mapping GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA parameters_mapping GRANT ALL ON TABLES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA parameters_mapping GRANT ALL ON TABLES  TO harvest_parameters_mapping_write_group;


SET search_path = public, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT ON SEQUENCES  TO PUBLIC;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO aatams_sattag_nrt;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anmn_metadata;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO argo;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO dw_aatams_acoustic;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO soop;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO aodn_dart;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO aatams_biologging_penguin;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO PUBLIC;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO aatams_sattag_nrt;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anmn_metadata;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO argo;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO dw_aatams_acoustic;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO soop;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO aodn_dart;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO aatams_biologging_penguin;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT ON TABLES  TO PUBLIC;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO aatams_sattag_nrt;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anmn_metadata;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO argo;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO dw_aatams_acoustic;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO soop;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO aodn_dart;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO aatams_biologging_penguin;


SET search_path = report, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: report; Owner: report
--

ALTER DEFAULT PRIVILEGES FOR ROLE report IN SCHEMA report GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE report IN SCHEMA report GRANT ALL ON SEQUENCES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE report IN SCHEMA report GRANT ALL ON SEQUENCES  TO harvest_report_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: report; Owner: report
--

ALTER DEFAULT PRIVILEGES FOR ROLE report IN SCHEMA report GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE report IN SCHEMA report GRANT ALL ON FUNCTIONS  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE report IN SCHEMA report GRANT ALL ON FUNCTIONS  TO harvest_report_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: report; Owner: report
--

ALTER DEFAULT PRIVILEGES FOR ROLE report IN SCHEMA report GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE report IN SCHEMA report GRANT ALL ON TABLES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE report IN SCHEMA report GRANT ALL ON TABLES  TO harvest_report_write_group;


SET search_path = report_test, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: report_test; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA report_test GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA report_test GRANT ALL ON SEQUENCES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA report_test GRANT ALL ON SEQUENCES  TO harvest_report_test_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: report_test; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA report_test GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA report_test GRANT ALL ON FUNCTIONS  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA report_test GRANT ALL ON FUNCTIONS  TO harvest_report_test_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: report_test; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA report_test GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA report_test GRANT ALL ON TABLES  TO harvest_write_group;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA report_test GRANT ALL ON TABLES  TO harvest_report_test_write_group;


SET search_path = soop, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: soop; Owner: soop
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop IN SCHEMA soop GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop IN SCHEMA soop GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: soop; Owner: soop
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop IN SCHEMA soop GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop IN SCHEMA soop GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: soop; Owner: soop
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop IN SCHEMA soop GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop IN SCHEMA soop GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = soop_asf_fmt, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_asf_fmt IN SCHEMA soop_asf_fmt GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_asf_fmt IN SCHEMA soop_asf_fmt GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_asf_fmt IN SCHEMA soop_asf_fmt GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_asf_fmt IN SCHEMA soop_asf_fmt GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: soop_asf_fmt; Owner: soop_asf_fmt
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_asf_fmt IN SCHEMA soop_asf_fmt GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_asf_fmt IN SCHEMA soop_asf_fmt GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = soop_asf_mt, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_asf_mt IN SCHEMA soop_asf_mt GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_asf_mt IN SCHEMA soop_asf_mt GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_asf_mt IN SCHEMA soop_asf_mt GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_asf_mt IN SCHEMA soop_asf_mt GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: soop_asf_mt; Owner: soop_asf_mt
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_asf_mt IN SCHEMA soop_asf_mt GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_asf_mt IN SCHEMA soop_asf_mt GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = soop_auscpr, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_auscpr IN SCHEMA soop_auscpr GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_auscpr IN SCHEMA soop_auscpr GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_auscpr IN SCHEMA soop_auscpr GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_auscpr IN SCHEMA soop_auscpr GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: soop_auscpr; Owner: soop_auscpr
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_auscpr IN SCHEMA soop_auscpr GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_auscpr IN SCHEMA soop_auscpr GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = soop_ba, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: soop_ba; Owner: soop_ba
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_ba IN SCHEMA soop_ba GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_ba IN SCHEMA soop_ba GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: soop_ba; Owner: soop_ba
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_ba IN SCHEMA soop_ba GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_ba IN SCHEMA soop_ba GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: soop_ba; Owner: soop_ba
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_ba IN SCHEMA soop_ba GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_ba IN SCHEMA soop_ba GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = soop_co2, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: soop_co2; Owner: soop_co2
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_co2 IN SCHEMA soop_co2 GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_co2 IN SCHEMA soop_co2 GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: soop_co2; Owner: soop_co2
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_co2 IN SCHEMA soop_co2 GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_co2 IN SCHEMA soop_co2 GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: soop_co2; Owner: soop_co2
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_co2 IN SCHEMA soop_co2 GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_co2 IN SCHEMA soop_co2 GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = soop_sst, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: soop_sst; Owner: soop_sst
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_sst IN SCHEMA soop_sst GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_sst IN SCHEMA soop_sst GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: soop_sst; Owner: soop_sst
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_sst IN SCHEMA soop_sst GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_sst IN SCHEMA soop_sst GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: soop_sst; Owner: soop_sst
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_sst IN SCHEMA soop_sst GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_sst IN SCHEMA soop_sst GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = soop_tmv, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: soop_tmv; Owner: soop_tmv
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_tmv IN SCHEMA soop_tmv GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_tmv IN SCHEMA soop_tmv GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: soop_tmv; Owner: soop_tmv
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_tmv IN SCHEMA soop_tmv GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_tmv IN SCHEMA soop_tmv GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: soop_tmv; Owner: soop_tmv
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_tmv IN SCHEMA soop_tmv GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_tmv IN SCHEMA soop_tmv GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = soop_tmv_nrt, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_tmv_nrt IN SCHEMA soop_tmv_nrt GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_tmv_nrt IN SCHEMA soop_tmv_nrt GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_tmv_nrt IN SCHEMA soop_tmv_nrt GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_tmv_nrt IN SCHEMA soop_tmv_nrt GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: soop_tmv_nrt; Owner: soop_tmv_nrt
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_tmv_nrt IN SCHEMA soop_tmv_nrt GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_tmv_nrt IN SCHEMA soop_tmv_nrt GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = soop_trv, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: soop_trv; Owner: soop_trv
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_trv IN SCHEMA soop_trv GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_trv IN SCHEMA soop_trv GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: soop_trv; Owner: soop_trv
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_trv IN SCHEMA soop_trv GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_trv IN SCHEMA soop_trv GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: soop_trv; Owner: soop_trv
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_trv IN SCHEMA soop_trv GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_trv IN SCHEMA soop_trv GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = soop_xbt_dm, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: soop_xbt_dm; Owner: soop_xbt_dm
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_xbt_dm IN SCHEMA soop_xbt_dm GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_xbt_dm IN SCHEMA soop_xbt_dm GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: soop_xbt_dm; Owner: soop_xbt_dm
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_xbt_dm IN SCHEMA soop_xbt_dm GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_xbt_dm IN SCHEMA soop_xbt_dm GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: soop_xbt_dm; Owner: soop_xbt_dm
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_xbt_dm IN SCHEMA soop_xbt_dm GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_xbt_dm IN SCHEMA soop_xbt_dm GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = soop_xbt_nrt, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: soop_xbt_nrt; Owner: soop_xbt_nrt
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_xbt_nrt IN SCHEMA soop_xbt_nrt GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_xbt_nrt IN SCHEMA soop_xbt_nrt GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: soop_xbt_nrt; Owner: soop_xbt_nrt
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_xbt_nrt IN SCHEMA soop_xbt_nrt GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_xbt_nrt IN SCHEMA soop_xbt_nrt GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: soop_xbt_nrt; Owner: soop_xbt_nrt
--

ALTER DEFAULT PRIVILEGES FOR ROLE soop_xbt_nrt IN SCHEMA soop_xbt_nrt GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE soop_xbt_nrt IN SCHEMA soop_xbt_nrt GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = srs_altimetry, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_altimetry IN SCHEMA srs_altimetry GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_altimetry IN SCHEMA srs_altimetry GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_altimetry IN SCHEMA srs_altimetry GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_altimetry IN SCHEMA srs_altimetry GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: srs_altimetry; Owner: srs_altimetry
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_altimetry IN SCHEMA srs_altimetry GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_altimetry IN SCHEMA srs_altimetry GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = srs_oc, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: srs_oc; Owner: srs_oc
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc IN SCHEMA srs_oc GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc IN SCHEMA srs_oc GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: srs_oc; Owner: srs_oc
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc IN SCHEMA srs_oc GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc IN SCHEMA srs_oc GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: srs_oc; Owner: srs_oc
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc IN SCHEMA srs_oc GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc IN SCHEMA srs_oc GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = srs_oc_bodbaw, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_bodbaw IN SCHEMA srs_oc_bodbaw GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_bodbaw IN SCHEMA srs_oc_bodbaw GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_bodbaw IN SCHEMA srs_oc_bodbaw GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_bodbaw IN SCHEMA srs_oc_bodbaw GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: srs_oc_bodbaw; Owner: srs_oc_bodbaw
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_bodbaw IN SCHEMA srs_oc_bodbaw GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_bodbaw IN SCHEMA srs_oc_bodbaw GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = srs_oc_ljco_aeronet, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: srs_oc_ljco_aeronet; Owner: srs_oc_ljco_aeronet
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_ljco_aeronet IN SCHEMA srs_oc_ljco_aeronet GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_ljco_aeronet IN SCHEMA srs_oc_ljco_aeronet GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: srs_oc_ljco_aeronet; Owner: srs_oc_ljco_aeronet
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_ljco_aeronet IN SCHEMA srs_oc_ljco_aeronet GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_ljco_aeronet IN SCHEMA srs_oc_ljco_aeronet GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: srs_oc_ljco_aeronet; Owner: srs_oc_ljco_aeronet
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_ljco_aeronet IN SCHEMA srs_oc_ljco_aeronet GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_ljco_aeronet IN SCHEMA srs_oc_ljco_aeronet GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = srs_oc_ljco_wws, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_ljco_wws IN SCHEMA srs_oc_ljco_wws GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_ljco_wws IN SCHEMA srs_oc_ljco_wws GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_ljco_wws IN SCHEMA srs_oc_ljco_wws GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_ljco_wws IN SCHEMA srs_oc_ljco_wws GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: srs_oc_ljco_wws; Owner: srs_oc_ljco_wws
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_ljco_wws IN SCHEMA srs_oc_ljco_wws GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_ljco_wws IN SCHEMA srs_oc_ljco_wws GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = srs_oc_soop_rad, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_soop_rad IN SCHEMA srs_oc_soop_rad GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_soop_rad IN SCHEMA srs_oc_soop_rad GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_soop_rad IN SCHEMA srs_oc_soop_rad GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_soop_rad IN SCHEMA srs_oc_soop_rad GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: srs_oc_soop_rad; Owner: srs_oc_soop_rad
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_soop_rad IN SCHEMA srs_oc_soop_rad GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_oc_soop_rad IN SCHEMA srs_oc_soop_rad GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = srs_sst, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: srs_sst; Owner: srs_sst
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_sst IN SCHEMA srs_sst GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_sst IN SCHEMA srs_sst GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: srs_sst; Owner: srs_sst
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_sst IN SCHEMA srs_sst GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_sst IN SCHEMA srs_sst GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: srs_sst; Owner: srs_sst
--

ALTER DEFAULT PRIVILEGES FOR ROLE srs_sst IN SCHEMA srs_sst GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE srs_sst IN SCHEMA srs_sst GRANT ALL ON TABLES  TO harvest_write_group;


SET search_path = wodb, pg_catalog;

--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: wodb; Owner: wodb
--

ALTER DEFAULT PRIVILEGES FOR ROLE wodb IN SCHEMA wodb GRANT SELECT ON SEQUENCES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE wodb IN SCHEMA wodb GRANT ALL ON SEQUENCES  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: wodb; Owner: wodb
--

ALTER DEFAULT PRIVILEGES FOR ROLE wodb IN SCHEMA wodb GRANT ALL ON FUNCTIONS  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE wodb IN SCHEMA wodb GRANT ALL ON FUNCTIONS  TO harvest_write_group;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: wodb; Owner: wodb
--

ALTER DEFAULT PRIVILEGES FOR ROLE wodb IN SCHEMA wodb GRANT SELECT ON TABLES  TO harvest_read_group;
ALTER DEFAULT PRIVILEGES FOR ROLE wodb IN SCHEMA wodb GRANT ALL ON TABLES  TO harvest_write_group;


--
-- PostgreSQL database dump complete
--

